/*
Qovery API

- Qovery is the fastest way to deploy your full-stack apps on any Cloud provider. - ℹ️ The API is stable and still in development.

API version: 1.0.4
Contact: support+api+documentation@qovery.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package qovery

import (
	"encoding/json"
	"fmt"
)

// checks if the HelmResponseAllOfSourceOneOf1 type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &HelmResponseAllOfSourceOneOf1{}

// HelmResponseAllOfSourceOneOf1 struct for HelmResponseAllOfSourceOneOf1
type HelmResponseAllOfSourceOneOf1 struct {
	Repository           HelmSourceRepositoryResponse `json:"repository"`
	AdditionalProperties map[string]interface{}
}

type _HelmResponseAllOfSourceOneOf1 HelmResponseAllOfSourceOneOf1

// NewHelmResponseAllOfSourceOneOf1 instantiates a new HelmResponseAllOfSourceOneOf1 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewHelmResponseAllOfSourceOneOf1(repository HelmSourceRepositoryResponse) *HelmResponseAllOfSourceOneOf1 {
	this := HelmResponseAllOfSourceOneOf1{}
	this.Repository = repository
	return &this
}

// NewHelmResponseAllOfSourceOneOf1WithDefaults instantiates a new HelmResponseAllOfSourceOneOf1 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewHelmResponseAllOfSourceOneOf1WithDefaults() *HelmResponseAllOfSourceOneOf1 {
	this := HelmResponseAllOfSourceOneOf1{}
	return &this
}

// GetRepository returns the Repository field value
func (o *HelmResponseAllOfSourceOneOf1) GetRepository() HelmSourceRepositoryResponse {
	if o == nil {
		var ret HelmSourceRepositoryResponse
		return ret
	}

	return o.Repository
}

// GetRepositoryOk returns a tuple with the Repository field value
// and a boolean to check if the value has been set.
func (o *HelmResponseAllOfSourceOneOf1) GetRepositoryOk() (*HelmSourceRepositoryResponse, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Repository, true
}

// SetRepository sets field value
func (o *HelmResponseAllOfSourceOneOf1) SetRepository(v HelmSourceRepositoryResponse) {
	o.Repository = v
}

func (o HelmResponseAllOfSourceOneOf1) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o HelmResponseAllOfSourceOneOf1) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["repository"] = o.Repository

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *HelmResponseAllOfSourceOneOf1) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"repository",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varHelmResponseAllOfSourceOneOf1 := _HelmResponseAllOfSourceOneOf1{}

	err = json.Unmarshal(data, &varHelmResponseAllOfSourceOneOf1)

	if err != nil {
		return err
	}

	*o = HelmResponseAllOfSourceOneOf1(varHelmResponseAllOfSourceOneOf1)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "repository")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableHelmResponseAllOfSourceOneOf1 struct {
	value *HelmResponseAllOfSourceOneOf1
	isSet bool
}

func (v NullableHelmResponseAllOfSourceOneOf1) Get() *HelmResponseAllOfSourceOneOf1 {
	return v.value
}

func (v *NullableHelmResponseAllOfSourceOneOf1) Set(val *HelmResponseAllOfSourceOneOf1) {
	v.value = val
	v.isSet = true
}

func (v NullableHelmResponseAllOfSourceOneOf1) IsSet() bool {
	return v.isSet
}

func (v *NullableHelmResponseAllOfSourceOneOf1) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableHelmResponseAllOfSourceOneOf1(val *HelmResponseAllOfSourceOneOf1) *NullableHelmResponseAllOfSourceOneOf1 {
	return &NullableHelmResponseAllOfSourceOneOf1{value: val, isSet: true}
}

func (v NullableHelmResponseAllOfSourceOneOf1) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableHelmResponseAllOfSourceOneOf1) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
