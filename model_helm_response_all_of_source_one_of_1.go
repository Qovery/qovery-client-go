/*
Qovery API

- Qovery is the fastest way to deploy your full-stack apps on any Cloud provider. - ℹ️ The API is stable and still in development.

API version: 1.0.3
Contact: support+api+documentation@qovery.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package qovery

import (
	"encoding/json"
)

// checks if the HelmResponseAllOfSourceOneOf1 type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &HelmResponseAllOfSourceOneOf1{}

// HelmResponseAllOfSourceOneOf1 struct for HelmResponseAllOfSourceOneOf1
type HelmResponseAllOfSourceOneOf1 struct {
	Repository *HelmResponseAllOfSourceOneOf1Repository `json:"repository,omitempty"`
}

// NewHelmResponseAllOfSourceOneOf1 instantiates a new HelmResponseAllOfSourceOneOf1 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewHelmResponseAllOfSourceOneOf1() *HelmResponseAllOfSourceOneOf1 {
	this := HelmResponseAllOfSourceOneOf1{}
	return &this
}

// NewHelmResponseAllOfSourceOneOf1WithDefaults instantiates a new HelmResponseAllOfSourceOneOf1 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewHelmResponseAllOfSourceOneOf1WithDefaults() *HelmResponseAllOfSourceOneOf1 {
	this := HelmResponseAllOfSourceOneOf1{}
	return &this
}

// GetRepository returns the Repository field value if set, zero value otherwise.
func (o *HelmResponseAllOfSourceOneOf1) GetRepository() HelmResponseAllOfSourceOneOf1Repository {
	if o == nil || IsNil(o.Repository) {
		var ret HelmResponseAllOfSourceOneOf1Repository
		return ret
	}
	return *o.Repository
}

// GetRepositoryOk returns a tuple with the Repository field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HelmResponseAllOfSourceOneOf1) GetRepositoryOk() (*HelmResponseAllOfSourceOneOf1Repository, bool) {
	if o == nil || IsNil(o.Repository) {
		return nil, false
	}
	return o.Repository, true
}

// HasRepository returns a boolean if a field has been set.
func (o *HelmResponseAllOfSourceOneOf1) HasRepository() bool {
	if o != nil && !IsNil(o.Repository) {
		return true
	}

	return false
}

// SetRepository gets a reference to the given HelmResponseAllOfSourceOneOf1Repository and assigns it to the Repository field.
func (o *HelmResponseAllOfSourceOneOf1) SetRepository(v HelmResponseAllOfSourceOneOf1Repository) {
	o.Repository = &v
}

func (o HelmResponseAllOfSourceOneOf1) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o HelmResponseAllOfSourceOneOf1) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Repository) {
		toSerialize["repository"] = o.Repository
	}
	return toSerialize, nil
}

type NullableHelmResponseAllOfSourceOneOf1 struct {
	value *HelmResponseAllOfSourceOneOf1
	isSet bool
}

func (v NullableHelmResponseAllOfSourceOneOf1) Get() *HelmResponseAllOfSourceOneOf1 {
	return v.value
}

func (v *NullableHelmResponseAllOfSourceOneOf1) Set(val *HelmResponseAllOfSourceOneOf1) {
	v.value = val
	v.isSet = true
}

func (v NullableHelmResponseAllOfSourceOneOf1) IsSet() bool {
	return v.isSet
}

func (v *NullableHelmResponseAllOfSourceOneOf1) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableHelmResponseAllOfSourceOneOf1(val *HelmResponseAllOfSourceOneOf1) *NullableHelmResponseAllOfSourceOneOf1 {
	return &NullableHelmResponseAllOfSourceOneOf1{value: val, isSet: true}
}

func (v NullableHelmResponseAllOfSourceOneOf1) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableHelmResponseAllOfSourceOneOf1) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
