/*
Qovery API

- Qovery is the fastest way to deploy your full-stack apps on any Cloud provider. - ℹ️ The API is stable and still in development.

API version: 1.0.4
Contact: support+api+documentation@qovery.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package qovery

import (
	"encoding/json"
	"fmt"
)

// AlertRuleState the model 'AlertRuleState'
type AlertRuleState string

// List of AlertRuleState
const (
	ALERTRULESTATE_UNDEPLOYED           AlertRuleState = "UNDEPLOYED"
	ALERTRULESTATE_OK                   AlertRuleState = "OK"
	ALERTRULESTATE_TRIGGERED            AlertRuleState = "TRIGGERED"
	ALERTRULESTATE_PENDING_NOTIFICATION AlertRuleState = "PENDING_NOTIFICATION"
	ALERTRULESTATE_NOTIFIED             AlertRuleState = "NOTIFIED"
	ALERTRULESTATE_SUPPRESSED           AlertRuleState = "SUPPRESSED"
	ALERTRULESTATE_UNROUTED             AlertRuleState = "UNROUTED"
)

// All allowed values of AlertRuleState enum
var AllowedAlertRuleStateEnumValues = []AlertRuleState{
	"UNDEPLOYED",
	"OK",
	"TRIGGERED",
	"PENDING_NOTIFICATION",
	"NOTIFIED",
	"SUPPRESSED",
	"UNROUTED",
}

func (v *AlertRuleState) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := AlertRuleState(value)
	for _, existing := range AllowedAlertRuleStateEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid AlertRuleState", value)
}

// NewAlertRuleStateFromValue returns a pointer to a valid AlertRuleState
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewAlertRuleStateFromValue(v string) (*AlertRuleState, error) {
	ev := AlertRuleState(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for AlertRuleState: valid values are %v", v, AllowedAlertRuleStateEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v AlertRuleState) IsValid() bool {
	for _, existing := range AllowedAlertRuleStateEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to AlertRuleState value
func (v AlertRuleState) Ptr() *AlertRuleState {
	return &v
}

type NullableAlertRuleState struct {
	value *AlertRuleState
	isSet bool
}

func (v NullableAlertRuleState) Get() *AlertRuleState {
	return v.value
}

func (v *NullableAlertRuleState) Set(val *AlertRuleState) {
	v.value = val
	v.isSet = true
}

func (v NullableAlertRuleState) IsSet() bool {
	return v.isSet
}

func (v *NullableAlertRuleState) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAlertRuleState(val *AlertRuleState) *NullableAlertRuleState {
	return &NullableAlertRuleState{value: val, isSet: true}
}

func (v NullableAlertRuleState) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAlertRuleState) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
