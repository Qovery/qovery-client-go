/*
Qovery API

- Qovery is the fastest way to deploy your full-stack apps on any Cloud provider. - ℹ️ The API is stable and still in development.

API version: 1.0.3
Contact: support+api+documentation@qovery.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package qovery

import (
	"encoding/json"
)

// checks if the OrganizationCustomRoleProjectPermissionsInner type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &OrganizationCustomRoleProjectPermissionsInner{}

// OrganizationCustomRoleProjectPermissionsInner struct for OrganizationCustomRoleProjectPermissionsInner
type OrganizationCustomRoleProjectPermissionsInner struct {
	ProjectId   *string `json:"project_id,omitempty"`
	ProjectName *string `json:"project_name,omitempty"`
	// If `is_admin` is `true`, the user is: - automatically `MANAGER` for each environment type - allowed to manage project deployment rules - able to delete the project    Note that `permissions` can then be ignored for this project
	IsAdmin              *bool                                                                        `json:"is_admin,omitempty"`
	Permissions          []OrganizationCustomRoleUpdateRequestProjectPermissionsInnerPermissionsInner `json:"permissions,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _OrganizationCustomRoleProjectPermissionsInner OrganizationCustomRoleProjectPermissionsInner

// NewOrganizationCustomRoleProjectPermissionsInner instantiates a new OrganizationCustomRoleProjectPermissionsInner object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewOrganizationCustomRoleProjectPermissionsInner() *OrganizationCustomRoleProjectPermissionsInner {
	this := OrganizationCustomRoleProjectPermissionsInner{}
	var isAdmin bool = false
	this.IsAdmin = &isAdmin
	return &this
}

// NewOrganizationCustomRoleProjectPermissionsInnerWithDefaults instantiates a new OrganizationCustomRoleProjectPermissionsInner object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewOrganizationCustomRoleProjectPermissionsInnerWithDefaults() *OrganizationCustomRoleProjectPermissionsInner {
	this := OrganizationCustomRoleProjectPermissionsInner{}
	var isAdmin bool = false
	this.IsAdmin = &isAdmin
	return &this
}

// GetProjectId returns the ProjectId field value if set, zero value otherwise.
func (o *OrganizationCustomRoleProjectPermissionsInner) GetProjectId() string {
	if o == nil || IsNil(o.ProjectId) {
		var ret string
		return ret
	}
	return *o.ProjectId
}

// GetProjectIdOk returns a tuple with the ProjectId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrganizationCustomRoleProjectPermissionsInner) GetProjectIdOk() (*string, bool) {
	if o == nil || IsNil(o.ProjectId) {
		return nil, false
	}
	return o.ProjectId, true
}

// HasProjectId returns a boolean if a field has been set.
func (o *OrganizationCustomRoleProjectPermissionsInner) HasProjectId() bool {
	if o != nil && !IsNil(o.ProjectId) {
		return true
	}

	return false
}

// SetProjectId gets a reference to the given string and assigns it to the ProjectId field.
func (o *OrganizationCustomRoleProjectPermissionsInner) SetProjectId(v string) {
	o.ProjectId = &v
}

// GetProjectName returns the ProjectName field value if set, zero value otherwise.
func (o *OrganizationCustomRoleProjectPermissionsInner) GetProjectName() string {
	if o == nil || IsNil(o.ProjectName) {
		var ret string
		return ret
	}
	return *o.ProjectName
}

// GetProjectNameOk returns a tuple with the ProjectName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrganizationCustomRoleProjectPermissionsInner) GetProjectNameOk() (*string, bool) {
	if o == nil || IsNil(o.ProjectName) {
		return nil, false
	}
	return o.ProjectName, true
}

// HasProjectName returns a boolean if a field has been set.
func (o *OrganizationCustomRoleProjectPermissionsInner) HasProjectName() bool {
	if o != nil && !IsNil(o.ProjectName) {
		return true
	}

	return false
}

// SetProjectName gets a reference to the given string and assigns it to the ProjectName field.
func (o *OrganizationCustomRoleProjectPermissionsInner) SetProjectName(v string) {
	o.ProjectName = &v
}

// GetIsAdmin returns the IsAdmin field value if set, zero value otherwise.
func (o *OrganizationCustomRoleProjectPermissionsInner) GetIsAdmin() bool {
	if o == nil || IsNil(o.IsAdmin) {
		var ret bool
		return ret
	}
	return *o.IsAdmin
}

// GetIsAdminOk returns a tuple with the IsAdmin field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrganizationCustomRoleProjectPermissionsInner) GetIsAdminOk() (*bool, bool) {
	if o == nil || IsNil(o.IsAdmin) {
		return nil, false
	}
	return o.IsAdmin, true
}

// HasIsAdmin returns a boolean if a field has been set.
func (o *OrganizationCustomRoleProjectPermissionsInner) HasIsAdmin() bool {
	if o != nil && !IsNil(o.IsAdmin) {
		return true
	}

	return false
}

// SetIsAdmin gets a reference to the given bool and assigns it to the IsAdmin field.
func (o *OrganizationCustomRoleProjectPermissionsInner) SetIsAdmin(v bool) {
	o.IsAdmin = &v
}

// GetPermissions returns the Permissions field value if set, zero value otherwise.
func (o *OrganizationCustomRoleProjectPermissionsInner) GetPermissions() []OrganizationCustomRoleUpdateRequestProjectPermissionsInnerPermissionsInner {
	if o == nil || IsNil(o.Permissions) {
		var ret []OrganizationCustomRoleUpdateRequestProjectPermissionsInnerPermissionsInner
		return ret
	}
	return o.Permissions
}

// GetPermissionsOk returns a tuple with the Permissions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrganizationCustomRoleProjectPermissionsInner) GetPermissionsOk() ([]OrganizationCustomRoleUpdateRequestProjectPermissionsInnerPermissionsInner, bool) {
	if o == nil || IsNil(o.Permissions) {
		return nil, false
	}
	return o.Permissions, true
}

// HasPermissions returns a boolean if a field has been set.
func (o *OrganizationCustomRoleProjectPermissionsInner) HasPermissions() bool {
	if o != nil && !IsNil(o.Permissions) {
		return true
	}

	return false
}

// SetPermissions gets a reference to the given []OrganizationCustomRoleUpdateRequestProjectPermissionsInnerPermissionsInner and assigns it to the Permissions field.
func (o *OrganizationCustomRoleProjectPermissionsInner) SetPermissions(v []OrganizationCustomRoleUpdateRequestProjectPermissionsInnerPermissionsInner) {
	o.Permissions = v
}

func (o OrganizationCustomRoleProjectPermissionsInner) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o OrganizationCustomRoleProjectPermissionsInner) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ProjectId) {
		toSerialize["project_id"] = o.ProjectId
	}
	if !IsNil(o.ProjectName) {
		toSerialize["project_name"] = o.ProjectName
	}
	if !IsNil(o.IsAdmin) {
		toSerialize["is_admin"] = o.IsAdmin
	}
	if !IsNil(o.Permissions) {
		toSerialize["permissions"] = o.Permissions
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *OrganizationCustomRoleProjectPermissionsInner) UnmarshalJSON(data []byte) (err error) {
	varOrganizationCustomRoleProjectPermissionsInner := _OrganizationCustomRoleProjectPermissionsInner{}

	err = json.Unmarshal(data, &varOrganizationCustomRoleProjectPermissionsInner)

	if err != nil {
		return err
	}

	*o = OrganizationCustomRoleProjectPermissionsInner(varOrganizationCustomRoleProjectPermissionsInner)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "project_id")
		delete(additionalProperties, "project_name")
		delete(additionalProperties, "is_admin")
		delete(additionalProperties, "permissions")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableOrganizationCustomRoleProjectPermissionsInner struct {
	value *OrganizationCustomRoleProjectPermissionsInner
	isSet bool
}

func (v NullableOrganizationCustomRoleProjectPermissionsInner) Get() *OrganizationCustomRoleProjectPermissionsInner {
	return v.value
}

func (v *NullableOrganizationCustomRoleProjectPermissionsInner) Set(val *OrganizationCustomRoleProjectPermissionsInner) {
	v.value = val
	v.isSet = true
}

func (v NullableOrganizationCustomRoleProjectPermissionsInner) IsSet() bool {
	return v.isSet
}

func (v *NullableOrganizationCustomRoleProjectPermissionsInner) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOrganizationCustomRoleProjectPermissionsInner(val *OrganizationCustomRoleProjectPermissionsInner) *NullableOrganizationCustomRoleProjectPermissionsInner {
	return &NullableOrganizationCustomRoleProjectPermissionsInner{value: val, isSet: true}
}

func (v NullableOrganizationCustomRoleProjectPermissionsInner) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOrganizationCustomRoleProjectPermissionsInner) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
