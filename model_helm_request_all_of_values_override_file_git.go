/*
Qovery API

- Qovery is the fastest way to deploy your full-stack apps on any Cloud provider. - ℹ️ The API is stable and still in development.

API version: 1.0.3
Contact: support+api+documentation@qovery.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package qovery

import (
	"encoding/json"
)

// checks if the HelmRequestAllOfValuesOverrideFileGit type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &HelmRequestAllOfValuesOverrideFileGit{}

// HelmRequestAllOfValuesOverrideFileGit struct for HelmRequestAllOfValuesOverrideFileGit
type HelmRequestAllOfValuesOverrideFileGit struct {
	GitRepository *ApplicationGitRepositoryRequest `json:"git_repository,omitempty"`
	// List of path inside your git repository to locate values file. Must start by a /
	Paths []string `json:"paths,omitempty"`
}

// NewHelmRequestAllOfValuesOverrideFileGit instantiates a new HelmRequestAllOfValuesOverrideFileGit object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewHelmRequestAllOfValuesOverrideFileGit() *HelmRequestAllOfValuesOverrideFileGit {
	this := HelmRequestAllOfValuesOverrideFileGit{}
	return &this
}

// NewHelmRequestAllOfValuesOverrideFileGitWithDefaults instantiates a new HelmRequestAllOfValuesOverrideFileGit object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewHelmRequestAllOfValuesOverrideFileGitWithDefaults() *HelmRequestAllOfValuesOverrideFileGit {
	this := HelmRequestAllOfValuesOverrideFileGit{}
	return &this
}

// GetGitRepository returns the GitRepository field value if set, zero value otherwise.
func (o *HelmRequestAllOfValuesOverrideFileGit) GetGitRepository() ApplicationGitRepositoryRequest {
	if o == nil || IsNil(o.GitRepository) {
		var ret ApplicationGitRepositoryRequest
		return ret
	}
	return *o.GitRepository
}

// GetGitRepositoryOk returns a tuple with the GitRepository field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HelmRequestAllOfValuesOverrideFileGit) GetGitRepositoryOk() (*ApplicationGitRepositoryRequest, bool) {
	if o == nil || IsNil(o.GitRepository) {
		return nil, false
	}
	return o.GitRepository, true
}

// HasGitRepository returns a boolean if a field has been set.
func (o *HelmRequestAllOfValuesOverrideFileGit) HasGitRepository() bool {
	if o != nil && !IsNil(o.GitRepository) {
		return true
	}

	return false
}

// SetGitRepository gets a reference to the given ApplicationGitRepositoryRequest and assigns it to the GitRepository field.
func (o *HelmRequestAllOfValuesOverrideFileGit) SetGitRepository(v ApplicationGitRepositoryRequest) {
	o.GitRepository = &v
}

// GetPaths returns the Paths field value if set, zero value otherwise.
func (o *HelmRequestAllOfValuesOverrideFileGit) GetPaths() []string {
	if o == nil || IsNil(o.Paths) {
		var ret []string
		return ret
	}
	return o.Paths
}

// GetPathsOk returns a tuple with the Paths field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HelmRequestAllOfValuesOverrideFileGit) GetPathsOk() ([]string, bool) {
	if o == nil || IsNil(o.Paths) {
		return nil, false
	}
	return o.Paths, true
}

// HasPaths returns a boolean if a field has been set.
func (o *HelmRequestAllOfValuesOverrideFileGit) HasPaths() bool {
	if o != nil && !IsNil(o.Paths) {
		return true
	}

	return false
}

// SetPaths gets a reference to the given []string and assigns it to the Paths field.
func (o *HelmRequestAllOfValuesOverrideFileGit) SetPaths(v []string) {
	o.Paths = v
}

func (o HelmRequestAllOfValuesOverrideFileGit) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o HelmRequestAllOfValuesOverrideFileGit) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.GitRepository) {
		toSerialize["git_repository"] = o.GitRepository
	}
	if !IsNil(o.Paths) {
		toSerialize["paths"] = o.Paths
	}
	return toSerialize, nil
}

type NullableHelmRequestAllOfValuesOverrideFileGit struct {
	value *HelmRequestAllOfValuesOverrideFileGit
	isSet bool
}

func (v NullableHelmRequestAllOfValuesOverrideFileGit) Get() *HelmRequestAllOfValuesOverrideFileGit {
	return v.value
}

func (v *NullableHelmRequestAllOfValuesOverrideFileGit) Set(val *HelmRequestAllOfValuesOverrideFileGit) {
	v.value = val
	v.isSet = true
}

func (v NullableHelmRequestAllOfValuesOverrideFileGit) IsSet() bool {
	return v.isSet
}

func (v *NullableHelmRequestAllOfValuesOverrideFileGit) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableHelmRequestAllOfValuesOverrideFileGit(val *HelmRequestAllOfValuesOverrideFileGit) *NullableHelmRequestAllOfValuesOverrideFileGit {
	return &NullableHelmRequestAllOfValuesOverrideFileGit{value: val, isSet: true}
}

func (v NullableHelmRequestAllOfValuesOverrideFileGit) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableHelmRequestAllOfValuesOverrideFileGit) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
