/*
Qovery API

- Qovery is the fastest way to deploy your full-stack apps on any Cloud provider. - ℹ️ The API is stable and still in development.

API version: 1.0.3
Contact: support+api+documentation@qovery.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package qovery

import (
	"encoding/json"
)

// OrganizationCurrentCostAllOf struct for OrganizationCurrentCostAllOf
type OrganizationCurrentCostAllOf struct {
	PaidUsage      *PaidUsage      `json:"paid_usage,omitempty"`
	CommunityUsage *CommunityUsage `json:"community_usage,omitempty"`
}

// NewOrganizationCurrentCostAllOf instantiates a new OrganizationCurrentCostAllOf object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewOrganizationCurrentCostAllOf() *OrganizationCurrentCostAllOf {
	this := OrganizationCurrentCostAllOf{}
	return &this
}

// NewOrganizationCurrentCostAllOfWithDefaults instantiates a new OrganizationCurrentCostAllOf object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewOrganizationCurrentCostAllOfWithDefaults() *OrganizationCurrentCostAllOf {
	this := OrganizationCurrentCostAllOf{}
	return &this
}

// GetPaidUsage returns the PaidUsage field value if set, zero value otherwise.
func (o *OrganizationCurrentCostAllOf) GetPaidUsage() PaidUsage {
	if o == nil || o.PaidUsage == nil {
		var ret PaidUsage
		return ret
	}
	return *o.PaidUsage
}

// GetPaidUsageOk returns a tuple with the PaidUsage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrganizationCurrentCostAllOf) GetPaidUsageOk() (*PaidUsage, bool) {
	if o == nil || o.PaidUsage == nil {
		return nil, false
	}
	return o.PaidUsage, true
}

// HasPaidUsage returns a boolean if a field has been set.
func (o *OrganizationCurrentCostAllOf) HasPaidUsage() bool {
	if o != nil && o.PaidUsage != nil {
		return true
	}

	return false
}

// SetPaidUsage gets a reference to the given PaidUsage and assigns it to the PaidUsage field.
func (o *OrganizationCurrentCostAllOf) SetPaidUsage(v PaidUsage) {
	o.PaidUsage = &v
}

// GetCommunityUsage returns the CommunityUsage field value if set, zero value otherwise.
func (o *OrganizationCurrentCostAllOf) GetCommunityUsage() CommunityUsage {
	if o == nil || o.CommunityUsage == nil {
		var ret CommunityUsage
		return ret
	}
	return *o.CommunityUsage
}

// GetCommunityUsageOk returns a tuple with the CommunityUsage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrganizationCurrentCostAllOf) GetCommunityUsageOk() (*CommunityUsage, bool) {
	if o == nil || o.CommunityUsage == nil {
		return nil, false
	}
	return o.CommunityUsage, true
}

// HasCommunityUsage returns a boolean if a field has been set.
func (o *OrganizationCurrentCostAllOf) HasCommunityUsage() bool {
	if o != nil && o.CommunityUsage != nil {
		return true
	}

	return false
}

// SetCommunityUsage gets a reference to the given CommunityUsage and assigns it to the CommunityUsage field.
func (o *OrganizationCurrentCostAllOf) SetCommunityUsage(v CommunityUsage) {
	o.CommunityUsage = &v
}

func (o OrganizationCurrentCostAllOf) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.PaidUsage != nil {
		toSerialize["paid_usage"] = o.PaidUsage
	}
	if o.CommunityUsage != nil {
		toSerialize["community_usage"] = o.CommunityUsage
	}
	return json.Marshal(toSerialize)
}

type NullableOrganizationCurrentCostAllOf struct {
	value *OrganizationCurrentCostAllOf
	isSet bool
}

func (v NullableOrganizationCurrentCostAllOf) Get() *OrganizationCurrentCostAllOf {
	return v.value
}

func (v *NullableOrganizationCurrentCostAllOf) Set(val *OrganizationCurrentCostAllOf) {
	v.value = val
	v.isSet = true
}

func (v NullableOrganizationCurrentCostAllOf) IsSet() bool {
	return v.isSet
}

func (v *NullableOrganizationCurrentCostAllOf) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOrganizationCurrentCostAllOf(val *OrganizationCurrentCostAllOf) *NullableOrganizationCurrentCostAllOf {
	return &NullableOrganizationCurrentCostAllOf{value: val, isSet: true}
}

func (v NullableOrganizationCurrentCostAllOf) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOrganizationCurrentCostAllOf) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
