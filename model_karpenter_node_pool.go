/*
Qovery API

- Qovery is the fastest way to deploy your full-stack apps on any Cloud provider. - ℹ️ The API is stable and still in development.

API version: 1.0.3
Contact: support+api+documentation@qovery.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package qovery

import (
	"encoding/json"
	"fmt"
)

// checks if the KarpenterNodePool type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &KarpenterNodePool{}

// KarpenterNodePool
type KarpenterNodePool struct {
	Requirements         []KarpenterNodePoolRequirement `json:"requirements"`
	StableOverride       *KarpenterNodePoolOverride     `json:"stable_override,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _KarpenterNodePool KarpenterNodePool

// NewKarpenterNodePool instantiates a new KarpenterNodePool object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewKarpenterNodePool(requirements []KarpenterNodePoolRequirement) *KarpenterNodePool {
	this := KarpenterNodePool{}
	this.Requirements = requirements
	return &this
}

// NewKarpenterNodePoolWithDefaults instantiates a new KarpenterNodePool object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewKarpenterNodePoolWithDefaults() *KarpenterNodePool {
	this := KarpenterNodePool{}
	return &this
}

// GetRequirements returns the Requirements field value
func (o *KarpenterNodePool) GetRequirements() []KarpenterNodePoolRequirement {
	if o == nil {
		var ret []KarpenterNodePoolRequirement
		return ret
	}

	return o.Requirements
}

// GetRequirementsOk returns a tuple with the Requirements field value
// and a boolean to check if the value has been set.
func (o *KarpenterNodePool) GetRequirementsOk() ([]KarpenterNodePoolRequirement, bool) {
	if o == nil {
		return nil, false
	}
	return o.Requirements, true
}

// SetRequirements sets field value
func (o *KarpenterNodePool) SetRequirements(v []KarpenterNodePoolRequirement) {
	o.Requirements = v
}

// GetStableOverride returns the StableOverride field value if set, zero value otherwise.
func (o *KarpenterNodePool) GetStableOverride() KarpenterNodePoolOverride {
	if o == nil || IsNil(o.StableOverride) {
		var ret KarpenterNodePoolOverride
		return ret
	}
	return *o.StableOverride
}

// GetStableOverrideOk returns a tuple with the StableOverride field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KarpenterNodePool) GetStableOverrideOk() (*KarpenterNodePoolOverride, bool) {
	if o == nil || IsNil(o.StableOverride) {
		return nil, false
	}
	return o.StableOverride, true
}

// HasStableOverride returns a boolean if a field has been set.
func (o *KarpenterNodePool) HasStableOverride() bool {
	if o != nil && !IsNil(o.StableOverride) {
		return true
	}

	return false
}

// SetStableOverride gets a reference to the given KarpenterNodePoolOverride and assigns it to the StableOverride field.
func (o *KarpenterNodePool) SetStableOverride(v KarpenterNodePoolOverride) {
	o.StableOverride = &v
}

func (o KarpenterNodePool) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o KarpenterNodePool) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["requirements"] = o.Requirements
	if !IsNil(o.StableOverride) {
		toSerialize["stable_override"] = o.StableOverride
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *KarpenterNodePool) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"requirements",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varKarpenterNodePool := _KarpenterNodePool{}

	err = json.Unmarshal(data, &varKarpenterNodePool)

	if err != nil {
		return err
	}

	*o = KarpenterNodePool(varKarpenterNodePool)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "requirements")
		delete(additionalProperties, "stable_override")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableKarpenterNodePool struct {
	value *KarpenterNodePool
	isSet bool
}

func (v NullableKarpenterNodePool) Get() *KarpenterNodePool {
	return v.value
}

func (v *NullableKarpenterNodePool) Set(val *KarpenterNodePool) {
	v.value = val
	v.isSet = true
}

func (v NullableKarpenterNodePool) IsSet() bool {
	return v.isSet
}

func (v *NullableKarpenterNodePool) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableKarpenterNodePool(val *KarpenterNodePool) *NullableKarpenterNodePool {
	return &NullableKarpenterNodePool{value: val, isSet: true}
}

func (v NullableKarpenterNodePool) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableKarpenterNodePool) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
