/*
Qovery API

- Qovery is the fastest way to deploy your full-stack apps on any Cloud provider. - ℹ️ The API is stable and still in development.

API version: 1.0.3
Contact: support+api+documentation@qovery.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package qovery

import (
	"encoding/json"
)

// EnvironmentLogScope struct for EnvironmentLogScope
type EnvironmentLogScope struct {
	Type *EnvironmentLogTypeEnum `json:"type,omitempty"`
	Name *string                 `json:"name,omitempty"`
	Id   *string                 `json:"id,omitempty"`
}

// NewEnvironmentLogScope instantiates a new EnvironmentLogScope object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEnvironmentLogScope() *EnvironmentLogScope {
	this := EnvironmentLogScope{}
	return &this
}

// NewEnvironmentLogScopeWithDefaults instantiates a new EnvironmentLogScope object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEnvironmentLogScopeWithDefaults() *EnvironmentLogScope {
	this := EnvironmentLogScope{}
	return &this
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *EnvironmentLogScope) GetType() EnvironmentLogTypeEnum {
	if o == nil || o.Type == nil {
		var ret EnvironmentLogTypeEnum
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EnvironmentLogScope) GetTypeOk() (*EnvironmentLogTypeEnum, bool) {
	if o == nil || o.Type == nil {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *EnvironmentLogScope) HasType() bool {
	if o != nil && o.Type != nil {
		return true
	}

	return false
}

// SetType gets a reference to the given EnvironmentLogTypeEnum and assigns it to the Type field.
func (o *EnvironmentLogScope) SetType(v EnvironmentLogTypeEnum) {
	o.Type = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *EnvironmentLogScope) GetName() string {
	if o == nil || o.Name == nil {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EnvironmentLogScope) GetNameOk() (*string, bool) {
	if o == nil || o.Name == nil {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *EnvironmentLogScope) HasName() bool {
	if o != nil && o.Name != nil {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *EnvironmentLogScope) SetName(v string) {
	o.Name = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *EnvironmentLogScope) GetId() string {
	if o == nil || o.Id == nil {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EnvironmentLogScope) GetIdOk() (*string, bool) {
	if o == nil || o.Id == nil {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *EnvironmentLogScope) HasId() bool {
	if o != nil && o.Id != nil {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *EnvironmentLogScope) SetId(v string) {
	o.Id = &v
}

func (o EnvironmentLogScope) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Type != nil {
		toSerialize["type"] = o.Type
	}
	if o.Name != nil {
		toSerialize["name"] = o.Name
	}
	if o.Id != nil {
		toSerialize["id"] = o.Id
	}
	return json.Marshal(toSerialize)
}

type NullableEnvironmentLogScope struct {
	value *EnvironmentLogScope
	isSet bool
}

func (v NullableEnvironmentLogScope) Get() *EnvironmentLogScope {
	return v.value
}

func (v *NullableEnvironmentLogScope) Set(val *EnvironmentLogScope) {
	v.value = val
	v.isSet = true
}

func (v NullableEnvironmentLogScope) IsSet() bool {
	return v.isSet
}

func (v *NullableEnvironmentLogScope) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEnvironmentLogScope(val *EnvironmentLogScope) *NullableEnvironmentLogScope {
	return &NullableEnvironmentLogScope{value: val, isSet: true}
}

func (v NullableEnvironmentLogScope) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEnvironmentLogScope) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
