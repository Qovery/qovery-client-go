/*
Qovery API

- Qovery is the fastest way to deploy your full-stack apps on any Cloud provider. - ℹ️ The API is stable and still in development.

API version: 1.0.3
Contact: support+api+documentation@qovery.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package qovery

import (
	"encoding/json"
	"fmt"
)

// checks if the AvailableHelmRepositoryResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AvailableHelmRepositoryResponse{}

// AvailableHelmRepositoryResponse struct for AvailableHelmRepositoryResponse
type AvailableHelmRepositoryResponse struct {
	Kind                 HelmRepositoryKindEnum `json:"kind"`
	RequiredConfig       map[string]interface{} `json:"required_config"`
	IsMandatory          bool                   `json:"is_mandatory"`
	AdditionalProperties map[string]interface{}
}

type _AvailableHelmRepositoryResponse AvailableHelmRepositoryResponse

// NewAvailableHelmRepositoryResponse instantiates a new AvailableHelmRepositoryResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAvailableHelmRepositoryResponse(kind HelmRepositoryKindEnum, requiredConfig map[string]interface{}, isMandatory bool) *AvailableHelmRepositoryResponse {
	this := AvailableHelmRepositoryResponse{}
	this.Kind = kind
	this.RequiredConfig = requiredConfig
	this.IsMandatory = isMandatory
	return &this
}

// NewAvailableHelmRepositoryResponseWithDefaults instantiates a new AvailableHelmRepositoryResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAvailableHelmRepositoryResponseWithDefaults() *AvailableHelmRepositoryResponse {
	this := AvailableHelmRepositoryResponse{}
	return &this
}

// GetKind returns the Kind field value
func (o *AvailableHelmRepositoryResponse) GetKind() HelmRepositoryKindEnum {
	if o == nil {
		var ret HelmRepositoryKindEnum
		return ret
	}

	return o.Kind
}

// GetKindOk returns a tuple with the Kind field value
// and a boolean to check if the value has been set.
func (o *AvailableHelmRepositoryResponse) GetKindOk() (*HelmRepositoryKindEnum, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Kind, true
}

// SetKind sets field value
func (o *AvailableHelmRepositoryResponse) SetKind(v HelmRepositoryKindEnum) {
	o.Kind = v
}

// GetRequiredConfig returns the RequiredConfig field value
func (o *AvailableHelmRepositoryResponse) GetRequiredConfig() map[string]interface{} {
	if o == nil {
		var ret map[string]interface{}
		return ret
	}

	return o.RequiredConfig
}

// GetRequiredConfigOk returns a tuple with the RequiredConfig field value
// and a boolean to check if the value has been set.
func (o *AvailableHelmRepositoryResponse) GetRequiredConfigOk() (map[string]interface{}, bool) {
	if o == nil {
		return map[string]interface{}{}, false
	}
	return o.RequiredConfig, true
}

// SetRequiredConfig sets field value
func (o *AvailableHelmRepositoryResponse) SetRequiredConfig(v map[string]interface{}) {
	o.RequiredConfig = v
}

// GetIsMandatory returns the IsMandatory field value
func (o *AvailableHelmRepositoryResponse) GetIsMandatory() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.IsMandatory
}

// GetIsMandatoryOk returns a tuple with the IsMandatory field value
// and a boolean to check if the value has been set.
func (o *AvailableHelmRepositoryResponse) GetIsMandatoryOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.IsMandatory, true
}

// SetIsMandatory sets field value
func (o *AvailableHelmRepositoryResponse) SetIsMandatory(v bool) {
	o.IsMandatory = v
}

func (o AvailableHelmRepositoryResponse) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AvailableHelmRepositoryResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["kind"] = o.Kind
	toSerialize["required_config"] = o.RequiredConfig
	toSerialize["is_mandatory"] = o.IsMandatory

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *AvailableHelmRepositoryResponse) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"kind",
		"required_config",
		"is_mandatory",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varAvailableHelmRepositoryResponse := _AvailableHelmRepositoryResponse{}

	err = json.Unmarshal(data, &varAvailableHelmRepositoryResponse)

	if err != nil {
		return err
	}

	*o = AvailableHelmRepositoryResponse(varAvailableHelmRepositoryResponse)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "kind")
		delete(additionalProperties, "required_config")
		delete(additionalProperties, "is_mandatory")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableAvailableHelmRepositoryResponse struct {
	value *AvailableHelmRepositoryResponse
	isSet bool
}

func (v NullableAvailableHelmRepositoryResponse) Get() *AvailableHelmRepositoryResponse {
	return v.value
}

func (v *NullableAvailableHelmRepositoryResponse) Set(val *AvailableHelmRepositoryResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableAvailableHelmRepositoryResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableAvailableHelmRepositoryResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAvailableHelmRepositoryResponse(val *AvailableHelmRepositoryResponse) *NullableAvailableHelmRepositoryResponse {
	return &NullableAvailableHelmRepositoryResponse{value: val, isSet: true}
}

func (v NullableAvailableHelmRepositoryResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAvailableHelmRepositoryResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
