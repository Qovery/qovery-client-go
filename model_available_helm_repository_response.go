/*
Qovery API

- Qovery is the fastest way to deploy your full-stack apps on any Cloud provider. - ℹ️ The API is stable and still in development.

API version: 1.0.3
Contact: support+api+documentation@qovery.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package qovery

import (
	"encoding/json"
)

// checks if the AvailableHelmRepositoryResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AvailableHelmRepositoryResponse{}

// AvailableHelmRepositoryResponse struct for AvailableHelmRepositoryResponse
type AvailableHelmRepositoryResponse struct {
	Kind           *HelmRepositoryKindEnum `json:"kind,omitempty"`
	RequiredConfig map[string]interface{}  `json:"required_config,omitempty"`
	IsMandatory    *bool                   `json:"is_mandatory,omitempty"`
}

// NewAvailableHelmRepositoryResponse instantiates a new AvailableHelmRepositoryResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAvailableHelmRepositoryResponse() *AvailableHelmRepositoryResponse {
	this := AvailableHelmRepositoryResponse{}
	return &this
}

// NewAvailableHelmRepositoryResponseWithDefaults instantiates a new AvailableHelmRepositoryResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAvailableHelmRepositoryResponseWithDefaults() *AvailableHelmRepositoryResponse {
	this := AvailableHelmRepositoryResponse{}
	return &this
}

// GetKind returns the Kind field value if set, zero value otherwise.
func (o *AvailableHelmRepositoryResponse) GetKind() HelmRepositoryKindEnum {
	if o == nil || IsNil(o.Kind) {
		var ret HelmRepositoryKindEnum
		return ret
	}
	return *o.Kind
}

// GetKindOk returns a tuple with the Kind field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AvailableHelmRepositoryResponse) GetKindOk() (*HelmRepositoryKindEnum, bool) {
	if o == nil || IsNil(o.Kind) {
		return nil, false
	}
	return o.Kind, true
}

// HasKind returns a boolean if a field has been set.
func (o *AvailableHelmRepositoryResponse) HasKind() bool {
	if o != nil && !IsNil(o.Kind) {
		return true
	}

	return false
}

// SetKind gets a reference to the given HelmRepositoryKindEnum and assigns it to the Kind field.
func (o *AvailableHelmRepositoryResponse) SetKind(v HelmRepositoryKindEnum) {
	o.Kind = &v
}

// GetRequiredConfig returns the RequiredConfig field value if set, zero value otherwise.
func (o *AvailableHelmRepositoryResponse) GetRequiredConfig() map[string]interface{} {
	if o == nil || IsNil(o.RequiredConfig) {
		var ret map[string]interface{}
		return ret
	}
	return o.RequiredConfig
}

// GetRequiredConfigOk returns a tuple with the RequiredConfig field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AvailableHelmRepositoryResponse) GetRequiredConfigOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.RequiredConfig) {
		return map[string]interface{}{}, false
	}
	return o.RequiredConfig, true
}

// HasRequiredConfig returns a boolean if a field has been set.
func (o *AvailableHelmRepositoryResponse) HasRequiredConfig() bool {
	if o != nil && !IsNil(o.RequiredConfig) {
		return true
	}

	return false
}

// SetRequiredConfig gets a reference to the given map[string]interface{} and assigns it to the RequiredConfig field.
func (o *AvailableHelmRepositoryResponse) SetRequiredConfig(v map[string]interface{}) {
	o.RequiredConfig = v
}

// GetIsMandatory returns the IsMandatory field value if set, zero value otherwise.
func (o *AvailableHelmRepositoryResponse) GetIsMandatory() bool {
	if o == nil || IsNil(o.IsMandatory) {
		var ret bool
		return ret
	}
	return *o.IsMandatory
}

// GetIsMandatoryOk returns a tuple with the IsMandatory field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AvailableHelmRepositoryResponse) GetIsMandatoryOk() (*bool, bool) {
	if o == nil || IsNil(o.IsMandatory) {
		return nil, false
	}
	return o.IsMandatory, true
}

// HasIsMandatory returns a boolean if a field has been set.
func (o *AvailableHelmRepositoryResponse) HasIsMandatory() bool {
	if o != nil && !IsNil(o.IsMandatory) {
		return true
	}

	return false
}

// SetIsMandatory gets a reference to the given bool and assigns it to the IsMandatory field.
func (o *AvailableHelmRepositoryResponse) SetIsMandatory(v bool) {
	o.IsMandatory = &v
}

func (o AvailableHelmRepositoryResponse) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AvailableHelmRepositoryResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Kind) {
		toSerialize["kind"] = o.Kind
	}
	if !IsNil(o.RequiredConfig) {
		toSerialize["required_config"] = o.RequiredConfig
	}
	if !IsNil(o.IsMandatory) {
		toSerialize["is_mandatory"] = o.IsMandatory
	}
	return toSerialize, nil
}

type NullableAvailableHelmRepositoryResponse struct {
	value *AvailableHelmRepositoryResponse
	isSet bool
}

func (v NullableAvailableHelmRepositoryResponse) Get() *AvailableHelmRepositoryResponse {
	return v.value
}

func (v *NullableAvailableHelmRepositoryResponse) Set(val *AvailableHelmRepositoryResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableAvailableHelmRepositoryResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableAvailableHelmRepositoryResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAvailableHelmRepositoryResponse(val *AvailableHelmRepositoryResponse) *NullableAvailableHelmRepositoryResponse {
	return &NullableAvailableHelmRepositoryResponse{value: val, isSet: true}
}

func (v NullableAvailableHelmRepositoryResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAvailableHelmRepositoryResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
