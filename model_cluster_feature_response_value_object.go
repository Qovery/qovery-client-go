/*
Qovery API

- Qovery is the fastest way to deploy your full-stack apps on any Cloud provider. - ℹ️ The API is stable and still in development.

API version: 1.0.3
Contact: support+api+documentation@qovery.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package qovery

import (
	"encoding/json"
	"fmt"
)

// ClusterFeatureResponseValueObject - struct for ClusterFeatureResponseValueObject
type ClusterFeatureResponseValueObject struct {
	ClusterFeatureAwsExistingVpcResponse      *ClusterFeatureAwsExistingVpcResponse
	ClusterFeatureBooleanResponse             *ClusterFeatureBooleanResponse
	ClusterFeatureGcpExistingVpcResponse      *ClusterFeatureGcpExistingVpcResponse
	ClusterFeatureKarpenterParametersResponse *ClusterFeatureKarpenterParametersResponse
	ClusterFeatureStringResponse              *ClusterFeatureStringResponse
}

// ClusterFeatureAwsExistingVpcResponseAsClusterFeatureResponseValueObject is a convenience function that returns ClusterFeatureAwsExistingVpcResponse wrapped in ClusterFeatureResponseValueObject
func ClusterFeatureAwsExistingVpcResponseAsClusterFeatureResponseValueObject(v *ClusterFeatureAwsExistingVpcResponse) ClusterFeatureResponseValueObject {
	return ClusterFeatureResponseValueObject{
		ClusterFeatureAwsExistingVpcResponse: v,
	}
}

// ClusterFeatureBooleanResponseAsClusterFeatureResponseValueObject is a convenience function that returns ClusterFeatureBooleanResponse wrapped in ClusterFeatureResponseValueObject
func ClusterFeatureBooleanResponseAsClusterFeatureResponseValueObject(v *ClusterFeatureBooleanResponse) ClusterFeatureResponseValueObject {
	return ClusterFeatureResponseValueObject{
		ClusterFeatureBooleanResponse: v,
	}
}

// ClusterFeatureGcpExistingVpcResponseAsClusterFeatureResponseValueObject is a convenience function that returns ClusterFeatureGcpExistingVpcResponse wrapped in ClusterFeatureResponseValueObject
func ClusterFeatureGcpExistingVpcResponseAsClusterFeatureResponseValueObject(v *ClusterFeatureGcpExistingVpcResponse) ClusterFeatureResponseValueObject {
	return ClusterFeatureResponseValueObject{
		ClusterFeatureGcpExistingVpcResponse: v,
	}
}

// ClusterFeatureKarpenterParametersResponseAsClusterFeatureResponseValueObject is a convenience function that returns ClusterFeatureKarpenterParametersResponse wrapped in ClusterFeatureResponseValueObject
func ClusterFeatureKarpenterParametersResponseAsClusterFeatureResponseValueObject(v *ClusterFeatureKarpenterParametersResponse) ClusterFeatureResponseValueObject {
	return ClusterFeatureResponseValueObject{
		ClusterFeatureKarpenterParametersResponse: v,
	}
}

// ClusterFeatureStringResponseAsClusterFeatureResponseValueObject is a convenience function that returns ClusterFeatureStringResponse wrapped in ClusterFeatureResponseValueObject
func ClusterFeatureStringResponseAsClusterFeatureResponseValueObject(v *ClusterFeatureStringResponse) ClusterFeatureResponseValueObject {
	return ClusterFeatureResponseValueObject{
		ClusterFeatureStringResponse: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *ClusterFeatureResponseValueObject) UnmarshalJSON(data []byte) error {
	var err error
	// this object is nullable so check if the payload is null or empty string
	if string(data) == "" || string(data) == "{}" {
		return nil
	}

	// use discriminator value to speed up the lookup
	var jsonDict map[string]interface{}
	err = newStrictDecoder(data).Decode(&jsonDict)
	if err != nil {
		return fmt.Errorf("failed to unmarshal JSON into map for the discriminator lookup")
	}

	// check if the discriminator value is 'AWS_USER_PROVIDED_NETWORK'
	if jsonDict["type"] == "AWS_USER_PROVIDED_NETWORK" {
		// try to unmarshal JSON data into ClusterFeatureAwsExistingVpcResponse
		err = json.Unmarshal(data, &dst.ClusterFeatureAwsExistingVpcResponse)
		if err == nil {
			return nil // data stored in dst.ClusterFeatureAwsExistingVpcResponse, return on the first match
		} else {
			dst.ClusterFeatureAwsExistingVpcResponse = nil
			return fmt.Errorf("failed to unmarshal ClusterFeatureResponseValueObject as ClusterFeatureAwsExistingVpcResponse: %s", err.Error())
		}
	}

	// check if the discriminator value is 'BOOLEAN'
	if jsonDict["type"] == "BOOLEAN" {
		// try to unmarshal JSON data into ClusterFeatureBooleanResponse
		err = json.Unmarshal(data, &dst.ClusterFeatureBooleanResponse)
		if err == nil {
			return nil // data stored in dst.ClusterFeatureBooleanResponse, return on the first match
		} else {
			dst.ClusterFeatureBooleanResponse = nil
			return fmt.Errorf("failed to unmarshal ClusterFeatureResponseValueObject as ClusterFeatureBooleanResponse: %s", err.Error())
		}
	}

	// check if the discriminator value is 'GCP_USER_PROVIDED_NETWORK'
	if jsonDict["type"] == "GCP_USER_PROVIDED_NETWORK" {
		// try to unmarshal JSON data into ClusterFeatureGcpExistingVpcResponse
		err = json.Unmarshal(data, &dst.ClusterFeatureGcpExistingVpcResponse)
		if err == nil {
			return nil // data stored in dst.ClusterFeatureGcpExistingVpcResponse, return on the first match
		} else {
			dst.ClusterFeatureGcpExistingVpcResponse = nil
			return fmt.Errorf("failed to unmarshal ClusterFeatureResponseValueObject as ClusterFeatureGcpExistingVpcResponse: %s", err.Error())
		}
	}

	// check if the discriminator value is 'KARPENTER'
	if jsonDict["type"] == "KARPENTER" {
		// try to unmarshal JSON data into ClusterFeatureKarpenterParametersResponse
		err = json.Unmarshal(data, &dst.ClusterFeatureKarpenterParametersResponse)
		if err == nil {
			return nil // data stored in dst.ClusterFeatureKarpenterParametersResponse, return on the first match
		} else {
			dst.ClusterFeatureKarpenterParametersResponse = nil
			return fmt.Errorf("failed to unmarshal ClusterFeatureResponseValueObject as ClusterFeatureKarpenterParametersResponse: %s", err.Error())
		}
	}

	// check if the discriminator value is 'STRING'
	if jsonDict["type"] == "STRING" {
		// try to unmarshal JSON data into ClusterFeatureStringResponse
		err = json.Unmarshal(data, &dst.ClusterFeatureStringResponse)
		if err == nil {
			return nil // data stored in dst.ClusterFeatureStringResponse, return on the first match
		} else {
			dst.ClusterFeatureStringResponse = nil
			return fmt.Errorf("failed to unmarshal ClusterFeatureResponseValueObject as ClusterFeatureStringResponse: %s", err.Error())
		}
	}

	// check if the discriminator value is 'ClusterFeatureAwsExistingVpcResponse'
	if jsonDict["type"] == "ClusterFeatureAwsExistingVpcResponse" {
		// try to unmarshal JSON data into ClusterFeatureAwsExistingVpcResponse
		err = json.Unmarshal(data, &dst.ClusterFeatureAwsExistingVpcResponse)
		if err == nil {
			return nil // data stored in dst.ClusterFeatureAwsExistingVpcResponse, return on the first match
		} else {
			dst.ClusterFeatureAwsExistingVpcResponse = nil
			return fmt.Errorf("failed to unmarshal ClusterFeatureResponseValueObject as ClusterFeatureAwsExistingVpcResponse: %s", err.Error())
		}
	}

	// check if the discriminator value is 'ClusterFeatureBooleanResponse'
	if jsonDict["type"] == "ClusterFeatureBooleanResponse" {
		// try to unmarshal JSON data into ClusterFeatureBooleanResponse
		err = json.Unmarshal(data, &dst.ClusterFeatureBooleanResponse)
		if err == nil {
			return nil // data stored in dst.ClusterFeatureBooleanResponse, return on the first match
		} else {
			dst.ClusterFeatureBooleanResponse = nil
			return fmt.Errorf("failed to unmarshal ClusterFeatureResponseValueObject as ClusterFeatureBooleanResponse: %s", err.Error())
		}
	}

	// check if the discriminator value is 'ClusterFeatureGcpExistingVpcResponse'
	if jsonDict["type"] == "ClusterFeatureGcpExistingVpcResponse" {
		// try to unmarshal JSON data into ClusterFeatureGcpExistingVpcResponse
		err = json.Unmarshal(data, &dst.ClusterFeatureGcpExistingVpcResponse)
		if err == nil {
			return nil // data stored in dst.ClusterFeatureGcpExistingVpcResponse, return on the first match
		} else {
			dst.ClusterFeatureGcpExistingVpcResponse = nil
			return fmt.Errorf("failed to unmarshal ClusterFeatureResponseValueObject as ClusterFeatureGcpExistingVpcResponse: %s", err.Error())
		}
	}

	// check if the discriminator value is 'ClusterFeatureKarpenterParametersResponse'
	if jsonDict["type"] == "ClusterFeatureKarpenterParametersResponse" {
		// try to unmarshal JSON data into ClusterFeatureKarpenterParametersResponse
		err = json.Unmarshal(data, &dst.ClusterFeatureKarpenterParametersResponse)
		if err == nil {
			return nil // data stored in dst.ClusterFeatureKarpenterParametersResponse, return on the first match
		} else {
			dst.ClusterFeatureKarpenterParametersResponse = nil
			return fmt.Errorf("failed to unmarshal ClusterFeatureResponseValueObject as ClusterFeatureKarpenterParametersResponse: %s", err.Error())
		}
	}

	// check if the discriminator value is 'ClusterFeatureStringResponse'
	if jsonDict["type"] == "ClusterFeatureStringResponse" {
		// try to unmarshal JSON data into ClusterFeatureStringResponse
		err = json.Unmarshal(data, &dst.ClusterFeatureStringResponse)
		if err == nil {
			return nil // data stored in dst.ClusterFeatureStringResponse, return on the first match
		} else {
			dst.ClusterFeatureStringResponse = nil
			return fmt.Errorf("failed to unmarshal ClusterFeatureResponseValueObject as ClusterFeatureStringResponse: %s", err.Error())
		}
	}

	return nil
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src ClusterFeatureResponseValueObject) MarshalJSON() ([]byte, error) {
	if src.ClusterFeatureAwsExistingVpcResponse != nil {
		return json.Marshal(&src.ClusterFeatureAwsExistingVpcResponse)
	}

	if src.ClusterFeatureBooleanResponse != nil {
		return json.Marshal(&src.ClusterFeatureBooleanResponse)
	}

	if src.ClusterFeatureGcpExistingVpcResponse != nil {
		return json.Marshal(&src.ClusterFeatureGcpExistingVpcResponse)
	}

	if src.ClusterFeatureKarpenterParametersResponse != nil {
		return json.Marshal(&src.ClusterFeatureKarpenterParametersResponse)
	}

	if src.ClusterFeatureStringResponse != nil {
		return json.Marshal(&src.ClusterFeatureStringResponse)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *ClusterFeatureResponseValueObject) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.ClusterFeatureAwsExistingVpcResponse != nil {
		return obj.ClusterFeatureAwsExistingVpcResponse
	}

	if obj.ClusterFeatureBooleanResponse != nil {
		return obj.ClusterFeatureBooleanResponse
	}

	if obj.ClusterFeatureGcpExistingVpcResponse != nil {
		return obj.ClusterFeatureGcpExistingVpcResponse
	}

	if obj.ClusterFeatureKarpenterParametersResponse != nil {
		return obj.ClusterFeatureKarpenterParametersResponse
	}

	if obj.ClusterFeatureStringResponse != nil {
		return obj.ClusterFeatureStringResponse
	}

	// all schemas are nil
	return nil
}

type NullableClusterFeatureResponseValueObject struct {
	value *ClusterFeatureResponseValueObject
	isSet bool
}

func (v NullableClusterFeatureResponseValueObject) Get() *ClusterFeatureResponseValueObject {
	return v.value
}

func (v *NullableClusterFeatureResponseValueObject) Set(val *ClusterFeatureResponseValueObject) {
	v.value = val
	v.isSet = true
}

func (v NullableClusterFeatureResponseValueObject) IsSet() bool {
	return v.isSet
}

func (v *NullableClusterFeatureResponseValueObject) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableClusterFeatureResponseValueObject(val *ClusterFeatureResponseValueObject) *NullableClusterFeatureResponseValueObject {
	return &NullableClusterFeatureResponseValueObject{value: val, isSet: true}
}

func (v NullableClusterFeatureResponseValueObject) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableClusterFeatureResponseValueObject) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
