/*
Qovery API

- Qovery is the fastest way to deploy your full-stack apps on any Cloud provider. - ℹ️ The API is stable and still in development.

API version: 1.0.4
Contact: support+api+documentation@qovery.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package qovery

import (
	"encoding/json"
	"fmt"
)

// checks if the Link type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Link{}

// Link struct for Link
type Link struct {
	// ID of the associated service
	ServiceId   string          `json:"service_id"`
	ServiceType ServiceTypeEnum `json:"service_type"`
	// URL to access the service
	Url string `json:"url"`
	// The port from which the service is reachable from within the cluster
	InternalPort int32 `json:"internal_port"`
	// The port from which the service is reachable from externally (i.e: 443 for HTTPS)
	ExternalPort int32 `json:"external_port"`
	// True if the domain is managed by Qovery, false if it belongs to the user
	IsQoveryDomain bool `json:"is_qovery_domain"`
	// Indicate if the link is using the root of the domain and not one derivated from port i.e: p8080.zxxxx.jvm.worl      => is_default = false, is_qovery = true zxxxx.jvm.world           => is_default = true, is_qovery = true p8080-my-super-domain.com => is_default = false, is_qovery = false my-super-domain.com       => is_default = true, is_qovery = false
	IsDefault            bool `json:"is_default"`
	AdditionalProperties map[string]interface{}
}

type _Link Link

// NewLink instantiates a new Link object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewLink(serviceId string, serviceType ServiceTypeEnum, url string, internalPort int32, externalPort int32, isQoveryDomain bool, isDefault bool) *Link {
	this := Link{}
	this.ServiceId = serviceId
	this.ServiceType = serviceType
	this.Url = url
	this.InternalPort = internalPort
	this.ExternalPort = externalPort
	this.IsQoveryDomain = isQoveryDomain
	this.IsDefault = isDefault
	return &this
}

// NewLinkWithDefaults instantiates a new Link object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewLinkWithDefaults() *Link {
	this := Link{}
	return &this
}

// GetServiceId returns the ServiceId field value
func (o *Link) GetServiceId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ServiceId
}

// GetServiceIdOk returns a tuple with the ServiceId field value
// and a boolean to check if the value has been set.
func (o *Link) GetServiceIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ServiceId, true
}

// SetServiceId sets field value
func (o *Link) SetServiceId(v string) {
	o.ServiceId = v
}

// GetServiceType returns the ServiceType field value
func (o *Link) GetServiceType() ServiceTypeEnum {
	if o == nil {
		var ret ServiceTypeEnum
		return ret
	}

	return o.ServiceType
}

// GetServiceTypeOk returns a tuple with the ServiceType field value
// and a boolean to check if the value has been set.
func (o *Link) GetServiceTypeOk() (*ServiceTypeEnum, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ServiceType, true
}

// SetServiceType sets field value
func (o *Link) SetServiceType(v ServiceTypeEnum) {
	o.ServiceType = v
}

// GetUrl returns the Url field value
func (o *Link) GetUrl() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Url
}

// GetUrlOk returns a tuple with the Url field value
// and a boolean to check if the value has been set.
func (o *Link) GetUrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Url, true
}

// SetUrl sets field value
func (o *Link) SetUrl(v string) {
	o.Url = v
}

// GetInternalPort returns the InternalPort field value
func (o *Link) GetInternalPort() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.InternalPort
}

// GetInternalPortOk returns a tuple with the InternalPort field value
// and a boolean to check if the value has been set.
func (o *Link) GetInternalPortOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.InternalPort, true
}

// SetInternalPort sets field value
func (o *Link) SetInternalPort(v int32) {
	o.InternalPort = v
}

// GetExternalPort returns the ExternalPort field value
func (o *Link) GetExternalPort() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.ExternalPort
}

// GetExternalPortOk returns a tuple with the ExternalPort field value
// and a boolean to check if the value has been set.
func (o *Link) GetExternalPortOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ExternalPort, true
}

// SetExternalPort sets field value
func (o *Link) SetExternalPort(v int32) {
	o.ExternalPort = v
}

// GetIsQoveryDomain returns the IsQoveryDomain field value
func (o *Link) GetIsQoveryDomain() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.IsQoveryDomain
}

// GetIsQoveryDomainOk returns a tuple with the IsQoveryDomain field value
// and a boolean to check if the value has been set.
func (o *Link) GetIsQoveryDomainOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.IsQoveryDomain, true
}

// SetIsQoveryDomain sets field value
func (o *Link) SetIsQoveryDomain(v bool) {
	o.IsQoveryDomain = v
}

// GetIsDefault returns the IsDefault field value
func (o *Link) GetIsDefault() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.IsDefault
}

// GetIsDefaultOk returns a tuple with the IsDefault field value
// and a boolean to check if the value has been set.
func (o *Link) GetIsDefaultOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.IsDefault, true
}

// SetIsDefault sets field value
func (o *Link) SetIsDefault(v bool) {
	o.IsDefault = v
}

func (o Link) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Link) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["service_id"] = o.ServiceId
	toSerialize["service_type"] = o.ServiceType
	toSerialize["url"] = o.Url
	toSerialize["internal_port"] = o.InternalPort
	toSerialize["external_port"] = o.ExternalPort
	toSerialize["is_qovery_domain"] = o.IsQoveryDomain
	toSerialize["is_default"] = o.IsDefault

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *Link) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"service_id",
		"service_type",
		"url",
		"internal_port",
		"external_port",
		"is_qovery_domain",
		"is_default",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varLink := _Link{}

	err = json.Unmarshal(data, &varLink)

	if err != nil {
		return err
	}

	*o = Link(varLink)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "service_id")
		delete(additionalProperties, "service_type")
		delete(additionalProperties, "url")
		delete(additionalProperties, "internal_port")
		delete(additionalProperties, "external_port")
		delete(additionalProperties, "is_qovery_domain")
		delete(additionalProperties, "is_default")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableLink struct {
	value *Link
	isSet bool
}

func (v NullableLink) Get() *Link {
	return v.value
}

func (v *NullableLink) Set(val *Link) {
	v.value = val
	v.isSet = true
}

func (v NullableLink) IsSet() bool {
	return v.isSet
}

func (v *NullableLink) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLink(val *Link) *NullableLink {
	return &NullableLink{value: val, isSet: true}
}

func (v NullableLink) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLink) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
