/*
Qovery API

- Qovery is the fastest way to deploy your full-stack apps on any Cloud provider. - ℹ️ The API is stable and still in development.

API version: 1.0.3
Contact: support+api+documentation@qovery.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package qovery

import (
	"encoding/json"
)

// ContainerStorage struct for ContainerStorage
type ContainerStorage struct {
	Storage []ContainerStorageStorage `json:"storage,omitempty"`
}

// NewContainerStorage instantiates a new ContainerStorage object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewContainerStorage() *ContainerStorage {
	this := ContainerStorage{}
	return &this
}

// NewContainerStorageWithDefaults instantiates a new ContainerStorage object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewContainerStorageWithDefaults() *ContainerStorage {
	this := ContainerStorage{}
	return &this
}

// GetStorage returns the Storage field value if set, zero value otherwise.
func (o *ContainerStorage) GetStorage() []ContainerStorageStorage {
	if o == nil || o.Storage == nil {
		var ret []ContainerStorageStorage
		return ret
	}
	return o.Storage
}

// GetStorageOk returns a tuple with the Storage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ContainerStorage) GetStorageOk() ([]ContainerStorageStorage, bool) {
	if o == nil || o.Storage == nil {
		return nil, false
	}
	return o.Storage, true
}

// HasStorage returns a boolean if a field has been set.
func (o *ContainerStorage) HasStorage() bool {
	if o != nil && o.Storage != nil {
		return true
	}

	return false
}

// SetStorage gets a reference to the given []ContainerStorageStorage and assigns it to the Storage field.
func (o *ContainerStorage) SetStorage(v []ContainerStorageStorage) {
	o.Storage = v
}

func (o ContainerStorage) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Storage != nil {
		toSerialize["storage"] = o.Storage
	}
	return json.Marshal(toSerialize)
}

type NullableContainerStorage struct {
	value *ContainerStorage
	isSet bool
}

func (v NullableContainerStorage) Get() *ContainerStorage {
	return v.value
}

func (v *NullableContainerStorage) Set(val *ContainerStorage) {
	v.value = val
	v.isSet = true
}

func (v NullableContainerStorage) IsSet() bool {
	return v.isSet
}

func (v *NullableContainerStorage) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableContainerStorage(val *ContainerStorage) *NullableContainerStorage {
	return &NullableContainerStorage{value: val, isSet: true}
}

func (v NullableContainerStorage) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableContainerStorage) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
