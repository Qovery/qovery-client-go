/*
Qovery API

- Qovery is the fastest way to deploy your full-stack apps on any Cloud provider. - ℹ️ The API is stable and still in development.

API version: 1.0.4
Contact: support+api+documentation@qovery.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package qovery

import (
	"encoding/json"
	"fmt"
)

// checks if the AlertTarget type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AlertTarget{}

// AlertTarget struct for AlertTarget
type AlertTarget struct {
	TargetType           AlertTargetType `json:"target_type"`
	TargetId             string          `json:"target_id"`
	AdditionalProperties map[string]interface{}
}

type _AlertTarget AlertTarget

// NewAlertTarget instantiates a new AlertTarget object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAlertTarget(targetType AlertTargetType, targetId string) *AlertTarget {
	this := AlertTarget{}
	this.TargetType = targetType
	this.TargetId = targetId
	return &this
}

// NewAlertTargetWithDefaults instantiates a new AlertTarget object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAlertTargetWithDefaults() *AlertTarget {
	this := AlertTarget{}
	return &this
}

// GetTargetType returns the TargetType field value
func (o *AlertTarget) GetTargetType() AlertTargetType {
	if o == nil {
		var ret AlertTargetType
		return ret
	}

	return o.TargetType
}

// GetTargetTypeOk returns a tuple with the TargetType field value
// and a boolean to check if the value has been set.
func (o *AlertTarget) GetTargetTypeOk() (*AlertTargetType, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TargetType, true
}

// SetTargetType sets field value
func (o *AlertTarget) SetTargetType(v AlertTargetType) {
	o.TargetType = v
}

// GetTargetId returns the TargetId field value
func (o *AlertTarget) GetTargetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.TargetId
}

// GetTargetIdOk returns a tuple with the TargetId field value
// and a boolean to check if the value has been set.
func (o *AlertTarget) GetTargetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TargetId, true
}

// SetTargetId sets field value
func (o *AlertTarget) SetTargetId(v string) {
	o.TargetId = v
}

func (o AlertTarget) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AlertTarget) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["target_type"] = o.TargetType
	toSerialize["target_id"] = o.TargetId

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *AlertTarget) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"target_type",
		"target_id",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varAlertTarget := _AlertTarget{}

	err = json.Unmarshal(data, &varAlertTarget)

	if err != nil {
		return err
	}

	*o = AlertTarget(varAlertTarget)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "target_type")
		delete(additionalProperties, "target_id")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableAlertTarget struct {
	value *AlertTarget
	isSet bool
}

func (v NullableAlertTarget) Get() *AlertTarget {
	return v.value
}

func (v *NullableAlertTarget) Set(val *AlertTarget) {
	v.value = val
	v.isSet = true
}

func (v NullableAlertTarget) IsSet() bool {
	return v.isSet
}

func (v *NullableAlertTarget) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAlertTarget(val *AlertTarget) *NullableAlertTarget {
	return &NullableAlertTarget{value: val, isSet: true}
}

func (v NullableAlertTarget) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAlertTarget) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
