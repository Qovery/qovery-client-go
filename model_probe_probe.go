/*
Qovery API

- Qovery is the fastest way to deploy your full-stack apps on any Cloud provider. - ℹ️ The API is stable and still in development.

API version: 1.0.3
Contact: support+api+documentation@qovery.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package qovery

import (
	"encoding/json"
)

// ProbeProbe struct for ProbeProbe
type ProbeProbe struct {
	None map[string]interface{} `json:"none,omitempty"`
	Tcp  NullableProbeProbeTcp  `json:"tcp,omitempty"`
	Http NullableProbeProbeHttp `json:"http,omitempty"`
	Exec NullableProbeProbeExec `json:"exec,omitempty"`
	Grpc NullableProbeProbeGrpc `json:"grpc,omitempty"`
}

// NewProbeProbe instantiates a new ProbeProbe object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewProbeProbe() *ProbeProbe {
	this := ProbeProbe{}
	return &this
}

// NewProbeProbeWithDefaults instantiates a new ProbeProbe object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewProbeProbeWithDefaults() *ProbeProbe {
	this := ProbeProbe{}
	return &this
}

// GetNone returns the None field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ProbeProbe) GetNone() map[string]interface{} {
	if o == nil {
		var ret map[string]interface{}
		return ret
	}
	return o.None
}

// GetNoneOk returns a tuple with the None field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ProbeProbe) GetNoneOk() (map[string]interface{}, bool) {
	if o == nil || o.None == nil {
		return nil, false
	}
	return o.None, true
}

// HasNone returns a boolean if a field has been set.
func (o *ProbeProbe) HasNone() bool {
	if o != nil && o.None != nil {
		return true
	}

	return false
}

// SetNone gets a reference to the given map[string]interface{} and assigns it to the None field.
func (o *ProbeProbe) SetNone(v map[string]interface{}) {
	o.None = v
}

// GetTcp returns the Tcp field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ProbeProbe) GetTcp() ProbeProbeTcp {
	if o == nil || o.Tcp.Get() == nil {
		var ret ProbeProbeTcp
		return ret
	}
	return *o.Tcp.Get()
}

// GetTcpOk returns a tuple with the Tcp field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ProbeProbe) GetTcpOk() (*ProbeProbeTcp, bool) {
	if o == nil {
		return nil, false
	}
	return o.Tcp.Get(), o.Tcp.IsSet()
}

// HasTcp returns a boolean if a field has been set.
func (o *ProbeProbe) HasTcp() bool {
	if o != nil && o.Tcp.IsSet() {
		return true
	}

	return false
}

// SetTcp gets a reference to the given NullableProbeProbeTcp and assigns it to the Tcp field.
func (o *ProbeProbe) SetTcp(v ProbeProbeTcp) {
	o.Tcp.Set(&v)
}

// SetTcpNil sets the value for Tcp to be an explicit nil
func (o *ProbeProbe) SetTcpNil() {
	o.Tcp.Set(nil)
}

// UnsetTcp ensures that no value is present for Tcp, not even an explicit nil
func (o *ProbeProbe) UnsetTcp() {
	o.Tcp.Unset()
}

// GetHttp returns the Http field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ProbeProbe) GetHttp() ProbeProbeHttp {
	if o == nil || o.Http.Get() == nil {
		var ret ProbeProbeHttp
		return ret
	}
	return *o.Http.Get()
}

// GetHttpOk returns a tuple with the Http field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ProbeProbe) GetHttpOk() (*ProbeProbeHttp, bool) {
	if o == nil {
		return nil, false
	}
	return o.Http.Get(), o.Http.IsSet()
}

// HasHttp returns a boolean if a field has been set.
func (o *ProbeProbe) HasHttp() bool {
	if o != nil && o.Http.IsSet() {
		return true
	}

	return false
}

// SetHttp gets a reference to the given NullableProbeProbeHttp and assigns it to the Http field.
func (o *ProbeProbe) SetHttp(v ProbeProbeHttp) {
	o.Http.Set(&v)
}

// SetHttpNil sets the value for Http to be an explicit nil
func (o *ProbeProbe) SetHttpNil() {
	o.Http.Set(nil)
}

// UnsetHttp ensures that no value is present for Http, not even an explicit nil
func (o *ProbeProbe) UnsetHttp() {
	o.Http.Unset()
}

// GetExec returns the Exec field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ProbeProbe) GetExec() ProbeProbeExec {
	if o == nil || o.Exec.Get() == nil {
		var ret ProbeProbeExec
		return ret
	}
	return *o.Exec.Get()
}

// GetExecOk returns a tuple with the Exec field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ProbeProbe) GetExecOk() (*ProbeProbeExec, bool) {
	if o == nil {
		return nil, false
	}
	return o.Exec.Get(), o.Exec.IsSet()
}

// HasExec returns a boolean if a field has been set.
func (o *ProbeProbe) HasExec() bool {
	if o != nil && o.Exec.IsSet() {
		return true
	}

	return false
}

// SetExec gets a reference to the given NullableProbeProbeExec and assigns it to the Exec field.
func (o *ProbeProbe) SetExec(v ProbeProbeExec) {
	o.Exec.Set(&v)
}

// SetExecNil sets the value for Exec to be an explicit nil
func (o *ProbeProbe) SetExecNil() {
	o.Exec.Set(nil)
}

// UnsetExec ensures that no value is present for Exec, not even an explicit nil
func (o *ProbeProbe) UnsetExec() {
	o.Exec.Unset()
}

// GetGrpc returns the Grpc field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ProbeProbe) GetGrpc() ProbeProbeGrpc {
	if o == nil || o.Grpc.Get() == nil {
		var ret ProbeProbeGrpc
		return ret
	}
	return *o.Grpc.Get()
}

// GetGrpcOk returns a tuple with the Grpc field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ProbeProbe) GetGrpcOk() (*ProbeProbeGrpc, bool) {
	if o == nil {
		return nil, false
	}
	return o.Grpc.Get(), o.Grpc.IsSet()
}

// HasGrpc returns a boolean if a field has been set.
func (o *ProbeProbe) HasGrpc() bool {
	if o != nil && o.Grpc.IsSet() {
		return true
	}

	return false
}

// SetGrpc gets a reference to the given NullableProbeProbeGrpc and assigns it to the Grpc field.
func (o *ProbeProbe) SetGrpc(v ProbeProbeGrpc) {
	o.Grpc.Set(&v)
}

// SetGrpcNil sets the value for Grpc to be an explicit nil
func (o *ProbeProbe) SetGrpcNil() {
	o.Grpc.Set(nil)
}

// UnsetGrpc ensures that no value is present for Grpc, not even an explicit nil
func (o *ProbeProbe) UnsetGrpc() {
	o.Grpc.Unset()
}

func (o ProbeProbe) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.None != nil {
		toSerialize["none"] = o.None
	}
	if o.Tcp.IsSet() {
		toSerialize["tcp"] = o.Tcp.Get()
	}
	if o.Http.IsSet() {
		toSerialize["http"] = o.Http.Get()
	}
	if o.Exec.IsSet() {
		toSerialize["exec"] = o.Exec.Get()
	}
	if o.Grpc.IsSet() {
		toSerialize["grpc"] = o.Grpc.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableProbeProbe struct {
	value *ProbeProbe
	isSet bool
}

func (v NullableProbeProbe) Get() *ProbeProbe {
	return v.value
}

func (v *NullableProbeProbe) Set(val *ProbeProbe) {
	v.value = val
	v.isSet = true
}

func (v NullableProbeProbe) IsSet() bool {
	return v.isSet
}

func (v *NullableProbeProbe) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableProbeProbe(val *ProbeProbe) *NullableProbeProbe {
	return &NullableProbeProbe{value: val, isSet: true}
}

func (v NullableProbeProbe) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableProbeProbe) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
