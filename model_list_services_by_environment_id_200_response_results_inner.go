/*
Qovery API

- Qovery is the fastest way to deploy your full-stack apps on any Cloud provider. - ℹ️ The API is stable and still in development.

API version: 1.0.3
Contact: support+api+documentation@qovery.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package qovery

import (
	"encoding/json"
	"fmt"
)

// ListServicesByEnvironmentId200ResponseResultsInner - struct for ListServicesByEnvironmentId200ResponseResultsInner
type ListServicesByEnvironmentId200ResponseResultsInner struct {
	Application       *Application
	ContainerResponse *ContainerResponse
	Database          *Database
	HelmResponse      *HelmResponse
	JobResponse       *JobResponse
	TerraformResponse *TerraformResponse
}

// ApplicationAsListServicesByEnvironmentId200ResponseResultsInner is a convenience function that returns Application wrapped in ListServicesByEnvironmentId200ResponseResultsInner
func ApplicationAsListServicesByEnvironmentId200ResponseResultsInner(v *Application) ListServicesByEnvironmentId200ResponseResultsInner {
	return ListServicesByEnvironmentId200ResponseResultsInner{
		Application: v,
	}
}

// ContainerResponseAsListServicesByEnvironmentId200ResponseResultsInner is a convenience function that returns ContainerResponse wrapped in ListServicesByEnvironmentId200ResponseResultsInner
func ContainerResponseAsListServicesByEnvironmentId200ResponseResultsInner(v *ContainerResponse) ListServicesByEnvironmentId200ResponseResultsInner {
	return ListServicesByEnvironmentId200ResponseResultsInner{
		ContainerResponse: v,
	}
}

// DatabaseAsListServicesByEnvironmentId200ResponseResultsInner is a convenience function that returns Database wrapped in ListServicesByEnvironmentId200ResponseResultsInner
func DatabaseAsListServicesByEnvironmentId200ResponseResultsInner(v *Database) ListServicesByEnvironmentId200ResponseResultsInner {
	return ListServicesByEnvironmentId200ResponseResultsInner{
		Database: v,
	}
}

// HelmResponseAsListServicesByEnvironmentId200ResponseResultsInner is a convenience function that returns HelmResponse wrapped in ListServicesByEnvironmentId200ResponseResultsInner
func HelmResponseAsListServicesByEnvironmentId200ResponseResultsInner(v *HelmResponse) ListServicesByEnvironmentId200ResponseResultsInner {
	return ListServicesByEnvironmentId200ResponseResultsInner{
		HelmResponse: v,
	}
}

// JobResponseAsListServicesByEnvironmentId200ResponseResultsInner is a convenience function that returns JobResponse wrapped in ListServicesByEnvironmentId200ResponseResultsInner
func JobResponseAsListServicesByEnvironmentId200ResponseResultsInner(v *JobResponse) ListServicesByEnvironmentId200ResponseResultsInner {
	return ListServicesByEnvironmentId200ResponseResultsInner{
		JobResponse: v,
	}
}

// TerraformResponseAsListServicesByEnvironmentId200ResponseResultsInner is a convenience function that returns TerraformResponse wrapped in ListServicesByEnvironmentId200ResponseResultsInner
func TerraformResponseAsListServicesByEnvironmentId200ResponseResultsInner(v *TerraformResponse) ListServicesByEnvironmentId200ResponseResultsInner {
	return ListServicesByEnvironmentId200ResponseResultsInner{
		TerraformResponse: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *ListServicesByEnvironmentId200ResponseResultsInner) UnmarshalJSON(data []byte) error {
	var err error
	// use discriminator value to speed up the lookup
	var jsonDict map[string]interface{}
	err = newStrictDecoder(data).Decode(&jsonDict)
	if err != nil {
		return fmt.Errorf("failed to unmarshal JSON into map for the discriminator lookup")
	}

	// check if the discriminator value is 'APPLICATION'
	if jsonDict["service_type"] == "APPLICATION" {
		// try to unmarshal JSON data into Application
		err = json.Unmarshal(data, &dst.Application)
		if err == nil {
			return nil // data stored in dst.Application, return on the first match
		} else {
			dst.Application = nil
			return fmt.Errorf("failed to unmarshal ListServicesByEnvironmentId200ResponseResultsInner as Application: %s", err.Error())
		}
	}

	// check if the discriminator value is 'CONTAINER'
	if jsonDict["service_type"] == "CONTAINER" {
		// try to unmarshal JSON data into ContainerResponse
		err = json.Unmarshal(data, &dst.ContainerResponse)
		if err == nil {
			return nil // data stored in dst.ContainerResponse, return on the first match
		} else {
			dst.ContainerResponse = nil
			return fmt.Errorf("failed to unmarshal ListServicesByEnvironmentId200ResponseResultsInner as ContainerResponse: %s", err.Error())
		}
	}

	// check if the discriminator value is 'DATABASE'
	if jsonDict["service_type"] == "DATABASE" {
		// try to unmarshal JSON data into Database
		err = json.Unmarshal(data, &dst.Database)
		if err == nil {
			return nil // data stored in dst.Database, return on the first match
		} else {
			dst.Database = nil
			return fmt.Errorf("failed to unmarshal ListServicesByEnvironmentId200ResponseResultsInner as Database: %s", err.Error())
		}
	}

	// check if the discriminator value is 'HELM'
	if jsonDict["service_type"] == "HELM" {
		// try to unmarshal JSON data into HelmResponse
		err = json.Unmarshal(data, &dst.HelmResponse)
		if err == nil {
			return nil // data stored in dst.HelmResponse, return on the first match
		} else {
			dst.HelmResponse = nil
			return fmt.Errorf("failed to unmarshal ListServicesByEnvironmentId200ResponseResultsInner as HelmResponse: %s", err.Error())
		}
	}

	// check if the discriminator value is 'JOB'
	if jsonDict["service_type"] == "JOB" {
		// try to unmarshal JSON data into JobResponse
		err = json.Unmarshal(data, &dst.JobResponse)
		if err == nil {
			return nil // data stored in dst.JobResponse, return on the first match
		} else {
			dst.JobResponse = nil
			return fmt.Errorf("failed to unmarshal ListServicesByEnvironmentId200ResponseResultsInner as JobResponse: %s", err.Error())
		}
	}

	// check if the discriminator value is 'TERRAFORM'
	if jsonDict["service_type"] == "TERRAFORM" {
		// try to unmarshal JSON data into TerraformResponse
		err = json.Unmarshal(data, &dst.TerraformResponse)
		if err == nil {
			return nil // data stored in dst.TerraformResponse, return on the first match
		} else {
			dst.TerraformResponse = nil
			return fmt.Errorf("failed to unmarshal ListServicesByEnvironmentId200ResponseResultsInner as TerraformResponse: %s", err.Error())
		}
	}

	// check if the discriminator value is 'Application'
	if jsonDict["service_type"] == "Application" {
		// try to unmarshal JSON data into Application
		err = json.Unmarshal(data, &dst.Application)
		if err == nil {
			return nil // data stored in dst.Application, return on the first match
		} else {
			dst.Application = nil
			return fmt.Errorf("failed to unmarshal ListServicesByEnvironmentId200ResponseResultsInner as Application: %s", err.Error())
		}
	}

	// check if the discriminator value is 'ContainerResponse'
	if jsonDict["service_type"] == "ContainerResponse" {
		// try to unmarshal JSON data into ContainerResponse
		err = json.Unmarshal(data, &dst.ContainerResponse)
		if err == nil {
			return nil // data stored in dst.ContainerResponse, return on the first match
		} else {
			dst.ContainerResponse = nil
			return fmt.Errorf("failed to unmarshal ListServicesByEnvironmentId200ResponseResultsInner as ContainerResponse: %s", err.Error())
		}
	}

	// check if the discriminator value is 'Database'
	if jsonDict["service_type"] == "Database" {
		// try to unmarshal JSON data into Database
		err = json.Unmarshal(data, &dst.Database)
		if err == nil {
			return nil // data stored in dst.Database, return on the first match
		} else {
			dst.Database = nil
			return fmt.Errorf("failed to unmarshal ListServicesByEnvironmentId200ResponseResultsInner as Database: %s", err.Error())
		}
	}

	// check if the discriminator value is 'HelmResponse'
	if jsonDict["service_type"] == "HelmResponse" {
		// try to unmarshal JSON data into HelmResponse
		err = json.Unmarshal(data, &dst.HelmResponse)
		if err == nil {
			return nil // data stored in dst.HelmResponse, return on the first match
		} else {
			dst.HelmResponse = nil
			return fmt.Errorf("failed to unmarshal ListServicesByEnvironmentId200ResponseResultsInner as HelmResponse: %s", err.Error())
		}
	}

	// check if the discriminator value is 'JobResponse'
	if jsonDict["service_type"] == "JobResponse" {
		// try to unmarshal JSON data into JobResponse
		err = json.Unmarshal(data, &dst.JobResponse)
		if err == nil {
			return nil // data stored in dst.JobResponse, return on the first match
		} else {
			dst.JobResponse = nil
			return fmt.Errorf("failed to unmarshal ListServicesByEnvironmentId200ResponseResultsInner as JobResponse: %s", err.Error())
		}
	}

	// check if the discriminator value is 'TerraformResponse'
	if jsonDict["service_type"] == "TerraformResponse" {
		// try to unmarshal JSON data into TerraformResponse
		err = json.Unmarshal(data, &dst.TerraformResponse)
		if err == nil {
			return nil // data stored in dst.TerraformResponse, return on the first match
		} else {
			dst.TerraformResponse = nil
			return fmt.Errorf("failed to unmarshal ListServicesByEnvironmentId200ResponseResultsInner as TerraformResponse: %s", err.Error())
		}
	}

	return nil
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src ListServicesByEnvironmentId200ResponseResultsInner) MarshalJSON() ([]byte, error) {
	if src.Application != nil {
		return json.Marshal(&src.Application)
	}

	if src.ContainerResponse != nil {
		return json.Marshal(&src.ContainerResponse)
	}

	if src.Database != nil {
		return json.Marshal(&src.Database)
	}

	if src.HelmResponse != nil {
		return json.Marshal(&src.HelmResponse)
	}

	if src.JobResponse != nil {
		return json.Marshal(&src.JobResponse)
	}

	if src.TerraformResponse != nil {
		return json.Marshal(&src.TerraformResponse)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *ListServicesByEnvironmentId200ResponseResultsInner) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.Application != nil {
		return obj.Application
	}

	if obj.ContainerResponse != nil {
		return obj.ContainerResponse
	}

	if obj.Database != nil {
		return obj.Database
	}

	if obj.HelmResponse != nil {
		return obj.HelmResponse
	}

	if obj.JobResponse != nil {
		return obj.JobResponse
	}

	if obj.TerraformResponse != nil {
		return obj.TerraformResponse
	}

	// all schemas are nil
	return nil
}

type NullableListServicesByEnvironmentId200ResponseResultsInner struct {
	value *ListServicesByEnvironmentId200ResponseResultsInner
	isSet bool
}

func (v NullableListServicesByEnvironmentId200ResponseResultsInner) Get() *ListServicesByEnvironmentId200ResponseResultsInner {
	return v.value
}

func (v *NullableListServicesByEnvironmentId200ResponseResultsInner) Set(val *ListServicesByEnvironmentId200ResponseResultsInner) {
	v.value = val
	v.isSet = true
}

func (v NullableListServicesByEnvironmentId200ResponseResultsInner) IsSet() bool {
	return v.isSet
}

func (v *NullableListServicesByEnvironmentId200ResponseResultsInner) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableListServicesByEnvironmentId200ResponseResultsInner(val *ListServicesByEnvironmentId200ResponseResultsInner) *NullableListServicesByEnvironmentId200ResponseResultsInner {
	return &NullableListServicesByEnvironmentId200ResponseResultsInner{value: val, isSet: true}
}

func (v NullableListServicesByEnvironmentId200ResponseResultsInner) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableListServicesByEnvironmentId200ResponseResultsInner) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
