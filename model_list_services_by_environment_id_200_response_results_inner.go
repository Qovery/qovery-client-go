/*
Qovery API

- Qovery is the fastest way to deploy your full-stack apps on any Cloud provider. - ℹ️ The API is stable and still in development.

API version: 1.0.3
Contact: support+api+documentation@qovery.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package qovery

import (
	"encoding/json"
	"fmt"
)

// ListServicesByEnvironmentId200ResponseResultsInner - struct for ListServicesByEnvironmentId200ResponseResultsInner
type ListServicesByEnvironmentId200ResponseResultsInner struct {
	Application       *Application
	ContainerResponse *ContainerResponse
	Database          *Database
	HelmResponse      *HelmResponse
	JobResponse       *JobResponse
}

// ApplicationAsListServicesByEnvironmentId200ResponseResultsInner is a convenience function that returns Application wrapped in ListServicesByEnvironmentId200ResponseResultsInner
func ApplicationAsListServicesByEnvironmentId200ResponseResultsInner(v *Application) ListServicesByEnvironmentId200ResponseResultsInner {
	return ListServicesByEnvironmentId200ResponseResultsInner{
		Application: v,
	}
}

// ContainerResponseAsListServicesByEnvironmentId200ResponseResultsInner is a convenience function that returns ContainerResponse wrapped in ListServicesByEnvironmentId200ResponseResultsInner
func ContainerResponseAsListServicesByEnvironmentId200ResponseResultsInner(v *ContainerResponse) ListServicesByEnvironmentId200ResponseResultsInner {
	return ListServicesByEnvironmentId200ResponseResultsInner{
		ContainerResponse: v,
	}
}

// DatabaseAsListServicesByEnvironmentId200ResponseResultsInner is a convenience function that returns Database wrapped in ListServicesByEnvironmentId200ResponseResultsInner
func DatabaseAsListServicesByEnvironmentId200ResponseResultsInner(v *Database) ListServicesByEnvironmentId200ResponseResultsInner {
	return ListServicesByEnvironmentId200ResponseResultsInner{
		Database: v,
	}
}

// HelmResponseAsListServicesByEnvironmentId200ResponseResultsInner is a convenience function that returns HelmResponse wrapped in ListServicesByEnvironmentId200ResponseResultsInner
func HelmResponseAsListServicesByEnvironmentId200ResponseResultsInner(v *HelmResponse) ListServicesByEnvironmentId200ResponseResultsInner {
	return ListServicesByEnvironmentId200ResponseResultsInner{
		HelmResponse: v,
	}
}

// JobResponseAsListServicesByEnvironmentId200ResponseResultsInner is a convenience function that returns JobResponse wrapped in ListServicesByEnvironmentId200ResponseResultsInner
func JobResponseAsListServicesByEnvironmentId200ResponseResultsInner(v *JobResponse) ListServicesByEnvironmentId200ResponseResultsInner {
	return ListServicesByEnvironmentId200ResponseResultsInner{
		JobResponse: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *ListServicesByEnvironmentId200ResponseResultsInner) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into Application
	err = json.Unmarshal(data, &dst.Application)
	if err == nil {
		jsonApplication, _ := json.Marshal(dst.Application)
		if string(jsonApplication) == "{}" { // empty struct
			dst.Application = nil
		} else {
			match++
		}
	} else {
		dst.Application = nil
	}

	// try to unmarshal data into ContainerResponse
	err = json.Unmarshal(data, &dst.ContainerResponse)
	if err == nil {
		jsonContainerResponse, _ := json.Marshal(dst.ContainerResponse)
		if string(jsonContainerResponse) == "{}" { // empty struct
			dst.ContainerResponse = nil
		} else {
			match++
		}
	} else {
		dst.ContainerResponse = nil
	}

	// try to unmarshal data into Database
	err = json.Unmarshal(data, &dst.Database)
	if err == nil {
		jsonDatabase, _ := json.Marshal(dst.Database)
		if string(jsonDatabase) == "{}" { // empty struct
			dst.Database = nil
		} else {
			match++
		}
	} else {
		dst.Database = nil
	}

	// try to unmarshal data into HelmResponse
	err = json.Unmarshal(data, &dst.HelmResponse)
	if err == nil {
		jsonHelmResponse, _ := json.Marshal(dst.HelmResponse)
		if string(jsonHelmResponse) == "{}" { // empty struct
			dst.HelmResponse = nil
		} else {
			match++
		}
	} else {
		dst.HelmResponse = nil
	}

	// try to unmarshal data into JobResponse
	err = json.Unmarshal(data, &dst.JobResponse)
	if err == nil {
		jsonJobResponse, _ := json.Marshal(dst.JobResponse)
		if string(jsonJobResponse) == "{}" { // empty struct
			dst.JobResponse = nil
		} else {
			match++
		}
	} else {
		dst.JobResponse = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.Application = nil
		dst.ContainerResponse = nil
		dst.Database = nil
		dst.HelmResponse = nil
		dst.JobResponse = nil

		return fmt.Errorf("data matches more than one schema in oneOf(ListServicesByEnvironmentId200ResponseResultsInner)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(ListServicesByEnvironmentId200ResponseResultsInner)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src ListServicesByEnvironmentId200ResponseResultsInner) MarshalJSON() ([]byte, error) {
	if src.Application != nil {
		return json.Marshal(&src.Application)
	}

	if src.ContainerResponse != nil {
		return json.Marshal(&src.ContainerResponse)
	}

	if src.Database != nil {
		return json.Marshal(&src.Database)
	}

	if src.HelmResponse != nil {
		return json.Marshal(&src.HelmResponse)
	}

	if src.JobResponse != nil {
		return json.Marshal(&src.JobResponse)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *ListServicesByEnvironmentId200ResponseResultsInner) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.Application != nil {
		return obj.Application
	}

	if obj.ContainerResponse != nil {
		return obj.ContainerResponse
	}

	if obj.Database != nil {
		return obj.Database
	}

	if obj.HelmResponse != nil {
		return obj.HelmResponse
	}

	if obj.JobResponse != nil {
		return obj.JobResponse
	}

	// all schemas are nil
	return nil
}

type NullableListServicesByEnvironmentId200ResponseResultsInner struct {
	value *ListServicesByEnvironmentId200ResponseResultsInner
	isSet bool
}

func (v NullableListServicesByEnvironmentId200ResponseResultsInner) Get() *ListServicesByEnvironmentId200ResponseResultsInner {
	return v.value
}

func (v *NullableListServicesByEnvironmentId200ResponseResultsInner) Set(val *ListServicesByEnvironmentId200ResponseResultsInner) {
	v.value = val
	v.isSet = true
}

func (v NullableListServicesByEnvironmentId200ResponseResultsInner) IsSet() bool {
	return v.isSet
}

func (v *NullableListServicesByEnvironmentId200ResponseResultsInner) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableListServicesByEnvironmentId200ResponseResultsInner(val *ListServicesByEnvironmentId200ResponseResultsInner) *NullableListServicesByEnvironmentId200ResponseResultsInner {
	return &NullableListServicesByEnvironmentId200ResponseResultsInner{value: val, isSet: true}
}

func (v NullableListServicesByEnvironmentId200ResponseResultsInner) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableListServicesByEnvironmentId200ResponseResultsInner) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
