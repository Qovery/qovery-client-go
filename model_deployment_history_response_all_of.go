/*
Qovery API

- Qovery is the fastest way to deploy your full-stack apps on any Cloud provider. - ℹ️ The API is stable and still in development.

API version: 1.0.3
Contact: support+api+documentation@qovery.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package qovery

import (
	"encoding/json"
)

// DeploymentHistoryResponseAllOf struct for DeploymentHistoryResponseAllOf
type DeploymentHistoryResponseAllOf struct {
	Commit *CommitResponse              `json:"commit,omitempty"`
	Status *DeploymentHistoryStatusEnum `json:"status,omitempty"`
}

// NewDeploymentHistoryResponseAllOf instantiates a new DeploymentHistoryResponseAllOf object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDeploymentHistoryResponseAllOf() *DeploymentHistoryResponseAllOf {
	this := DeploymentHistoryResponseAllOf{}
	return &this
}

// NewDeploymentHistoryResponseAllOfWithDefaults instantiates a new DeploymentHistoryResponseAllOf object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDeploymentHistoryResponseAllOfWithDefaults() *DeploymentHistoryResponseAllOf {
	this := DeploymentHistoryResponseAllOf{}
	return &this
}

// GetCommit returns the Commit field value if set, zero value otherwise.
func (o *DeploymentHistoryResponseAllOf) GetCommit() CommitResponse {
	if o == nil || o.Commit == nil {
		var ret CommitResponse
		return ret
	}
	return *o.Commit
}

// GetCommitOk returns a tuple with the Commit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeploymentHistoryResponseAllOf) GetCommitOk() (*CommitResponse, bool) {
	if o == nil || o.Commit == nil {
		return nil, false
	}
	return o.Commit, true
}

// HasCommit returns a boolean if a field has been set.
func (o *DeploymentHistoryResponseAllOf) HasCommit() bool {
	if o != nil && o.Commit != nil {
		return true
	}

	return false
}

// SetCommit gets a reference to the given CommitResponse and assigns it to the Commit field.
func (o *DeploymentHistoryResponseAllOf) SetCommit(v CommitResponse) {
	o.Commit = &v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *DeploymentHistoryResponseAllOf) GetStatus() DeploymentHistoryStatusEnum {
	if o == nil || o.Status == nil {
		var ret DeploymentHistoryStatusEnum
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeploymentHistoryResponseAllOf) GetStatusOk() (*DeploymentHistoryStatusEnum, bool) {
	if o == nil || o.Status == nil {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *DeploymentHistoryResponseAllOf) HasStatus() bool {
	if o != nil && o.Status != nil {
		return true
	}

	return false
}

// SetStatus gets a reference to the given DeploymentHistoryStatusEnum and assigns it to the Status field.
func (o *DeploymentHistoryResponseAllOf) SetStatus(v DeploymentHistoryStatusEnum) {
	o.Status = &v
}

func (o DeploymentHistoryResponseAllOf) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Commit != nil {
		toSerialize["commit"] = o.Commit
	}
	if o.Status != nil {
		toSerialize["status"] = o.Status
	}
	return json.Marshal(toSerialize)
}

type NullableDeploymentHistoryResponseAllOf struct {
	value *DeploymentHistoryResponseAllOf
	isSet bool
}

func (v NullableDeploymentHistoryResponseAllOf) Get() *DeploymentHistoryResponseAllOf {
	return v.value
}

func (v *NullableDeploymentHistoryResponseAllOf) Set(val *DeploymentHistoryResponseAllOf) {
	v.value = val
	v.isSet = true
}

func (v NullableDeploymentHistoryResponseAllOf) IsSet() bool {
	return v.isSet
}

func (v *NullableDeploymentHistoryResponseAllOf) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDeploymentHistoryResponseAllOf(val *DeploymentHistoryResponseAllOf) *NullableDeploymentHistoryResponseAllOf {
	return &NullableDeploymentHistoryResponseAllOf{value: val, isSet: true}
}

func (v NullableDeploymentHistoryResponseAllOf) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDeploymentHistoryResponseAllOf) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
