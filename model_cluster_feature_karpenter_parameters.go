/*
Qovery API

- Qovery is the fastest way to deploy your full-stack apps on any Cloud provider. - ℹ️ The API is stable and still in development.

API version: 1.0.3
Contact: support+api+documentation@qovery.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package qovery

import (
	"encoding/json"
	"fmt"
)

// checks if the ClusterFeatureKarpenterParameters type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ClusterFeatureKarpenterParameters{}

// ClusterFeatureKarpenterParameters struct for ClusterFeatureKarpenterParameters
type ClusterFeatureKarpenterParameters struct {
	SpotEnabled                bool                `json:"spot_enabled"`
	DiskSizeInGib              int32               `json:"disk_size_in_gib"`
	DefaultServiceArchitecture CpuArchitectureEnum `json:"default_service_architecture"`
	AdditionalProperties       map[string]interface{}
}

type _ClusterFeatureKarpenterParameters ClusterFeatureKarpenterParameters

// NewClusterFeatureKarpenterParameters instantiates a new ClusterFeatureKarpenterParameters object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewClusterFeatureKarpenterParameters(spotEnabled bool, diskSizeInGib int32, defaultServiceArchitecture CpuArchitectureEnum) *ClusterFeatureKarpenterParameters {
	this := ClusterFeatureKarpenterParameters{}
	this.SpotEnabled = spotEnabled
	this.DiskSizeInGib = diskSizeInGib
	this.DefaultServiceArchitecture = defaultServiceArchitecture
	return &this
}

// NewClusterFeatureKarpenterParametersWithDefaults instantiates a new ClusterFeatureKarpenterParameters object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewClusterFeatureKarpenterParametersWithDefaults() *ClusterFeatureKarpenterParameters {
	this := ClusterFeatureKarpenterParameters{}
	return &this
}

// GetSpotEnabled returns the SpotEnabled field value
func (o *ClusterFeatureKarpenterParameters) GetSpotEnabled() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.SpotEnabled
}

// GetSpotEnabledOk returns a tuple with the SpotEnabled field value
// and a boolean to check if the value has been set.
func (o *ClusterFeatureKarpenterParameters) GetSpotEnabledOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SpotEnabled, true
}

// SetSpotEnabled sets field value
func (o *ClusterFeatureKarpenterParameters) SetSpotEnabled(v bool) {
	o.SpotEnabled = v
}

// GetDiskSizeInGib returns the DiskSizeInGib field value
func (o *ClusterFeatureKarpenterParameters) GetDiskSizeInGib() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.DiskSizeInGib
}

// GetDiskSizeInGibOk returns a tuple with the DiskSizeInGib field value
// and a boolean to check if the value has been set.
func (o *ClusterFeatureKarpenterParameters) GetDiskSizeInGibOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DiskSizeInGib, true
}

// SetDiskSizeInGib sets field value
func (o *ClusterFeatureKarpenterParameters) SetDiskSizeInGib(v int32) {
	o.DiskSizeInGib = v
}

// GetDefaultServiceArchitecture returns the DefaultServiceArchitecture field value
func (o *ClusterFeatureKarpenterParameters) GetDefaultServiceArchitecture() CpuArchitectureEnum {
	if o == nil {
		var ret CpuArchitectureEnum
		return ret
	}

	return o.DefaultServiceArchitecture
}

// GetDefaultServiceArchitectureOk returns a tuple with the DefaultServiceArchitecture field value
// and a boolean to check if the value has been set.
func (o *ClusterFeatureKarpenterParameters) GetDefaultServiceArchitectureOk() (*CpuArchitectureEnum, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DefaultServiceArchitecture, true
}

// SetDefaultServiceArchitecture sets field value
func (o *ClusterFeatureKarpenterParameters) SetDefaultServiceArchitecture(v CpuArchitectureEnum) {
	o.DefaultServiceArchitecture = v
}

func (o ClusterFeatureKarpenterParameters) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ClusterFeatureKarpenterParameters) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["spot_enabled"] = o.SpotEnabled
	toSerialize["disk_size_in_gib"] = o.DiskSizeInGib
	toSerialize["default_service_architecture"] = o.DefaultServiceArchitecture

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *ClusterFeatureKarpenterParameters) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"spot_enabled",
		"disk_size_in_gib",
		"default_service_architecture",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varClusterFeatureKarpenterParameters := _ClusterFeatureKarpenterParameters{}

	err = json.Unmarshal(data, &varClusterFeatureKarpenterParameters)

	if err != nil {
		return err
	}

	*o = ClusterFeatureKarpenterParameters(varClusterFeatureKarpenterParameters)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "spot_enabled")
		delete(additionalProperties, "disk_size_in_gib")
		delete(additionalProperties, "default_service_architecture")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableClusterFeatureKarpenterParameters struct {
	value *ClusterFeatureKarpenterParameters
	isSet bool
}

func (v NullableClusterFeatureKarpenterParameters) Get() *ClusterFeatureKarpenterParameters {
	return v.value
}

func (v *NullableClusterFeatureKarpenterParameters) Set(val *ClusterFeatureKarpenterParameters) {
	v.value = val
	v.isSet = true
}

func (v NullableClusterFeatureKarpenterParameters) IsSet() bool {
	return v.isSet
}

func (v *NullableClusterFeatureKarpenterParameters) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableClusterFeatureKarpenterParameters(val *ClusterFeatureKarpenterParameters) *NullableClusterFeatureKarpenterParameters {
	return &NullableClusterFeatureKarpenterParameters{value: val, isSet: true}
}

func (v NullableClusterFeatureKarpenterParameters) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableClusterFeatureKarpenterParameters) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
