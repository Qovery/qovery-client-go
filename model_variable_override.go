/*
Qovery API

- Qovery is the fastest way to deploy your full-stack apps on any Cloud provider. - ℹ️ The API is stable and still in development.

API version: 1.0.3
Contact: support+api+documentation@qovery.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package qovery

import (
	"encoding/json"
)

// checks if the VariableOverride type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &VariableOverride{}

// VariableOverride struct for VariableOverride
type VariableOverride struct {
	// The id of the overriden variable
	Id string `json:"id"`
	// The key of the overriden variable
	Key string `json:"key"`
	// The value of the overriden variable
	Value NullableString `json:"value,omitempty"`
	// The mounth path of the overriden variable (only if environment variable type is 'file')
	MountPath    string               `json:"mount_path"`
	Scope        APIVariableScopeEnum `json:"scope"`
	VariableType APIVariableTypeEnum  `json:"variable_type"`
}

// NewVariableOverride instantiates a new VariableOverride object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVariableOverride(id string, key string, mountPath string, scope APIVariableScopeEnum, variableType APIVariableTypeEnum) *VariableOverride {
	this := VariableOverride{}
	this.Id = id
	this.Key = key
	this.MountPath = mountPath
	this.Scope = scope
	this.VariableType = variableType
	return &this
}

// NewVariableOverrideWithDefaults instantiates a new VariableOverride object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVariableOverrideWithDefaults() *VariableOverride {
	this := VariableOverride{}
	return &this
}

// GetId returns the Id field value
func (o *VariableOverride) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *VariableOverride) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *VariableOverride) SetId(v string) {
	o.Id = v
}

// GetKey returns the Key field value
func (o *VariableOverride) GetKey() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Key
}

// GetKeyOk returns a tuple with the Key field value
// and a boolean to check if the value has been set.
func (o *VariableOverride) GetKeyOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Key, true
}

// SetKey sets field value
func (o *VariableOverride) SetKey(v string) {
	o.Key = v
}

// GetValue returns the Value field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *VariableOverride) GetValue() string {
	if o == nil || IsNil(o.Value.Get()) {
		var ret string
		return ret
	}
	return *o.Value.Get()
}

// GetValueOk returns a tuple with the Value field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *VariableOverride) GetValueOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Value.Get(), o.Value.IsSet()
}

// HasValue returns a boolean if a field has been set.
func (o *VariableOverride) HasValue() bool {
	if o != nil && o.Value.IsSet() {
		return true
	}

	return false
}

// SetValue gets a reference to the given NullableString and assigns it to the Value field.
func (o *VariableOverride) SetValue(v string) {
	o.Value.Set(&v)
}

// SetValueNil sets the value for Value to be an explicit nil
func (o *VariableOverride) SetValueNil() {
	o.Value.Set(nil)
}

// UnsetValue ensures that no value is present for Value, not even an explicit nil
func (o *VariableOverride) UnsetValue() {
	o.Value.Unset()
}

// GetMountPath returns the MountPath field value
func (o *VariableOverride) GetMountPath() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.MountPath
}

// GetMountPathOk returns a tuple with the MountPath field value
// and a boolean to check if the value has been set.
func (o *VariableOverride) GetMountPathOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.MountPath, true
}

// SetMountPath sets field value
func (o *VariableOverride) SetMountPath(v string) {
	o.MountPath = v
}

// GetScope returns the Scope field value
func (o *VariableOverride) GetScope() APIVariableScopeEnum {
	if o == nil {
		var ret APIVariableScopeEnum
		return ret
	}

	return o.Scope
}

// GetScopeOk returns a tuple with the Scope field value
// and a boolean to check if the value has been set.
func (o *VariableOverride) GetScopeOk() (*APIVariableScopeEnum, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Scope, true
}

// SetScope sets field value
func (o *VariableOverride) SetScope(v APIVariableScopeEnum) {
	o.Scope = v
}

// GetVariableType returns the VariableType field value
func (o *VariableOverride) GetVariableType() APIVariableTypeEnum {
	if o == nil {
		var ret APIVariableTypeEnum
		return ret
	}

	return o.VariableType
}

// GetVariableTypeOk returns a tuple with the VariableType field value
// and a boolean to check if the value has been set.
func (o *VariableOverride) GetVariableTypeOk() (*APIVariableTypeEnum, bool) {
	if o == nil {
		return nil, false
	}
	return &o.VariableType, true
}

// SetVariableType sets field value
func (o *VariableOverride) SetVariableType(v APIVariableTypeEnum) {
	o.VariableType = v
}

func (o VariableOverride) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o VariableOverride) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["key"] = o.Key
	if o.Value.IsSet() {
		toSerialize["value"] = o.Value.Get()
	}
	toSerialize["mount_path"] = o.MountPath
	toSerialize["scope"] = o.Scope
	toSerialize["variable_type"] = o.VariableType
	return toSerialize, nil
}

type NullableVariableOverride struct {
	value *VariableOverride
	isSet bool
}

func (v NullableVariableOverride) Get() *VariableOverride {
	return v.value
}

func (v *NullableVariableOverride) Set(val *VariableOverride) {
	v.value = val
	v.isSet = true
}

func (v NullableVariableOverride) IsSet() bool {
	return v.isSet
}

func (v *NullableVariableOverride) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVariableOverride(val *VariableOverride) *NullableVariableOverride {
	return &NullableVariableOverride{value: val, isSet: true}
}

func (v NullableVariableOverride) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVariableOverride) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
