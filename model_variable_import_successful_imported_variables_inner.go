/*
Qovery API

- Qovery is the fastest way to deploy your full-stack apps on any Cloud provider. - ℹ️ The API is stable and still in development.

API version: 1.0.3
Contact: support+api+documentation@qovery.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package qovery

import (
	"encoding/json"
	"fmt"
)

// checks if the VariableImportSuccessfulImportedVariablesInner type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &VariableImportSuccessfulImportedVariablesInner{}

// VariableImportSuccessfulImportedVariablesInner struct for VariableImportSuccessfulImportedVariablesInner
type VariableImportSuccessfulImportedVariablesInner struct {
	Name string `json:"name"`
	// Optional if the variable is secret
	Value                *string              `json:"value,omitempty"`
	Scope                APIVariableScopeEnum `json:"scope"`
	IsSecret             bool                 `json:"is_secret"`
	AdditionalProperties map[string]interface{}
}

type _VariableImportSuccessfulImportedVariablesInner VariableImportSuccessfulImportedVariablesInner

// NewVariableImportSuccessfulImportedVariablesInner instantiates a new VariableImportSuccessfulImportedVariablesInner object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVariableImportSuccessfulImportedVariablesInner(name string, scope APIVariableScopeEnum, isSecret bool) *VariableImportSuccessfulImportedVariablesInner {
	this := VariableImportSuccessfulImportedVariablesInner{}
	this.Name = name
	this.Scope = scope
	this.IsSecret = isSecret
	return &this
}

// NewVariableImportSuccessfulImportedVariablesInnerWithDefaults instantiates a new VariableImportSuccessfulImportedVariablesInner object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVariableImportSuccessfulImportedVariablesInnerWithDefaults() *VariableImportSuccessfulImportedVariablesInner {
	this := VariableImportSuccessfulImportedVariablesInner{}
	return &this
}

// GetName returns the Name field value
func (o *VariableImportSuccessfulImportedVariablesInner) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *VariableImportSuccessfulImportedVariablesInner) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *VariableImportSuccessfulImportedVariablesInner) SetName(v string) {
	o.Name = v
}

// GetValue returns the Value field value if set, zero value otherwise.
func (o *VariableImportSuccessfulImportedVariablesInner) GetValue() string {
	if o == nil || IsNil(o.Value) {
		var ret string
		return ret
	}
	return *o.Value
}

// GetValueOk returns a tuple with the Value field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VariableImportSuccessfulImportedVariablesInner) GetValueOk() (*string, bool) {
	if o == nil || IsNil(o.Value) {
		return nil, false
	}
	return o.Value, true
}

// HasValue returns a boolean if a field has been set.
func (o *VariableImportSuccessfulImportedVariablesInner) HasValue() bool {
	if o != nil && !IsNil(o.Value) {
		return true
	}

	return false
}

// SetValue gets a reference to the given string and assigns it to the Value field.
func (o *VariableImportSuccessfulImportedVariablesInner) SetValue(v string) {
	o.Value = &v
}

// GetScope returns the Scope field value
func (o *VariableImportSuccessfulImportedVariablesInner) GetScope() APIVariableScopeEnum {
	if o == nil {
		var ret APIVariableScopeEnum
		return ret
	}

	return o.Scope
}

// GetScopeOk returns a tuple with the Scope field value
// and a boolean to check if the value has been set.
func (o *VariableImportSuccessfulImportedVariablesInner) GetScopeOk() (*APIVariableScopeEnum, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Scope, true
}

// SetScope sets field value
func (o *VariableImportSuccessfulImportedVariablesInner) SetScope(v APIVariableScopeEnum) {
	o.Scope = v
}

// GetIsSecret returns the IsSecret field value
func (o *VariableImportSuccessfulImportedVariablesInner) GetIsSecret() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.IsSecret
}

// GetIsSecretOk returns a tuple with the IsSecret field value
// and a boolean to check if the value has been set.
func (o *VariableImportSuccessfulImportedVariablesInner) GetIsSecretOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.IsSecret, true
}

// SetIsSecret sets field value
func (o *VariableImportSuccessfulImportedVariablesInner) SetIsSecret(v bool) {
	o.IsSecret = v
}

func (o VariableImportSuccessfulImportedVariablesInner) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o VariableImportSuccessfulImportedVariablesInner) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["name"] = o.Name
	if !IsNil(o.Value) {
		toSerialize["value"] = o.Value
	}
	toSerialize["scope"] = o.Scope
	toSerialize["is_secret"] = o.IsSecret

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *VariableImportSuccessfulImportedVariablesInner) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"name",
		"scope",
		"is_secret",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varVariableImportSuccessfulImportedVariablesInner := _VariableImportSuccessfulImportedVariablesInner{}

	err = json.Unmarshal(data, &varVariableImportSuccessfulImportedVariablesInner)

	if err != nil {
		return err
	}

	*o = VariableImportSuccessfulImportedVariablesInner(varVariableImportSuccessfulImportedVariablesInner)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "name")
		delete(additionalProperties, "value")
		delete(additionalProperties, "scope")
		delete(additionalProperties, "is_secret")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableVariableImportSuccessfulImportedVariablesInner struct {
	value *VariableImportSuccessfulImportedVariablesInner
	isSet bool
}

func (v NullableVariableImportSuccessfulImportedVariablesInner) Get() *VariableImportSuccessfulImportedVariablesInner {
	return v.value
}

func (v *NullableVariableImportSuccessfulImportedVariablesInner) Set(val *VariableImportSuccessfulImportedVariablesInner) {
	v.value = val
	v.isSet = true
}

func (v NullableVariableImportSuccessfulImportedVariablesInner) IsSet() bool {
	return v.isSet
}

func (v *NullableVariableImportSuccessfulImportedVariablesInner) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVariableImportSuccessfulImportedVariablesInner(val *VariableImportSuccessfulImportedVariablesInner) *NullableVariableImportSuccessfulImportedVariablesInner {
	return &NullableVariableImportSuccessfulImportedVariablesInner{value: val, isSet: true}
}

func (v NullableVariableImportSuccessfulImportedVariablesInner) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVariableImportSuccessfulImportedVariablesInner) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
