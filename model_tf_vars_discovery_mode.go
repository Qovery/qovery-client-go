/*
Qovery API

- Qovery is the fastest way to deploy your full-stack apps on any Cloud provider. - ℹ️ The API is stable and still in development.

API version: 1.0.4
Contact: support+api+documentation@qovery.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package qovery

import (
	"encoding/json"
	"fmt"
)

// TfVarsDiscoveryMode - Discovery mode for Terraform tfvars files - either auto-discover or specify paths
type TfVarsDiscoveryMode struct {
	TfVarsDiscoveryModeAutoDiscover  *TfVarsDiscoveryModeAutoDiscover
	TfVarsDiscoveryModeSpecificPaths *TfVarsDiscoveryModeSpecificPaths
}

// TfVarsDiscoveryModeAutoDiscoverAsTfVarsDiscoveryMode is a convenience function that returns TfVarsDiscoveryModeAutoDiscover wrapped in TfVarsDiscoveryMode
func TfVarsDiscoveryModeAutoDiscoverAsTfVarsDiscoveryMode(v *TfVarsDiscoveryModeAutoDiscover) TfVarsDiscoveryMode {
	return TfVarsDiscoveryMode{
		TfVarsDiscoveryModeAutoDiscover: v,
	}
}

// TfVarsDiscoveryModeSpecificPathsAsTfVarsDiscoveryMode is a convenience function that returns TfVarsDiscoveryModeSpecificPaths wrapped in TfVarsDiscoveryMode
func TfVarsDiscoveryModeSpecificPathsAsTfVarsDiscoveryMode(v *TfVarsDiscoveryModeSpecificPaths) TfVarsDiscoveryMode {
	return TfVarsDiscoveryMode{
		TfVarsDiscoveryModeSpecificPaths: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *TfVarsDiscoveryMode) UnmarshalJSON(data []byte) error {
	var err error
	// use discriminator value to speed up the lookup
	var jsonDict map[string]interface{}
	err = newStrictDecoder(data).Decode(&jsonDict)
	if err != nil {
		return fmt.Errorf("failed to unmarshal JSON into map for the discriminator lookup")
	}

	// check if the discriminator value is 'AutoDiscover'
	if jsonDict["type"] == "AutoDiscover" {
		// try to unmarshal JSON data into TfVarsDiscoveryModeAutoDiscover
		err = json.Unmarshal(data, &dst.TfVarsDiscoveryModeAutoDiscover)
		if err == nil {
			return nil // data stored in dst.TfVarsDiscoveryModeAutoDiscover, return on the first match
		} else {
			dst.TfVarsDiscoveryModeAutoDiscover = nil
			return fmt.Errorf("failed to unmarshal TfVarsDiscoveryMode as TfVarsDiscoveryModeAutoDiscover: %s", err.Error())
		}
	}

	// check if the discriminator value is 'SpecificPaths'
	if jsonDict["type"] == "SpecificPaths" {
		// try to unmarshal JSON data into TfVarsDiscoveryModeSpecificPaths
		err = json.Unmarshal(data, &dst.TfVarsDiscoveryModeSpecificPaths)
		if err == nil {
			return nil // data stored in dst.TfVarsDiscoveryModeSpecificPaths, return on the first match
		} else {
			dst.TfVarsDiscoveryModeSpecificPaths = nil
			return fmt.Errorf("failed to unmarshal TfVarsDiscoveryMode as TfVarsDiscoveryModeSpecificPaths: %s", err.Error())
		}
	}

	// check if the discriminator value is 'TfVarsDiscoveryModeAutoDiscover'
	if jsonDict["type"] == "TfVarsDiscoveryModeAutoDiscover" {
		// try to unmarshal JSON data into TfVarsDiscoveryModeAutoDiscover
		err = json.Unmarshal(data, &dst.TfVarsDiscoveryModeAutoDiscover)
		if err == nil {
			return nil // data stored in dst.TfVarsDiscoveryModeAutoDiscover, return on the first match
		} else {
			dst.TfVarsDiscoveryModeAutoDiscover = nil
			return fmt.Errorf("failed to unmarshal TfVarsDiscoveryMode as TfVarsDiscoveryModeAutoDiscover: %s", err.Error())
		}
	}

	// check if the discriminator value is 'TfVarsDiscoveryModeSpecificPaths'
	if jsonDict["type"] == "TfVarsDiscoveryModeSpecificPaths" {
		// try to unmarshal JSON data into TfVarsDiscoveryModeSpecificPaths
		err = json.Unmarshal(data, &dst.TfVarsDiscoveryModeSpecificPaths)
		if err == nil {
			return nil // data stored in dst.TfVarsDiscoveryModeSpecificPaths, return on the first match
		} else {
			dst.TfVarsDiscoveryModeSpecificPaths = nil
			return fmt.Errorf("failed to unmarshal TfVarsDiscoveryMode as TfVarsDiscoveryModeSpecificPaths: %s", err.Error())
		}
	}

	return nil
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src TfVarsDiscoveryMode) MarshalJSON() ([]byte, error) {
	if src.TfVarsDiscoveryModeAutoDiscover != nil {
		return json.Marshal(&src.TfVarsDiscoveryModeAutoDiscover)
	}

	if src.TfVarsDiscoveryModeSpecificPaths != nil {
		return json.Marshal(&src.TfVarsDiscoveryModeSpecificPaths)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *TfVarsDiscoveryMode) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.TfVarsDiscoveryModeAutoDiscover != nil {
		return obj.TfVarsDiscoveryModeAutoDiscover
	}

	if obj.TfVarsDiscoveryModeSpecificPaths != nil {
		return obj.TfVarsDiscoveryModeSpecificPaths
	}

	// all schemas are nil
	return nil
}

type NullableTfVarsDiscoveryMode struct {
	value *TfVarsDiscoveryMode
	isSet bool
}

func (v NullableTfVarsDiscoveryMode) Get() *TfVarsDiscoveryMode {
	return v.value
}

func (v *NullableTfVarsDiscoveryMode) Set(val *TfVarsDiscoveryMode) {
	v.value = val
	v.isSet = true
}

func (v NullableTfVarsDiscoveryMode) IsSet() bool {
	return v.isSet
}

func (v *NullableTfVarsDiscoveryMode) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTfVarsDiscoveryMode(val *TfVarsDiscoveryMode) *NullableTfVarsDiscoveryMode {
	return &NullableTfVarsDiscoveryMode{value: val, isSet: true}
}

func (v NullableTfVarsDiscoveryMode) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTfVarsDiscoveryMode) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
