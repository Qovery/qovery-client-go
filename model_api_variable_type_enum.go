/*
Qovery API

- Qovery is the fastest way to deploy your full-stack apps on any Cloud provider. - ℹ️ The API is stable and still in development.

API version: 1.0.4
Contact: support+api+documentation@qovery.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package qovery

import (
	"encoding/json"
	"fmt"
)

// APIVariableTypeEnum type of the environment variable (VALUE, FILE, ALIAS, OVERRIDE or BUIT_IN)
type APIVariableTypeEnum string

// List of APIVariableTypeEnum
const (
	APIVARIABLETYPEENUM_VALUE    APIVariableTypeEnum = "VALUE"
	APIVARIABLETYPEENUM_ALIAS    APIVariableTypeEnum = "ALIAS"
	APIVARIABLETYPEENUM_OVERRIDE APIVariableTypeEnum = "OVERRIDE"
	APIVARIABLETYPEENUM_BUILT_IN APIVariableTypeEnum = "BUILT_IN"
	APIVARIABLETYPEENUM_FILE     APIVariableTypeEnum = "FILE"
)

// All allowed values of APIVariableTypeEnum enum
var AllowedAPIVariableTypeEnumEnumValues = []APIVariableTypeEnum{
	"VALUE",
	"ALIAS",
	"OVERRIDE",
	"BUILT_IN",
	"FILE",
}

func (v *APIVariableTypeEnum) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := APIVariableTypeEnum(value)
	for _, existing := range AllowedAPIVariableTypeEnumEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid APIVariableTypeEnum", value)
}

// NewAPIVariableTypeEnumFromValue returns a pointer to a valid APIVariableTypeEnum
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewAPIVariableTypeEnumFromValue(v string) (*APIVariableTypeEnum, error) {
	ev := APIVariableTypeEnum(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for APIVariableTypeEnum: valid values are %v", v, AllowedAPIVariableTypeEnumEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v APIVariableTypeEnum) IsValid() bool {
	for _, existing := range AllowedAPIVariableTypeEnumEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to APIVariableTypeEnum value
func (v APIVariableTypeEnum) Ptr() *APIVariableTypeEnum {
	return &v
}

type NullableAPIVariableTypeEnum struct {
	value *APIVariableTypeEnum
	isSet bool
}

func (v NullableAPIVariableTypeEnum) Get() *APIVariableTypeEnum {
	return v.value
}

func (v *NullableAPIVariableTypeEnum) Set(val *APIVariableTypeEnum) {
	v.value = val
	v.isSet = true
}

func (v NullableAPIVariableTypeEnum) IsSet() bool {
	return v.isSet
}

func (v *NullableAPIVariableTypeEnum) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAPIVariableTypeEnum(val *APIVariableTypeEnum) *NullableAPIVariableTypeEnum {
	return &NullableAPIVariableTypeEnum{value: val, isSet: true}
}

func (v NullableAPIVariableTypeEnum) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAPIVariableTypeEnum) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
