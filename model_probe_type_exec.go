/*
Qovery API

- Qovery is the fastest way to deploy your full-stack apps on any Cloud provider. - ℹ️ The API is stable and still in development.

API version: 1.0.3
Contact: support+api+documentation@qovery.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package qovery

import (
	"encoding/json"
)

// checks if the ProbeTypeExec type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ProbeTypeExec{}

// ProbeTypeExec struct for ProbeTypeExec
type ProbeTypeExec struct {
	Command []string `json:"command,omitempty"`
}

// NewProbeTypeExec instantiates a new ProbeTypeExec object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewProbeTypeExec() *ProbeTypeExec {
	this := ProbeTypeExec{}
	return &this
}

// NewProbeTypeExecWithDefaults instantiates a new ProbeTypeExec object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewProbeTypeExecWithDefaults() *ProbeTypeExec {
	this := ProbeTypeExec{}
	return &this
}

// GetCommand returns the Command field value if set, zero value otherwise.
func (o *ProbeTypeExec) GetCommand() []string {
	if o == nil || IsNil(o.Command) {
		var ret []string
		return ret
	}
	return o.Command
}

// GetCommandOk returns a tuple with the Command field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProbeTypeExec) GetCommandOk() ([]string, bool) {
	if o == nil || IsNil(o.Command) {
		return nil, false
	}
	return o.Command, true
}

// HasCommand returns a boolean if a field has been set.
func (o *ProbeTypeExec) HasCommand() bool {
	if o != nil && !IsNil(o.Command) {
		return true
	}

	return false
}

// SetCommand gets a reference to the given []string and assigns it to the Command field.
func (o *ProbeTypeExec) SetCommand(v []string) {
	o.Command = v
}

func (o ProbeTypeExec) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ProbeTypeExec) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Command) {
		toSerialize["command"] = o.Command
	}
	return toSerialize, nil
}

type NullableProbeTypeExec struct {
	value *ProbeTypeExec
	isSet bool
}

func (v NullableProbeTypeExec) Get() *ProbeTypeExec {
	return v.value
}

func (v *NullableProbeTypeExec) Set(val *ProbeTypeExec) {
	v.value = val
	v.isSet = true
}

func (v NullableProbeTypeExec) IsSet() bool {
	return v.isSet
}

func (v *NullableProbeTypeExec) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableProbeTypeExec(val *ProbeTypeExec) *NullableProbeTypeExec {
	return &NullableProbeTypeExec{value: val, isSet: true}
}

func (v NullableProbeTypeExec) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableProbeTypeExec) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
