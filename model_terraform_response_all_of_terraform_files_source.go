/*
Qovery API

- Qovery is the fastest way to deploy your full-stack apps on any Cloud provider. - ℹ️ The API is stable and still in development.

API version: 1.0.4
Contact: support+api+documentation@qovery.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package qovery

import (
	"encoding/json"
	"fmt"
)

// TerraformResponseAllOfTerraformFilesSource - struct for TerraformResponseAllOfTerraformFilesSource
type TerraformResponseAllOfTerraformFilesSource struct {
	TerraformFilesSource *TerraformFilesSource
}

// TerraformFilesSourceAsTerraformResponseAllOfTerraformFilesSource is a convenience function that returns TerraformFilesSource wrapped in TerraformResponseAllOfTerraformFilesSource
func TerraformFilesSourceAsTerraformResponseAllOfTerraformFilesSource(v *TerraformFilesSource) TerraformResponseAllOfTerraformFilesSource {
	return TerraformResponseAllOfTerraformFilesSource{
		TerraformFilesSource: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *TerraformResponseAllOfTerraformFilesSource) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into TerraformFilesSource
	err = json.Unmarshal(data, &dst.TerraformFilesSource)
	if err == nil {
		jsonTerraformFilesSource, _ := json.Marshal(dst.TerraformFilesSource)
		if string(jsonTerraformFilesSource) == "{}" { // empty struct
			dst.TerraformFilesSource = nil
		} else {
			match++
		}
	} else {
		dst.TerraformFilesSource = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.TerraformFilesSource = nil

		return fmt.Errorf("data matches more than one schema in oneOf(TerraformResponseAllOfTerraformFilesSource)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(TerraformResponseAllOfTerraformFilesSource)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src TerraformResponseAllOfTerraformFilesSource) MarshalJSON() ([]byte, error) {
	if src.TerraformFilesSource != nil {
		return json.Marshal(&src.TerraformFilesSource)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *TerraformResponseAllOfTerraformFilesSource) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.TerraformFilesSource != nil {
		return obj.TerraformFilesSource
	}

	// all schemas are nil
	return nil
}

type NullableTerraformResponseAllOfTerraformFilesSource struct {
	value *TerraformResponseAllOfTerraformFilesSource
	isSet bool
}

func (v NullableTerraformResponseAllOfTerraformFilesSource) Get() *TerraformResponseAllOfTerraformFilesSource {
	return v.value
}

func (v *NullableTerraformResponseAllOfTerraformFilesSource) Set(val *TerraformResponseAllOfTerraformFilesSource) {
	v.value = val
	v.isSet = true
}

func (v NullableTerraformResponseAllOfTerraformFilesSource) IsSet() bool {
	return v.isSet
}

func (v *NullableTerraformResponseAllOfTerraformFilesSource) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTerraformResponseAllOfTerraformFilesSource(val *TerraformResponseAllOfTerraformFilesSource) *NullableTerraformResponseAllOfTerraformFilesSource {
	return &NullableTerraformResponseAllOfTerraformFilesSource{value: val, isSet: true}
}

func (v NullableTerraformResponseAllOfTerraformFilesSource) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTerraformResponseAllOfTerraformFilesSource) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
