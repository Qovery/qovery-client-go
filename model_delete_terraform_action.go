/*
Qovery API

- Qovery is the fastest way to deploy your full-stack apps on any Cloud provider. - ℹ️ The API is stable and still in development.

API version: 1.0.4
Contact: support+api+documentation@qovery.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package qovery

import (
	"encoding/json"
	"fmt"
)

// DeleteTerraformAction Action to force a specific Terraform behavior during deletion/uninstall.
type DeleteTerraformAction string

// List of DeleteTerraformAction
const (
	DELETETERRAFORMACTION_SKIP_DESTROY DeleteTerraformAction = "SKIP_DESTROY"
)

// All allowed values of DeleteTerraformAction enum
var AllowedDeleteTerraformActionEnumValues = []DeleteTerraformAction{
	"SKIP_DESTROY",
}

func (v *DeleteTerraformAction) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := DeleteTerraformAction(value)
	for _, existing := range AllowedDeleteTerraformActionEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid DeleteTerraformAction", value)
}

// NewDeleteTerraformActionFromValue returns a pointer to a valid DeleteTerraformAction
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewDeleteTerraformActionFromValue(v string) (*DeleteTerraformAction, error) {
	ev := DeleteTerraformAction(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for DeleteTerraformAction: valid values are %v", v, AllowedDeleteTerraformActionEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v DeleteTerraformAction) IsValid() bool {
	for _, existing := range AllowedDeleteTerraformActionEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to DeleteTerraformAction value
func (v DeleteTerraformAction) Ptr() *DeleteTerraformAction {
	return &v
}

type NullableDeleteTerraformAction struct {
	value *DeleteTerraformAction
	isSet bool
}

func (v NullableDeleteTerraformAction) Get() *DeleteTerraformAction {
	return v.value
}

func (v *NullableDeleteTerraformAction) Set(val *DeleteTerraformAction) {
	v.value = val
	v.isSet = true
}

func (v NullableDeleteTerraformAction) IsSet() bool {
	return v.isSet
}

func (v *NullableDeleteTerraformAction) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDeleteTerraformAction(val *DeleteTerraformAction) *NullableDeleteTerraformAction {
	return &NullableDeleteTerraformAction{value: val, isSet: true}
}

func (v NullableDeleteTerraformAction) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDeleteTerraformAction) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
