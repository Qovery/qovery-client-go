/*
Qovery API

- Qovery is the fastest way to deploy your full-stack apps on any Cloud provider. - ℹ️ The API is stable and still in development.

API version: 1.0.3
Contact: support+api+documentation@qovery.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package qovery

import (
	"encoding/json"
	"fmt"
)

// checks if the VariableRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &VariableRequest{}

// VariableRequest struct for VariableRequest
type VariableRequest struct {
	// the key of the environment variable
	Key string `json:"key"`
	// the value of the environment variable
	Value string `json:"value"`
	// the path where the file will be mounted (only if type =file)
	MountPath NullableString `json:"mount_path,omitempty"`
	// if true, the variable will be considered as a secret and will not be accessible after its creation. Only your applications will be able to access its value at build and run time.
	IsSecret      bool                 `json:"is_secret"`
	VariableScope APIVariableScopeEnum `json:"variable_scope"`
	// based on the selected scope, it contains the ID of the service, environment or project where the variable is attached
	VariableParentId string `json:"variable_parent_id"`
	// optional variable description (255 characters maximum)
	Description               NullableString `json:"description,omitempty"`
	EnableInterpolationInFile NullableBool   `json:"enable_interpolation_in_file,omitempty"`
	AdditionalProperties      map[string]interface{}
}

type _VariableRequest VariableRequest

// NewVariableRequest instantiates a new VariableRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVariableRequest(key string, value string, isSecret bool, variableScope APIVariableScopeEnum, variableParentId string) *VariableRequest {
	this := VariableRequest{}
	this.Key = key
	this.Value = value
	this.IsSecret = isSecret
	this.VariableScope = variableScope
	this.VariableParentId = variableParentId
	return &this
}

// NewVariableRequestWithDefaults instantiates a new VariableRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVariableRequestWithDefaults() *VariableRequest {
	this := VariableRequest{}
	return &this
}

// GetKey returns the Key field value
func (o *VariableRequest) GetKey() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Key
}

// GetKeyOk returns a tuple with the Key field value
// and a boolean to check if the value has been set.
func (o *VariableRequest) GetKeyOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Key, true
}

// SetKey sets field value
func (o *VariableRequest) SetKey(v string) {
	o.Key = v
}

// GetValue returns the Value field value
func (o *VariableRequest) GetValue() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Value
}

// GetValueOk returns a tuple with the Value field value
// and a boolean to check if the value has been set.
func (o *VariableRequest) GetValueOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Value, true
}

// SetValue sets field value
func (o *VariableRequest) SetValue(v string) {
	o.Value = v
}

// GetMountPath returns the MountPath field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *VariableRequest) GetMountPath() string {
	if o == nil || IsNil(o.MountPath.Get()) {
		var ret string
		return ret
	}
	return *o.MountPath.Get()
}

// GetMountPathOk returns a tuple with the MountPath field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *VariableRequest) GetMountPathOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.MountPath.Get(), o.MountPath.IsSet()
}

// HasMountPath returns a boolean if a field has been set.
func (o *VariableRequest) HasMountPath() bool {
	if o != nil && o.MountPath.IsSet() {
		return true
	}

	return false
}

// SetMountPath gets a reference to the given NullableString and assigns it to the MountPath field.
func (o *VariableRequest) SetMountPath(v string) {
	o.MountPath.Set(&v)
}

// SetMountPathNil sets the value for MountPath to be an explicit nil
func (o *VariableRequest) SetMountPathNil() {
	o.MountPath.Set(nil)
}

// UnsetMountPath ensures that no value is present for MountPath, not even an explicit nil
func (o *VariableRequest) UnsetMountPath() {
	o.MountPath.Unset()
}

// GetIsSecret returns the IsSecret field value
func (o *VariableRequest) GetIsSecret() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.IsSecret
}

// GetIsSecretOk returns a tuple with the IsSecret field value
// and a boolean to check if the value has been set.
func (o *VariableRequest) GetIsSecretOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.IsSecret, true
}

// SetIsSecret sets field value
func (o *VariableRequest) SetIsSecret(v bool) {
	o.IsSecret = v
}

// GetVariableScope returns the VariableScope field value
func (o *VariableRequest) GetVariableScope() APIVariableScopeEnum {
	if o == nil {
		var ret APIVariableScopeEnum
		return ret
	}

	return o.VariableScope
}

// GetVariableScopeOk returns a tuple with the VariableScope field value
// and a boolean to check if the value has been set.
func (o *VariableRequest) GetVariableScopeOk() (*APIVariableScopeEnum, bool) {
	if o == nil {
		return nil, false
	}
	return &o.VariableScope, true
}

// SetVariableScope sets field value
func (o *VariableRequest) SetVariableScope(v APIVariableScopeEnum) {
	o.VariableScope = v
}

// GetVariableParentId returns the VariableParentId field value
func (o *VariableRequest) GetVariableParentId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.VariableParentId
}

// GetVariableParentIdOk returns a tuple with the VariableParentId field value
// and a boolean to check if the value has been set.
func (o *VariableRequest) GetVariableParentIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.VariableParentId, true
}

// SetVariableParentId sets field value
func (o *VariableRequest) SetVariableParentId(v string) {
	o.VariableParentId = v
}

// GetDescription returns the Description field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *VariableRequest) GetDescription() string {
	if o == nil || IsNil(o.Description.Get()) {
		var ret string
		return ret
	}
	return *o.Description.Get()
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *VariableRequest) GetDescriptionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Description.Get(), o.Description.IsSet()
}

// HasDescription returns a boolean if a field has been set.
func (o *VariableRequest) HasDescription() bool {
	if o != nil && o.Description.IsSet() {
		return true
	}

	return false
}

// SetDescription gets a reference to the given NullableString and assigns it to the Description field.
func (o *VariableRequest) SetDescription(v string) {
	o.Description.Set(&v)
}

// SetDescriptionNil sets the value for Description to be an explicit nil
func (o *VariableRequest) SetDescriptionNil() {
	o.Description.Set(nil)
}

// UnsetDescription ensures that no value is present for Description, not even an explicit nil
func (o *VariableRequest) UnsetDescription() {
	o.Description.Unset()
}

// GetEnableInterpolationInFile returns the EnableInterpolationInFile field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *VariableRequest) GetEnableInterpolationInFile() bool {
	if o == nil || IsNil(o.EnableInterpolationInFile.Get()) {
		var ret bool
		return ret
	}
	return *o.EnableInterpolationInFile.Get()
}

// GetEnableInterpolationInFileOk returns a tuple with the EnableInterpolationInFile field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *VariableRequest) GetEnableInterpolationInFileOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.EnableInterpolationInFile.Get(), o.EnableInterpolationInFile.IsSet()
}

// HasEnableInterpolationInFile returns a boolean if a field has been set.
func (o *VariableRequest) HasEnableInterpolationInFile() bool {
	if o != nil && o.EnableInterpolationInFile.IsSet() {
		return true
	}

	return false
}

// SetEnableInterpolationInFile gets a reference to the given NullableBool and assigns it to the EnableInterpolationInFile field.
func (o *VariableRequest) SetEnableInterpolationInFile(v bool) {
	o.EnableInterpolationInFile.Set(&v)
}

// SetEnableInterpolationInFileNil sets the value for EnableInterpolationInFile to be an explicit nil
func (o *VariableRequest) SetEnableInterpolationInFileNil() {
	o.EnableInterpolationInFile.Set(nil)
}

// UnsetEnableInterpolationInFile ensures that no value is present for EnableInterpolationInFile, not even an explicit nil
func (o *VariableRequest) UnsetEnableInterpolationInFile() {
	o.EnableInterpolationInFile.Unset()
}

func (o VariableRequest) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o VariableRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["key"] = o.Key
	toSerialize["value"] = o.Value
	if o.MountPath.IsSet() {
		toSerialize["mount_path"] = o.MountPath.Get()
	}
	toSerialize["is_secret"] = o.IsSecret
	toSerialize["variable_scope"] = o.VariableScope
	toSerialize["variable_parent_id"] = o.VariableParentId
	if o.Description.IsSet() {
		toSerialize["description"] = o.Description.Get()
	}
	if o.EnableInterpolationInFile.IsSet() {
		toSerialize["enable_interpolation_in_file"] = o.EnableInterpolationInFile.Get()
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *VariableRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"key",
		"value",
		"is_secret",
		"variable_scope",
		"variable_parent_id",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varVariableRequest := _VariableRequest{}

	err = json.Unmarshal(data, &varVariableRequest)

	if err != nil {
		return err
	}

	*o = VariableRequest(varVariableRequest)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "key")
		delete(additionalProperties, "value")
		delete(additionalProperties, "mount_path")
		delete(additionalProperties, "is_secret")
		delete(additionalProperties, "variable_scope")
		delete(additionalProperties, "variable_parent_id")
		delete(additionalProperties, "description")
		delete(additionalProperties, "enable_interpolation_in_file")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableVariableRequest struct {
	value *VariableRequest
	isSet bool
}

func (v NullableVariableRequest) Get() *VariableRequest {
	return v.value
}

func (v *NullableVariableRequest) Set(val *VariableRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableVariableRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableVariableRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVariableRequest(val *VariableRequest) *NullableVariableRequest {
	return &NullableVariableRequest{value: val, isSet: true}
}

func (v NullableVariableRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVariableRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
