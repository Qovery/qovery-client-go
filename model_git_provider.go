/*
Qovery API

- Qovery is the fastest way to deploy your full-stack apps on any Cloud provider. - ℹ️ The API is stable and still in development.

API version: 1.0.4
Contact: support+api+documentation@qovery.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package qovery

import (
	"encoding/json"
	"fmt"
)

// checks if the GitProvider type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &GitProvider{}

// GitProvider Git provider information
type GitProvider struct {
	// The type of git provider
	Kind string `json:"kind"`
	// Custom git provider URL (for self-hosted instances)
	Url                  NullableString `json:"url,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _GitProvider GitProvider

// NewGitProvider instantiates a new GitProvider object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGitProvider(kind string) *GitProvider {
	this := GitProvider{}
	this.Kind = kind
	return &this
}

// NewGitProviderWithDefaults instantiates a new GitProvider object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGitProviderWithDefaults() *GitProvider {
	this := GitProvider{}
	return &this
}

// GetKind returns the Kind field value
func (o *GitProvider) GetKind() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Kind
}

// GetKindOk returns a tuple with the Kind field value
// and a boolean to check if the value has been set.
func (o *GitProvider) GetKindOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Kind, true
}

// SetKind sets field value
func (o *GitProvider) SetKind(v string) {
	o.Kind = v
}

// GetUrl returns the Url field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *GitProvider) GetUrl() string {
	if o == nil || IsNil(o.Url.Get()) {
		var ret string
		return ret
	}
	return *o.Url.Get()
}

// GetUrlOk returns a tuple with the Url field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *GitProvider) GetUrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Url.Get(), o.Url.IsSet()
}

// HasUrl returns a boolean if a field has been set.
func (o *GitProvider) HasUrl() bool {
	if o != nil && o.Url.IsSet() {
		return true
	}

	return false
}

// SetUrl gets a reference to the given NullableString and assigns it to the Url field.
func (o *GitProvider) SetUrl(v string) {
	o.Url.Set(&v)
}

// SetUrlNil sets the value for Url to be an explicit nil
func (o *GitProvider) SetUrlNil() {
	o.Url.Set(nil)
}

// UnsetUrl ensures that no value is present for Url, not even an explicit nil
func (o *GitProvider) UnsetUrl() {
	o.Url.Unset()
}

func (o GitProvider) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o GitProvider) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["kind"] = o.Kind
	if o.Url.IsSet() {
		toSerialize["url"] = o.Url.Get()
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *GitProvider) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"kind",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varGitProvider := _GitProvider{}

	err = json.Unmarshal(data, &varGitProvider)

	if err != nil {
		return err
	}

	*o = GitProvider(varGitProvider)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "kind")
		delete(additionalProperties, "url")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableGitProvider struct {
	value *GitProvider
	isSet bool
}

func (v NullableGitProvider) Get() *GitProvider {
	return v.value
}

func (v *NullableGitProvider) Set(val *GitProvider) {
	v.value = val
	v.isSet = true
}

func (v NullableGitProvider) IsSet() bool {
	return v.isSet
}

func (v *NullableGitProvider) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGitProvider(val *GitProvider) *NullableGitProvider {
	return &NullableGitProvider{value: val, isSet: true}
}

func (v NullableGitProvider) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGitProvider) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
