/*
Qovery API

- Qovery is the fastest way to deploy your full-stack apps on any Cloud provider. - ℹ️ The API is stable and still in development.

API version: 1.0.3
Contact: support+api+documentation@qovery.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package qovery

import (
	"encoding/json"
)

// InlineObject2 struct for InlineObject2
type InlineObject2 struct {
	FirstName        string         `json:"first_name"`
	LastName         string         `json:"last_name"`
	UserEmail        string         `json:"user_email"`
	TypeOfUse        string         `json:"type_of_use"`
	QoveryUsage      string         `json:"qovery_usage"`
	CompanyName      NullableString `json:"company_name,omitempty"`
	CompanySize      *string        `json:"company_size,omitempty"`
	UserRole         NullableString `json:"user_role,omitempty"`
	QoveryUsageOther NullableString `json:"qovery_usage_other,omitempty"`
	UserQuestions    NullableString `json:"user_questions,omitempty"`
	CurrentStep      NullableString `json:"current_step,omitempty"`
	DxAuth           NullableBool   `json:"dx_auth,omitempty"`
}

// NewInlineObject2 instantiates a new InlineObject2 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewInlineObject2(firstName string, lastName string, userEmail string, typeOfUse string, qoveryUsage string) *InlineObject2 {
	this := InlineObject2{}
	this.FirstName = firstName
	this.LastName = lastName
	this.UserEmail = userEmail
	this.TypeOfUse = typeOfUse
	this.QoveryUsage = qoveryUsage
	return &this
}

// NewInlineObject2WithDefaults instantiates a new InlineObject2 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewInlineObject2WithDefaults() *InlineObject2 {
	this := InlineObject2{}
	return &this
}

// GetFirstName returns the FirstName field value
func (o *InlineObject2) GetFirstName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.FirstName
}

// GetFirstNameOk returns a tuple with the FirstName field value
// and a boolean to check if the value has been set.
func (o *InlineObject2) GetFirstNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.FirstName, true
}

// SetFirstName sets field value
func (o *InlineObject2) SetFirstName(v string) {
	o.FirstName = v
}

// GetLastName returns the LastName field value
func (o *InlineObject2) GetLastName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.LastName
}

// GetLastNameOk returns a tuple with the LastName field value
// and a boolean to check if the value has been set.
func (o *InlineObject2) GetLastNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.LastName, true
}

// SetLastName sets field value
func (o *InlineObject2) SetLastName(v string) {
	o.LastName = v
}

// GetUserEmail returns the UserEmail field value
func (o *InlineObject2) GetUserEmail() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.UserEmail
}

// GetUserEmailOk returns a tuple with the UserEmail field value
// and a boolean to check if the value has been set.
func (o *InlineObject2) GetUserEmailOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.UserEmail, true
}

// SetUserEmail sets field value
func (o *InlineObject2) SetUserEmail(v string) {
	o.UserEmail = v
}

// GetTypeOfUse returns the TypeOfUse field value
func (o *InlineObject2) GetTypeOfUse() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.TypeOfUse
}

// GetTypeOfUseOk returns a tuple with the TypeOfUse field value
// and a boolean to check if the value has been set.
func (o *InlineObject2) GetTypeOfUseOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TypeOfUse, true
}

// SetTypeOfUse sets field value
func (o *InlineObject2) SetTypeOfUse(v string) {
	o.TypeOfUse = v
}

// GetQoveryUsage returns the QoveryUsage field value
func (o *InlineObject2) GetQoveryUsage() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.QoveryUsage
}

// GetQoveryUsageOk returns a tuple with the QoveryUsage field value
// and a boolean to check if the value has been set.
func (o *InlineObject2) GetQoveryUsageOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.QoveryUsage, true
}

// SetQoveryUsage sets field value
func (o *InlineObject2) SetQoveryUsage(v string) {
	o.QoveryUsage = v
}

// GetCompanyName returns the CompanyName field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *InlineObject2) GetCompanyName() string {
	if o == nil || o.CompanyName.Get() == nil {
		var ret string
		return ret
	}
	return *o.CompanyName.Get()
}

// GetCompanyNameOk returns a tuple with the CompanyName field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *InlineObject2) GetCompanyNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.CompanyName.Get(), o.CompanyName.IsSet()
}

// HasCompanyName returns a boolean if a field has been set.
func (o *InlineObject2) HasCompanyName() bool {
	if o != nil && o.CompanyName.IsSet() {
		return true
	}

	return false
}

// SetCompanyName gets a reference to the given NullableString and assigns it to the CompanyName field.
func (o *InlineObject2) SetCompanyName(v string) {
	o.CompanyName.Set(&v)
}

// SetCompanyNameNil sets the value for CompanyName to be an explicit nil
func (o *InlineObject2) SetCompanyNameNil() {
	o.CompanyName.Set(nil)
}

// UnsetCompanyName ensures that no value is present for CompanyName, not even an explicit nil
func (o *InlineObject2) UnsetCompanyName() {
	o.CompanyName.Unset()
}

// GetCompanySize returns the CompanySize field value if set, zero value otherwise.
func (o *InlineObject2) GetCompanySize() string {
	if o == nil || o.CompanySize == nil {
		var ret string
		return ret
	}
	return *o.CompanySize
}

// GetCompanySizeOk returns a tuple with the CompanySize field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineObject2) GetCompanySizeOk() (*string, bool) {
	if o == nil || o.CompanySize == nil {
		return nil, false
	}
	return o.CompanySize, true
}

// HasCompanySize returns a boolean if a field has been set.
func (o *InlineObject2) HasCompanySize() bool {
	if o != nil && o.CompanySize != nil {
		return true
	}

	return false
}

// SetCompanySize gets a reference to the given string and assigns it to the CompanySize field.
func (o *InlineObject2) SetCompanySize(v string) {
	o.CompanySize = &v
}

// GetUserRole returns the UserRole field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *InlineObject2) GetUserRole() string {
	if o == nil || o.UserRole.Get() == nil {
		var ret string
		return ret
	}
	return *o.UserRole.Get()
}

// GetUserRoleOk returns a tuple with the UserRole field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *InlineObject2) GetUserRoleOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.UserRole.Get(), o.UserRole.IsSet()
}

// HasUserRole returns a boolean if a field has been set.
func (o *InlineObject2) HasUserRole() bool {
	if o != nil && o.UserRole.IsSet() {
		return true
	}

	return false
}

// SetUserRole gets a reference to the given NullableString and assigns it to the UserRole field.
func (o *InlineObject2) SetUserRole(v string) {
	o.UserRole.Set(&v)
}

// SetUserRoleNil sets the value for UserRole to be an explicit nil
func (o *InlineObject2) SetUserRoleNil() {
	o.UserRole.Set(nil)
}

// UnsetUserRole ensures that no value is present for UserRole, not even an explicit nil
func (o *InlineObject2) UnsetUserRole() {
	o.UserRole.Unset()
}

// GetQoveryUsageOther returns the QoveryUsageOther field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *InlineObject2) GetQoveryUsageOther() string {
	if o == nil || o.QoveryUsageOther.Get() == nil {
		var ret string
		return ret
	}
	return *o.QoveryUsageOther.Get()
}

// GetQoveryUsageOtherOk returns a tuple with the QoveryUsageOther field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *InlineObject2) GetQoveryUsageOtherOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.QoveryUsageOther.Get(), o.QoveryUsageOther.IsSet()
}

// HasQoveryUsageOther returns a boolean if a field has been set.
func (o *InlineObject2) HasQoveryUsageOther() bool {
	if o != nil && o.QoveryUsageOther.IsSet() {
		return true
	}

	return false
}

// SetQoveryUsageOther gets a reference to the given NullableString and assigns it to the QoveryUsageOther field.
func (o *InlineObject2) SetQoveryUsageOther(v string) {
	o.QoveryUsageOther.Set(&v)
}

// SetQoveryUsageOtherNil sets the value for QoveryUsageOther to be an explicit nil
func (o *InlineObject2) SetQoveryUsageOtherNil() {
	o.QoveryUsageOther.Set(nil)
}

// UnsetQoveryUsageOther ensures that no value is present for QoveryUsageOther, not even an explicit nil
func (o *InlineObject2) UnsetQoveryUsageOther() {
	o.QoveryUsageOther.Unset()
}

// GetUserQuestions returns the UserQuestions field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *InlineObject2) GetUserQuestions() string {
	if o == nil || o.UserQuestions.Get() == nil {
		var ret string
		return ret
	}
	return *o.UserQuestions.Get()
}

// GetUserQuestionsOk returns a tuple with the UserQuestions field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *InlineObject2) GetUserQuestionsOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.UserQuestions.Get(), o.UserQuestions.IsSet()
}

// HasUserQuestions returns a boolean if a field has been set.
func (o *InlineObject2) HasUserQuestions() bool {
	if o != nil && o.UserQuestions.IsSet() {
		return true
	}

	return false
}

// SetUserQuestions gets a reference to the given NullableString and assigns it to the UserQuestions field.
func (o *InlineObject2) SetUserQuestions(v string) {
	o.UserQuestions.Set(&v)
}

// SetUserQuestionsNil sets the value for UserQuestions to be an explicit nil
func (o *InlineObject2) SetUserQuestionsNil() {
	o.UserQuestions.Set(nil)
}

// UnsetUserQuestions ensures that no value is present for UserQuestions, not even an explicit nil
func (o *InlineObject2) UnsetUserQuestions() {
	o.UserQuestions.Unset()
}

// GetCurrentStep returns the CurrentStep field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *InlineObject2) GetCurrentStep() string {
	if o == nil || o.CurrentStep.Get() == nil {
		var ret string
		return ret
	}
	return *o.CurrentStep.Get()
}

// GetCurrentStepOk returns a tuple with the CurrentStep field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *InlineObject2) GetCurrentStepOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.CurrentStep.Get(), o.CurrentStep.IsSet()
}

// HasCurrentStep returns a boolean if a field has been set.
func (o *InlineObject2) HasCurrentStep() bool {
	if o != nil && o.CurrentStep.IsSet() {
		return true
	}

	return false
}

// SetCurrentStep gets a reference to the given NullableString and assigns it to the CurrentStep field.
func (o *InlineObject2) SetCurrentStep(v string) {
	o.CurrentStep.Set(&v)
}

// SetCurrentStepNil sets the value for CurrentStep to be an explicit nil
func (o *InlineObject2) SetCurrentStepNil() {
	o.CurrentStep.Set(nil)
}

// UnsetCurrentStep ensures that no value is present for CurrentStep, not even an explicit nil
func (o *InlineObject2) UnsetCurrentStep() {
	o.CurrentStep.Unset()
}

// GetDxAuth returns the DxAuth field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *InlineObject2) GetDxAuth() bool {
	if o == nil || o.DxAuth.Get() == nil {
		var ret bool
		return ret
	}
	return *o.DxAuth.Get()
}

// GetDxAuthOk returns a tuple with the DxAuth field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *InlineObject2) GetDxAuthOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.DxAuth.Get(), o.DxAuth.IsSet()
}

// HasDxAuth returns a boolean if a field has been set.
func (o *InlineObject2) HasDxAuth() bool {
	if o != nil && o.DxAuth.IsSet() {
		return true
	}

	return false
}

// SetDxAuth gets a reference to the given NullableBool and assigns it to the DxAuth field.
func (o *InlineObject2) SetDxAuth(v bool) {
	o.DxAuth.Set(&v)
}

// SetDxAuthNil sets the value for DxAuth to be an explicit nil
func (o *InlineObject2) SetDxAuthNil() {
	o.DxAuth.Set(nil)
}

// UnsetDxAuth ensures that no value is present for DxAuth, not even an explicit nil
func (o *InlineObject2) UnsetDxAuth() {
	o.DxAuth.Unset()
}

func (o InlineObject2) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["first_name"] = o.FirstName
	}
	if true {
		toSerialize["last_name"] = o.LastName
	}
	if true {
		toSerialize["user_email"] = o.UserEmail
	}
	if true {
		toSerialize["type_of_use"] = o.TypeOfUse
	}
	if true {
		toSerialize["qovery_usage"] = o.QoveryUsage
	}
	if o.CompanyName.IsSet() {
		toSerialize["company_name"] = o.CompanyName.Get()
	}
	if o.CompanySize != nil {
		toSerialize["company_size"] = o.CompanySize
	}
	if o.UserRole.IsSet() {
		toSerialize["user_role"] = o.UserRole.Get()
	}
	if o.QoveryUsageOther.IsSet() {
		toSerialize["qovery_usage_other"] = o.QoveryUsageOther.Get()
	}
	if o.UserQuestions.IsSet() {
		toSerialize["user_questions"] = o.UserQuestions.Get()
	}
	if o.CurrentStep.IsSet() {
		toSerialize["current_step"] = o.CurrentStep.Get()
	}
	if o.DxAuth.IsSet() {
		toSerialize["dx_auth"] = o.DxAuth.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableInlineObject2 struct {
	value *InlineObject2
	isSet bool
}

func (v NullableInlineObject2) Get() *InlineObject2 {
	return v.value
}

func (v *NullableInlineObject2) Set(val *InlineObject2) {
	v.value = val
	v.isSet = true
}

func (v NullableInlineObject2) IsSet() bool {
	return v.isSet
}

func (v *NullableInlineObject2) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInlineObject2(val *InlineObject2) *NullableInlineObject2 {
	return &NullableInlineObject2{value: val, isSet: true}
}

func (v NullableInlineObject2) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInlineObject2) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
