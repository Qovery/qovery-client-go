/*
Qovery API

- Qovery is the fastest way to deploy your full-stack apps on any Cloud provider. - ℹ️ The API is stable and still in development.

API version: 1.0.4
Contact: support+api+documentation@qovery.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package qovery

import (
	"encoding/json"
	"fmt"
)

// HelmResponseAllOfPorts - struct for HelmResponseAllOfPorts
type HelmResponseAllOfPorts struct {
	HelmPortResponseWithServiceName      *HelmPortResponseWithServiceName
	HelmPortResponseWithServiceSelectors *HelmPortResponseWithServiceSelectors
}

// HelmPortResponseWithServiceNameAsHelmResponseAllOfPorts is a convenience function that returns HelmPortResponseWithServiceName wrapped in HelmResponseAllOfPorts
func HelmPortResponseWithServiceNameAsHelmResponseAllOfPorts(v *HelmPortResponseWithServiceName) HelmResponseAllOfPorts {
	return HelmResponseAllOfPorts{
		HelmPortResponseWithServiceName: v,
	}
}

// HelmPortResponseWithServiceSelectorsAsHelmResponseAllOfPorts is a convenience function that returns HelmPortResponseWithServiceSelectors wrapped in HelmResponseAllOfPorts
func HelmPortResponseWithServiceSelectorsAsHelmResponseAllOfPorts(v *HelmPortResponseWithServiceSelectors) HelmResponseAllOfPorts {
	return HelmResponseAllOfPorts{
		HelmPortResponseWithServiceSelectors: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *HelmResponseAllOfPorts) UnmarshalJSON(data []byte) error {
	var err error
	// use discriminator value to speed up the lookup
	var jsonDict map[string]interface{}
	err = newStrictDecoder(data).Decode(&jsonDict)
	if err != nil {
		return fmt.Errorf("failed to unmarshal JSON into map for the discriminator lookup")
	}

	// check if the discriminator value is 'SERVICE_NAME'
	if jsonDict["port_type"] == "SERVICE_NAME" {
		// try to unmarshal JSON data into HelmPortResponseWithServiceName
		err = json.Unmarshal(data, &dst.HelmPortResponseWithServiceName)
		if err == nil {
			return nil // data stored in dst.HelmPortResponseWithServiceName, return on the first match
		} else {
			dst.HelmPortResponseWithServiceName = nil
			return fmt.Errorf("failed to unmarshal HelmResponseAllOfPorts as HelmPortResponseWithServiceName: %s", err.Error())
		}
	}

	// check if the discriminator value is 'SERVICE_SELECTORS'
	if jsonDict["port_type"] == "SERVICE_SELECTORS" {
		// try to unmarshal JSON data into HelmPortResponseWithServiceSelectors
		err = json.Unmarshal(data, &dst.HelmPortResponseWithServiceSelectors)
		if err == nil {
			return nil // data stored in dst.HelmPortResponseWithServiceSelectors, return on the first match
		} else {
			dst.HelmPortResponseWithServiceSelectors = nil
			return fmt.Errorf("failed to unmarshal HelmResponseAllOfPorts as HelmPortResponseWithServiceSelectors: %s", err.Error())
		}
	}

	// check if the discriminator value is 'HelmPortResponseWithServiceName'
	if jsonDict["port_type"] == "HelmPortResponseWithServiceName" {
		// try to unmarshal JSON data into HelmPortResponseWithServiceName
		err = json.Unmarshal(data, &dst.HelmPortResponseWithServiceName)
		if err == nil {
			return nil // data stored in dst.HelmPortResponseWithServiceName, return on the first match
		} else {
			dst.HelmPortResponseWithServiceName = nil
			return fmt.Errorf("failed to unmarshal HelmResponseAllOfPorts as HelmPortResponseWithServiceName: %s", err.Error())
		}
	}

	// check if the discriminator value is 'HelmPortResponseWithServiceSelectors'
	if jsonDict["port_type"] == "HelmPortResponseWithServiceSelectors" {
		// try to unmarshal JSON data into HelmPortResponseWithServiceSelectors
		err = json.Unmarshal(data, &dst.HelmPortResponseWithServiceSelectors)
		if err == nil {
			return nil // data stored in dst.HelmPortResponseWithServiceSelectors, return on the first match
		} else {
			dst.HelmPortResponseWithServiceSelectors = nil
			return fmt.Errorf("failed to unmarshal HelmResponseAllOfPorts as HelmPortResponseWithServiceSelectors: %s", err.Error())
		}
	}

	return nil
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src HelmResponseAllOfPorts) MarshalJSON() ([]byte, error) {
	if src.HelmPortResponseWithServiceName != nil {
		return json.Marshal(&src.HelmPortResponseWithServiceName)
	}

	if src.HelmPortResponseWithServiceSelectors != nil {
		return json.Marshal(&src.HelmPortResponseWithServiceSelectors)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *HelmResponseAllOfPorts) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.HelmPortResponseWithServiceName != nil {
		return obj.HelmPortResponseWithServiceName
	}

	if obj.HelmPortResponseWithServiceSelectors != nil {
		return obj.HelmPortResponseWithServiceSelectors
	}

	// all schemas are nil
	return nil
}

type NullableHelmResponseAllOfPorts struct {
	value *HelmResponseAllOfPorts
	isSet bool
}

func (v NullableHelmResponseAllOfPorts) Get() *HelmResponseAllOfPorts {
	return v.value
}

func (v *NullableHelmResponseAllOfPorts) Set(val *HelmResponseAllOfPorts) {
	v.value = val
	v.isSet = true
}

func (v NullableHelmResponseAllOfPorts) IsSet() bool {
	return v.isSet
}

func (v *NullableHelmResponseAllOfPorts) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableHelmResponseAllOfPorts(val *HelmResponseAllOfPorts) *NullableHelmResponseAllOfPorts {
	return &NullableHelmResponseAllOfPorts{value: val, isSet: true}
}

func (v NullableHelmResponseAllOfPorts) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableHelmResponseAllOfPorts) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
