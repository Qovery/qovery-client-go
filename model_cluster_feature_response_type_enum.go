/*
Qovery API

- Qovery is the fastest way to deploy your full-stack apps on any Cloud provider. - ℹ️ The API is stable and still in development.

API version: 1.0.3
Contact: support+api+documentation@qovery.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package qovery

import (
	"encoding/json"
	"fmt"
)

// ClusterFeatureResponseTypeEnum the model 'ClusterFeatureResponseTypeEnum'
type ClusterFeatureResponseTypeEnum string

// List of ClusterFeatureResponseTypeEnum
const (
	CLUSTERFEATURERESPONSETYPEENUM_STRING                    ClusterFeatureResponseTypeEnum = "STRING"
	CLUSTERFEATURERESPONSETYPEENUM_BOOLEAN                   ClusterFeatureResponseTypeEnum = "BOOLEAN"
	CLUSTERFEATURERESPONSETYPEENUM_AWS_USER_PROVIDED_NETWORK ClusterFeatureResponseTypeEnum = "AWS_USER_PROVIDED_NETWORK"
	CLUSTERFEATURERESPONSETYPEENUM_GCP_USER_PROVIDED_NETWORK ClusterFeatureResponseTypeEnum = "GCP_USER_PROVIDED_NETWORK"
	CLUSTERFEATURERESPONSETYPEENUM_KARPENTER                 ClusterFeatureResponseTypeEnum = "KARPENTER"
)

// All allowed values of ClusterFeatureResponseTypeEnum enum
var AllowedClusterFeatureResponseTypeEnumEnumValues = []ClusterFeatureResponseTypeEnum{
	"STRING",
	"BOOLEAN",
	"AWS_USER_PROVIDED_NETWORK",
	"GCP_USER_PROVIDED_NETWORK",
	"KARPENTER",
}

func (v *ClusterFeatureResponseTypeEnum) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ClusterFeatureResponseTypeEnum(value)
	for _, existing := range AllowedClusterFeatureResponseTypeEnumEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ClusterFeatureResponseTypeEnum", value)
}

// NewClusterFeatureResponseTypeEnumFromValue returns a pointer to a valid ClusterFeatureResponseTypeEnum
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewClusterFeatureResponseTypeEnumFromValue(v string) (*ClusterFeatureResponseTypeEnum, error) {
	ev := ClusterFeatureResponseTypeEnum(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ClusterFeatureResponseTypeEnum: valid values are %v", v, AllowedClusterFeatureResponseTypeEnumEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ClusterFeatureResponseTypeEnum) IsValid() bool {
	for _, existing := range AllowedClusterFeatureResponseTypeEnumEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to ClusterFeatureResponseTypeEnum value
func (v ClusterFeatureResponseTypeEnum) Ptr() *ClusterFeatureResponseTypeEnum {
	return &v
}

type NullableClusterFeatureResponseTypeEnum struct {
	value *ClusterFeatureResponseTypeEnum
	isSet bool
}

func (v NullableClusterFeatureResponseTypeEnum) Get() *ClusterFeatureResponseTypeEnum {
	return v.value
}

func (v *NullableClusterFeatureResponseTypeEnum) Set(val *ClusterFeatureResponseTypeEnum) {
	v.value = val
	v.isSet = true
}

func (v NullableClusterFeatureResponseTypeEnum) IsSet() bool {
	return v.isSet
}

func (v *NullableClusterFeatureResponseTypeEnum) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableClusterFeatureResponseTypeEnum(val *ClusterFeatureResponseTypeEnum) *NullableClusterFeatureResponseTypeEnum {
	return &NullableClusterFeatureResponseTypeEnum{value: val, isSet: true}
}

func (v NullableClusterFeatureResponseTypeEnum) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableClusterFeatureResponseTypeEnum) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
