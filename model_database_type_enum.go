/*
Qovery API

- Qovery is the fastest way to deploy your full-stack apps on any Cloud provider. - ℹ️ The API is stable and still in development.

API version: 1.0.3
Contact: support+api+documentation@qovery.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package qovery

import (
	"encoding/json"
	"fmt"
)

// DatabaseTypeEnum the model 'DatabaseTypeEnum'
type DatabaseTypeEnum string

// List of DatabaseTypeEnum
const (
	DATABASETYPEENUM_MONGODB    DatabaseTypeEnum = "MONGODB"
	DATABASETYPEENUM_MYSQL      DatabaseTypeEnum = "MYSQL"
	DATABASETYPEENUM_POSTGRESQL DatabaseTypeEnum = "POSTGRESQL"
	DATABASETYPEENUM_REDIS      DatabaseTypeEnum = "REDIS"
)

// All allowed values of DatabaseTypeEnum enum
var AllowedDatabaseTypeEnumEnumValues = []DatabaseTypeEnum{
	"MONGODB",
	"MYSQL",
	"POSTGRESQL",
	"REDIS",
}

func (v *DatabaseTypeEnum) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := DatabaseTypeEnum(value)
	for _, existing := range AllowedDatabaseTypeEnumEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid DatabaseTypeEnum", value)
}

// NewDatabaseTypeEnumFromValue returns a pointer to a valid DatabaseTypeEnum
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewDatabaseTypeEnumFromValue(v string) (*DatabaseTypeEnum, error) {
	ev := DatabaseTypeEnum(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for DatabaseTypeEnum: valid values are %v", v, AllowedDatabaseTypeEnumEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v DatabaseTypeEnum) IsValid() bool {
	for _, existing := range AllowedDatabaseTypeEnumEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to DatabaseTypeEnum value
func (v DatabaseTypeEnum) Ptr() *DatabaseTypeEnum {
	return &v
}

type NullableDatabaseTypeEnum struct {
	value *DatabaseTypeEnum
	isSet bool
}

func (v NullableDatabaseTypeEnum) Get() *DatabaseTypeEnum {
	return v.value
}

func (v *NullableDatabaseTypeEnum) Set(val *DatabaseTypeEnum) {
	v.value = val
	v.isSet = true
}

func (v NullableDatabaseTypeEnum) IsSet() bool {
	return v.isSet
}

func (v *NullableDatabaseTypeEnum) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDatabaseTypeEnum(val *DatabaseTypeEnum) *NullableDatabaseTypeEnum {
	return &NullableDatabaseTypeEnum{value: val, isSet: true}
}

func (v NullableDatabaseTypeEnum) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDatabaseTypeEnum) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
