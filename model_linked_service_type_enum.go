/*
Qovery API

- Qovery is the fastest way to deploy your full-stack apps on any Cloud provider. - ℹ️ The API is stable and still in development.

API version: 1.0.3
Contact: support+api+documentation@qovery.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package qovery

import (
	"encoding/json"
	"fmt"
)

// LinkedServiceTypeEnum type of the service (application, database, job, gateway...)
type LinkedServiceTypeEnum string

// List of LinkedServiceTypeEnum
const (
	LINKEDSERVICETYPEENUM_APPLICATION LinkedServiceTypeEnum = "APPLICATION"
	LINKEDSERVICETYPEENUM_CONTAINER   LinkedServiceTypeEnum = "CONTAINER"
	LINKEDSERVICETYPEENUM_DATABASE    LinkedServiceTypeEnum = "DATABASE"
	LINKEDSERVICETYPEENUM_JOB         LinkedServiceTypeEnum = "JOB"
	LINKEDSERVICETYPEENUM_HELM        LinkedServiceTypeEnum = "HELM"
	LINKEDSERVICETYPEENUM_TERRAFORM   LinkedServiceTypeEnum = "TERRAFORM"
)

// All allowed values of LinkedServiceTypeEnum enum
var AllowedLinkedServiceTypeEnumEnumValues = []LinkedServiceTypeEnum{
	"APPLICATION",
	"CONTAINER",
	"DATABASE",
	"JOB",
	"HELM",
	"TERRAFORM",
}

func (v *LinkedServiceTypeEnum) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := LinkedServiceTypeEnum(value)
	for _, existing := range AllowedLinkedServiceTypeEnumEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid LinkedServiceTypeEnum", value)
}

// NewLinkedServiceTypeEnumFromValue returns a pointer to a valid LinkedServiceTypeEnum
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewLinkedServiceTypeEnumFromValue(v string) (*LinkedServiceTypeEnum, error) {
	ev := LinkedServiceTypeEnum(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for LinkedServiceTypeEnum: valid values are %v", v, AllowedLinkedServiceTypeEnumEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v LinkedServiceTypeEnum) IsValid() bool {
	for _, existing := range AllowedLinkedServiceTypeEnumEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to LinkedServiceTypeEnum value
func (v LinkedServiceTypeEnum) Ptr() *LinkedServiceTypeEnum {
	return &v
}

type NullableLinkedServiceTypeEnum struct {
	value *LinkedServiceTypeEnum
	isSet bool
}

func (v NullableLinkedServiceTypeEnum) Get() *LinkedServiceTypeEnum {
	return v.value
}

func (v *NullableLinkedServiceTypeEnum) Set(val *LinkedServiceTypeEnum) {
	v.value = val
	v.isSet = true
}

func (v NullableLinkedServiceTypeEnum) IsSet() bool {
	return v.isSet
}

func (v *NullableLinkedServiceTypeEnum) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLinkedServiceTypeEnum(val *LinkedServiceTypeEnum) *NullableLinkedServiceTypeEnum {
	return &NullableLinkedServiceTypeEnum{value: val, isSet: true}
}

func (v NullableLinkedServiceTypeEnum) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLinkedServiceTypeEnum) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
