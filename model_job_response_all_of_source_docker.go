/*
Qovery API

- Qovery is the fastest way to deploy your full-stack apps on any Cloud provider. - ℹ️ The API is stable and still in development.

API version: 1.0.3
Contact: support+api+documentation@qovery.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package qovery

import (
	"encoding/json"
)

// JobResponseAllOfSourceDocker struct for JobResponseAllOfSourceDocker
type JobResponseAllOfSourceDocker struct {
	// The path of the associated Dockerfile. Only if you are using build_mode = DOCKER
	DockerfilePath NullableString            `json:"dockerfile_path,omitempty"`
	GitRepository  *ApplicationGitRepository `json:"git_repository,omitempty"`
}

// NewJobResponseAllOfSourceDocker instantiates a new JobResponseAllOfSourceDocker object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewJobResponseAllOfSourceDocker() *JobResponseAllOfSourceDocker {
	this := JobResponseAllOfSourceDocker{}
	return &this
}

// NewJobResponseAllOfSourceDockerWithDefaults instantiates a new JobResponseAllOfSourceDocker object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewJobResponseAllOfSourceDockerWithDefaults() *JobResponseAllOfSourceDocker {
	this := JobResponseAllOfSourceDocker{}
	return &this
}

// GetDockerfilePath returns the DockerfilePath field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *JobResponseAllOfSourceDocker) GetDockerfilePath() string {
	if o == nil || o.DockerfilePath.Get() == nil {
		var ret string
		return ret
	}
	return *o.DockerfilePath.Get()
}

// GetDockerfilePathOk returns a tuple with the DockerfilePath field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *JobResponseAllOfSourceDocker) GetDockerfilePathOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.DockerfilePath.Get(), o.DockerfilePath.IsSet()
}

// HasDockerfilePath returns a boolean if a field has been set.
func (o *JobResponseAllOfSourceDocker) HasDockerfilePath() bool {
	if o != nil && o.DockerfilePath.IsSet() {
		return true
	}

	return false
}

// SetDockerfilePath gets a reference to the given NullableString and assigns it to the DockerfilePath field.
func (o *JobResponseAllOfSourceDocker) SetDockerfilePath(v string) {
	o.DockerfilePath.Set(&v)
}

// SetDockerfilePathNil sets the value for DockerfilePath to be an explicit nil
func (o *JobResponseAllOfSourceDocker) SetDockerfilePathNil() {
	o.DockerfilePath.Set(nil)
}

// UnsetDockerfilePath ensures that no value is present for DockerfilePath, not even an explicit nil
func (o *JobResponseAllOfSourceDocker) UnsetDockerfilePath() {
	o.DockerfilePath.Unset()
}

// GetGitRepository returns the GitRepository field value if set, zero value otherwise.
func (o *JobResponseAllOfSourceDocker) GetGitRepository() ApplicationGitRepository {
	if o == nil || o.GitRepository == nil {
		var ret ApplicationGitRepository
		return ret
	}
	return *o.GitRepository
}

// GetGitRepositoryOk returns a tuple with the GitRepository field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JobResponseAllOfSourceDocker) GetGitRepositoryOk() (*ApplicationGitRepository, bool) {
	if o == nil || o.GitRepository == nil {
		return nil, false
	}
	return o.GitRepository, true
}

// HasGitRepository returns a boolean if a field has been set.
func (o *JobResponseAllOfSourceDocker) HasGitRepository() bool {
	if o != nil && o.GitRepository != nil {
		return true
	}

	return false
}

// SetGitRepository gets a reference to the given ApplicationGitRepository and assigns it to the GitRepository field.
func (o *JobResponseAllOfSourceDocker) SetGitRepository(v ApplicationGitRepository) {
	o.GitRepository = &v
}

func (o JobResponseAllOfSourceDocker) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.DockerfilePath.IsSet() {
		toSerialize["dockerfile_path"] = o.DockerfilePath.Get()
	}
	if o.GitRepository != nil {
		toSerialize["git_repository"] = o.GitRepository
	}
	return json.Marshal(toSerialize)
}

type NullableJobResponseAllOfSourceDocker struct {
	value *JobResponseAllOfSourceDocker
	isSet bool
}

func (v NullableJobResponseAllOfSourceDocker) Get() *JobResponseAllOfSourceDocker {
	return v.value
}

func (v *NullableJobResponseAllOfSourceDocker) Set(val *JobResponseAllOfSourceDocker) {
	v.value = val
	v.isSet = true
}

func (v NullableJobResponseAllOfSourceDocker) IsSet() bool {
	return v.isSet
}

func (v *NullableJobResponseAllOfSourceDocker) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableJobResponseAllOfSourceDocker(val *JobResponseAllOfSourceDocker) *NullableJobResponseAllOfSourceDocker {
	return &NullableJobResponseAllOfSourceDocker{value: val, isSet: true}
}

func (v NullableJobResponseAllOfSourceDocker) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableJobResponseAllOfSourceDocker) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
