/*
Qovery API

- Qovery is the fastest way to deploy your full-stack apps on any Cloud provider. - ℹ️ The API is stable and still in development.

API version: 1.0.3
Contact: support+api+documentation@qovery.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package qovery

import (
	"encoding/json"
)

// checks if the MetricsParameters type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &MetricsParameters{}

// MetricsParameters struct for MetricsParameters
type MetricsParameters struct {
	Enabled              *bool                           `json:"enabled,omitempty"`
	Configuration        *MetricsParametersConfiguration `json:"configuration,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _MetricsParameters MetricsParameters

// NewMetricsParameters instantiates a new MetricsParameters object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMetricsParameters() *MetricsParameters {
	this := MetricsParameters{}
	return &this
}

// NewMetricsParametersWithDefaults instantiates a new MetricsParameters object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMetricsParametersWithDefaults() *MetricsParameters {
	this := MetricsParameters{}
	return &this
}

// GetEnabled returns the Enabled field value if set, zero value otherwise.
func (o *MetricsParameters) GetEnabled() bool {
	if o == nil || IsNil(o.Enabled) {
		var ret bool
		return ret
	}
	return *o.Enabled
}

// GetEnabledOk returns a tuple with the Enabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MetricsParameters) GetEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.Enabled) {
		return nil, false
	}
	return o.Enabled, true
}

// HasEnabled returns a boolean if a field has been set.
func (o *MetricsParameters) HasEnabled() bool {
	if o != nil && !IsNil(o.Enabled) {
		return true
	}

	return false
}

// SetEnabled gets a reference to the given bool and assigns it to the Enabled field.
func (o *MetricsParameters) SetEnabled(v bool) {
	o.Enabled = &v
}

// GetConfiguration returns the Configuration field value if set, zero value otherwise.
func (o *MetricsParameters) GetConfiguration() MetricsParametersConfiguration {
	if o == nil || IsNil(o.Configuration) {
		var ret MetricsParametersConfiguration
		return ret
	}
	return *o.Configuration
}

// GetConfigurationOk returns a tuple with the Configuration field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MetricsParameters) GetConfigurationOk() (*MetricsParametersConfiguration, bool) {
	if o == nil || IsNil(o.Configuration) {
		return nil, false
	}
	return o.Configuration, true
}

// HasConfiguration returns a boolean if a field has been set.
func (o *MetricsParameters) HasConfiguration() bool {
	if o != nil && !IsNil(o.Configuration) {
		return true
	}

	return false
}

// SetConfiguration gets a reference to the given MetricsParametersConfiguration and assigns it to the Configuration field.
func (o *MetricsParameters) SetConfiguration(v MetricsParametersConfiguration) {
	o.Configuration = &v
}

func (o MetricsParameters) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MetricsParameters) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Enabled) {
		toSerialize["enabled"] = o.Enabled
	}
	if !IsNil(o.Configuration) {
		toSerialize["configuration"] = o.Configuration
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *MetricsParameters) UnmarshalJSON(data []byte) (err error) {
	varMetricsParameters := _MetricsParameters{}

	err = json.Unmarshal(data, &varMetricsParameters)

	if err != nil {
		return err
	}

	*o = MetricsParameters(varMetricsParameters)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "enabled")
		delete(additionalProperties, "configuration")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableMetricsParameters struct {
	value *MetricsParameters
	isSet bool
}

func (v NullableMetricsParameters) Get() *MetricsParameters {
	return v.value
}

func (v *NullableMetricsParameters) Set(val *MetricsParameters) {
	v.value = val
	v.isSet = true
}

func (v NullableMetricsParameters) IsSet() bool {
	return v.isSet
}

func (v *NullableMetricsParameters) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMetricsParameters(val *MetricsParameters) *NullableMetricsParameters {
	return &NullableMetricsParameters{value: val, isSet: true}
}

func (v NullableMetricsParameters) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMetricsParameters) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
