/*
Qovery API

- Qovery is the fastest way to deploy your full-stack apps on any Cloud provider. - ℹ️ The API is stable and still in development.

API version: 1.0.3
Contact: support+api+documentation@qovery.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package qovery

import (
	"encoding/json"
	"fmt"
)

// PortProtocolEnum the model 'PortProtocolEnum'
type PortProtocolEnum string

// List of PortProtocolEnum
const (
	HTTPS PortProtocolEnum = "HTTPS"
	HTTP  PortProtocolEnum = "HTTP"
	TCP   PortProtocolEnum = "TCP"
	UDP   PortProtocolEnum = "UDP"
)

// All allowed values of PortProtocolEnum enum
var AllowedPortProtocolEnumEnumValues = []PortProtocolEnum{
	"HTTPS",
	"HTTP",
	"TCP",
	"UDP",
}

func (v *PortProtocolEnum) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := PortProtocolEnum(value)
	for _, existing := range AllowedPortProtocolEnumEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid PortProtocolEnum", value)
}

// NewPortProtocolEnumFromValue returns a pointer to a valid PortProtocolEnum
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewPortProtocolEnumFromValue(v string) (*PortProtocolEnum, error) {
	ev := PortProtocolEnum(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for PortProtocolEnum: valid values are %v", v, AllowedPortProtocolEnumEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v PortProtocolEnum) IsValid() bool {
	for _, existing := range AllowedPortProtocolEnumEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to PortProtocolEnum value
func (v PortProtocolEnum) Ptr() *PortProtocolEnum {
	return &v
}

type NullablePortProtocolEnum struct {
	value *PortProtocolEnum
	isSet bool
}

func (v NullablePortProtocolEnum) Get() *PortProtocolEnum {
	return v.value
}

func (v *NullablePortProtocolEnum) Set(val *PortProtocolEnum) {
	v.value = val
	v.isSet = true
}

func (v NullablePortProtocolEnum) IsSet() bool {
	return v.isSet
}

func (v *NullablePortProtocolEnum) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePortProtocolEnum(val *PortProtocolEnum) *NullablePortProtocolEnum {
	return &NullablePortProtocolEnum{value: val, isSet: true}
}

func (v NullablePortProtocolEnum) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePortProtocolEnum) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
