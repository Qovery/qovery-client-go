/*
Qovery API

- Qovery is the fastest way to deploy your full-stack apps on any Cloud provider. - ℹ️ The API is stable and still in development.

API version: 1.0.1
Contact: support+api+documentation@qovery.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package qovery

import (
	"encoding/json"
	"time"
)

// SecretResponse struct for SecretResponse
type SecretResponse struct {
	// key is case sensitive
	Key              *string           `json:"key,omitempty"`
	OverriddenSecret *OverriddenSecret `json:"overridden_secret,omitempty"`
	AliasedSecret    *AliasedSecret    `json:"aliased_secret,omitempty"`
	Scope            string            `json:"scope"`
	Id               string            `json:"id"`
	CreatedAt        time.Time         `json:"created_at"`
	UpdatedAt        *time.Time        `json:"updated_at,omitempty"`
}

// NewSecretResponse instantiates a new SecretResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSecretResponse(scope string, id string, createdAt time.Time) *SecretResponse {
	this := SecretResponse{}
	this.Id = id
	this.CreatedAt = createdAt
	return &this
}

// NewSecretResponseWithDefaults instantiates a new SecretResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSecretResponseWithDefaults() *SecretResponse {
	this := SecretResponse{}
	return &this
}

// GetKey returns the Key field value if set, zero value otherwise.
func (o *SecretResponse) GetKey() string {
	if o == nil || o.Key == nil {
		var ret string
		return ret
	}
	return *o.Key
}

// GetKeyOk returns a tuple with the Key field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SecretResponse) GetKeyOk() (*string, bool) {
	if o == nil || o.Key == nil {
		return nil, false
	}
	return o.Key, true
}

// HasKey returns a boolean if a field has been set.
func (o *SecretResponse) HasKey() bool {
	if o != nil && o.Key != nil {
		return true
	}

	return false
}

// SetKey gets a reference to the given string and assigns it to the Key field.
func (o *SecretResponse) SetKey(v string) {
	o.Key = &v
}

// GetOverriddenSecret returns the OverriddenSecret field value if set, zero value otherwise.
func (o *SecretResponse) GetOverriddenSecret() OverriddenSecret {
	if o == nil || o.OverriddenSecret == nil {
		var ret OverriddenSecret
		return ret
	}
	return *o.OverriddenSecret
}

// GetOverriddenSecretOk returns a tuple with the OverriddenSecret field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SecretResponse) GetOverriddenSecretOk() (*OverriddenSecret, bool) {
	if o == nil || o.OverriddenSecret == nil {
		return nil, false
	}
	return o.OverriddenSecret, true
}

// HasOverriddenSecret returns a boolean if a field has been set.
func (o *SecretResponse) HasOverriddenSecret() bool {
	if o != nil && o.OverriddenSecret != nil {
		return true
	}

	return false
}

// SetOverriddenSecret gets a reference to the given OverriddenSecret and assigns it to the OverriddenSecret field.
func (o *SecretResponse) SetOverriddenSecret(v OverriddenSecret) {
	o.OverriddenSecret = &v
}

// GetAliasedSecret returns the AliasedSecret field value if set, zero value otherwise.
func (o *SecretResponse) GetAliasedSecret() AliasedSecret {
	if o == nil || o.AliasedSecret == nil {
		var ret AliasedSecret
		return ret
	}
	return *o.AliasedSecret
}

// GetAliasedSecretOk returns a tuple with the AliasedSecret field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SecretResponse) GetAliasedSecretOk() (*AliasedSecret, bool) {
	if o == nil || o.AliasedSecret == nil {
		return nil, false
	}
	return o.AliasedSecret, true
}

// HasAliasedSecret returns a boolean if a field has been set.
func (o *SecretResponse) HasAliasedSecret() bool {
	if o != nil && o.AliasedSecret != nil {
		return true
	}

	return false
}

// SetAliasedSecret gets a reference to the given AliasedSecret and assigns it to the AliasedSecret field.
func (o *SecretResponse) SetAliasedSecret(v AliasedSecret) {
	o.AliasedSecret = &v
}

// GetScope returns the Scope field value
func (o *SecretResponse) GetScope() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Scope
}

// GetScopeOk returns a tuple with the Scope field value
// and a boolean to check if the value has been set.
func (o *SecretResponse) GetScopeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Scope, true
}

// SetScope sets field value
func (o *SecretResponse) SetScope(v string) {
	o.Scope = v
}

// GetId returns the Id field value
func (o *SecretResponse) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *SecretResponse) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *SecretResponse) SetId(v string) {
	o.Id = v
}

// GetCreatedAt returns the CreatedAt field value
func (o *SecretResponse) GetCreatedAt() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value
// and a boolean to check if the value has been set.
func (o *SecretResponse) GetCreatedAtOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CreatedAt, true
}

// SetCreatedAt sets field value
func (o *SecretResponse) SetCreatedAt(v time.Time) {
	o.CreatedAt = v
}

// GetUpdatedAt returns the UpdatedAt field value if set, zero value otherwise.
func (o *SecretResponse) GetUpdatedAt() time.Time {
	if o == nil || o.UpdatedAt == nil {
		var ret time.Time
		return ret
	}
	return *o.UpdatedAt
}

// GetUpdatedAtOk returns a tuple with the UpdatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SecretResponse) GetUpdatedAtOk() (*time.Time, bool) {
	if o == nil || o.UpdatedAt == nil {
		return nil, false
	}
	return o.UpdatedAt, true
}

// HasUpdatedAt returns a boolean if a field has been set.
func (o *SecretResponse) HasUpdatedAt() bool {
	if o != nil && o.UpdatedAt != nil {
		return true
	}

	return false
}

// SetUpdatedAt gets a reference to the given time.Time and assigns it to the UpdatedAt field.
func (o *SecretResponse) SetUpdatedAt(v time.Time) {
	o.UpdatedAt = &v
}

func (o SecretResponse) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Key != nil {
		toSerialize["key"] = o.Key
	}
	if o.OverriddenSecret != nil {
		toSerialize["overridden_secret"] = o.OverriddenSecret
	}
	if o.AliasedSecret != nil {
		toSerialize["aliased_secret"] = o.AliasedSecret
	}
	if true {
		toSerialize["scope"] = o.Scope
	}
	if true {
		toSerialize["id"] = o.Id
	}
	if true {
		toSerialize["created_at"] = o.CreatedAt
	}
	if o.UpdatedAt != nil {
		toSerialize["updated_at"] = o.UpdatedAt
	}
	return json.Marshal(toSerialize)
}

type NullableSecretResponse struct {
	value *SecretResponse
	isSet bool
}

func (v NullableSecretResponse) Get() *SecretResponse {
	return v.value
}

func (v *NullableSecretResponse) Set(val *SecretResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableSecretResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableSecretResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSecretResponse(val *SecretResponse) *NullableSecretResponse {
	return &NullableSecretResponse{value: val, isSet: true}
}

func (v NullableSecretResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSecretResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
