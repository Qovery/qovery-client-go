/*
Qovery API

- Qovery is the fastest way to deploy your full-stack apps on any Cloud provider. - ℹ️ The API is stable and still in development.

API version: 1.0.4
Contact: support+api+documentation@qovery.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package qovery

import (
	"encoding/json"
	"fmt"
)

// ClusterDeleteMode Indicates the mode to apply on cluster deletion   **\"hard delete\"** means that we delete directly from our database, this is different from a **\"trigger delete\"** that cleans the resource - `DEFAULT`: this is the normal way, trigger delete the cluster only if no environment linked to this cluster remains - `DELETE_CLUSTER_AND_QOVERY_CONFIG`: hard delete environments linked to this cluster then trigger delete the cluster - `DELETE_QOVERY_CONFIG`: ⚠️ ⚠️ ⚠️ hard delete environments linked to this cluster then hard delete the cluster - whole cluster ressources **are not deleted** on our side and must be deleted on your side
type ClusterDeleteMode string

// List of ClusterDeleteMode
const (
	CLUSTERDELETEMODE_DEFAULT                          ClusterDeleteMode = "DEFAULT"
	CLUSTERDELETEMODE_DELETE_CLUSTER_AND_QOVERY_CONFIG ClusterDeleteMode = "DELETE_CLUSTER_AND_QOVERY_CONFIG"
	CLUSTERDELETEMODE_DELETE_QOVERY_CONFIG             ClusterDeleteMode = "DELETE_QOVERY_CONFIG"
)

// All allowed values of ClusterDeleteMode enum
var AllowedClusterDeleteModeEnumValues = []ClusterDeleteMode{
	"DEFAULT",
	"DELETE_CLUSTER_AND_QOVERY_CONFIG",
	"DELETE_QOVERY_CONFIG",
}

func (v *ClusterDeleteMode) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ClusterDeleteMode(value)
	for _, existing := range AllowedClusterDeleteModeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ClusterDeleteMode", value)
}

// NewClusterDeleteModeFromValue returns a pointer to a valid ClusterDeleteMode
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewClusterDeleteModeFromValue(v string) (*ClusterDeleteMode, error) {
	ev := ClusterDeleteMode(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ClusterDeleteMode: valid values are %v", v, AllowedClusterDeleteModeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ClusterDeleteMode) IsValid() bool {
	for _, existing := range AllowedClusterDeleteModeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to ClusterDeleteMode value
func (v ClusterDeleteMode) Ptr() *ClusterDeleteMode {
	return &v
}

type NullableClusterDeleteMode struct {
	value *ClusterDeleteMode
	isSet bool
}

func (v NullableClusterDeleteMode) Get() *ClusterDeleteMode {
	return v.value
}

func (v *NullableClusterDeleteMode) Set(val *ClusterDeleteMode) {
	v.value = val
	v.isSet = true
}

func (v NullableClusterDeleteMode) IsSet() bool {
	return v.isSet
}

func (v *NullableClusterDeleteMode) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableClusterDeleteMode(val *ClusterDeleteMode) *NullableClusterDeleteMode {
	return &NullableClusterDeleteMode{value: val, isSet: true}
}

func (v NullableClusterDeleteMode) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableClusterDeleteMode) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
