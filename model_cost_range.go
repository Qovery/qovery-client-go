/*
Qovery API

- Qovery is the fastest way to deploy your full-stack apps on any Cloud provider. - ℹ️ The API is stable and still in development.

API version: 1.0.3
Contact: support+api+documentation@qovery.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package qovery

import (
	"encoding/json"
)

// checks if the CostRange type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CostRange{}

// CostRange struct for CostRange
type CostRange struct {
	MinCostInCents *int32   `json:"min_cost_in_cents,omitempty"`
	MinCost        *float32 `json:"min_cost,omitempty"`
	MaxCostInCents *int32   `json:"max_cost_in_cents,omitempty"`
	MaxCost        *float32 `json:"max_cost,omitempty"`
	CurrencyCode   string   `json:"currency_code"`
}

// NewCostRange instantiates a new CostRange object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCostRange(currencyCode string) *CostRange {
	this := CostRange{}
	this.CurrencyCode = currencyCode
	return &this
}

// NewCostRangeWithDefaults instantiates a new CostRange object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCostRangeWithDefaults() *CostRange {
	this := CostRange{}
	return &this
}

// GetMinCostInCents returns the MinCostInCents field value if set, zero value otherwise.
func (o *CostRange) GetMinCostInCents() int32 {
	if o == nil || IsNil(o.MinCostInCents) {
		var ret int32
		return ret
	}
	return *o.MinCostInCents
}

// GetMinCostInCentsOk returns a tuple with the MinCostInCents field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CostRange) GetMinCostInCentsOk() (*int32, bool) {
	if o == nil || IsNil(o.MinCostInCents) {
		return nil, false
	}
	return o.MinCostInCents, true
}

// HasMinCostInCents returns a boolean if a field has been set.
func (o *CostRange) HasMinCostInCents() bool {
	if o != nil && !IsNil(o.MinCostInCents) {
		return true
	}

	return false
}

// SetMinCostInCents gets a reference to the given int32 and assigns it to the MinCostInCents field.
func (o *CostRange) SetMinCostInCents(v int32) {
	o.MinCostInCents = &v
}

// GetMinCost returns the MinCost field value if set, zero value otherwise.
func (o *CostRange) GetMinCost() float32 {
	if o == nil || IsNil(o.MinCost) {
		var ret float32
		return ret
	}
	return *o.MinCost
}

// GetMinCostOk returns a tuple with the MinCost field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CostRange) GetMinCostOk() (*float32, bool) {
	if o == nil || IsNil(o.MinCost) {
		return nil, false
	}
	return o.MinCost, true
}

// HasMinCost returns a boolean if a field has been set.
func (o *CostRange) HasMinCost() bool {
	if o != nil && !IsNil(o.MinCost) {
		return true
	}

	return false
}

// SetMinCost gets a reference to the given float32 and assigns it to the MinCost field.
func (o *CostRange) SetMinCost(v float32) {
	o.MinCost = &v
}

// GetMaxCostInCents returns the MaxCostInCents field value if set, zero value otherwise.
func (o *CostRange) GetMaxCostInCents() int32 {
	if o == nil || IsNil(o.MaxCostInCents) {
		var ret int32
		return ret
	}
	return *o.MaxCostInCents
}

// GetMaxCostInCentsOk returns a tuple with the MaxCostInCents field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CostRange) GetMaxCostInCentsOk() (*int32, bool) {
	if o == nil || IsNil(o.MaxCostInCents) {
		return nil, false
	}
	return o.MaxCostInCents, true
}

// HasMaxCostInCents returns a boolean if a field has been set.
func (o *CostRange) HasMaxCostInCents() bool {
	if o != nil && !IsNil(o.MaxCostInCents) {
		return true
	}

	return false
}

// SetMaxCostInCents gets a reference to the given int32 and assigns it to the MaxCostInCents field.
func (o *CostRange) SetMaxCostInCents(v int32) {
	o.MaxCostInCents = &v
}

// GetMaxCost returns the MaxCost field value if set, zero value otherwise.
func (o *CostRange) GetMaxCost() float32 {
	if o == nil || IsNil(o.MaxCost) {
		var ret float32
		return ret
	}
	return *o.MaxCost
}

// GetMaxCostOk returns a tuple with the MaxCost field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CostRange) GetMaxCostOk() (*float32, bool) {
	if o == nil || IsNil(o.MaxCost) {
		return nil, false
	}
	return o.MaxCost, true
}

// HasMaxCost returns a boolean if a field has been set.
func (o *CostRange) HasMaxCost() bool {
	if o != nil && !IsNil(o.MaxCost) {
		return true
	}

	return false
}

// SetMaxCost gets a reference to the given float32 and assigns it to the MaxCost field.
func (o *CostRange) SetMaxCost(v float32) {
	o.MaxCost = &v
}

// GetCurrencyCode returns the CurrencyCode field value
func (o *CostRange) GetCurrencyCode() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.CurrencyCode
}

// GetCurrencyCodeOk returns a tuple with the CurrencyCode field value
// and a boolean to check if the value has been set.
func (o *CostRange) GetCurrencyCodeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CurrencyCode, true
}

// SetCurrencyCode sets field value
func (o *CostRange) SetCurrencyCode(v string) {
	o.CurrencyCode = v
}

func (o CostRange) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CostRange) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.MinCostInCents) {
		toSerialize["min_cost_in_cents"] = o.MinCostInCents
	}
	if !IsNil(o.MinCost) {
		toSerialize["min_cost"] = o.MinCost
	}
	if !IsNil(o.MaxCostInCents) {
		toSerialize["max_cost_in_cents"] = o.MaxCostInCents
	}
	if !IsNil(o.MaxCost) {
		toSerialize["max_cost"] = o.MaxCost
	}
	toSerialize["currency_code"] = o.CurrencyCode
	return toSerialize, nil
}

type NullableCostRange struct {
	value *CostRange
	isSet bool
}

func (v NullableCostRange) Get() *CostRange {
	return v.value
}

func (v *NullableCostRange) Set(val *CostRange) {
	v.value = val
	v.isSet = true
}

func (v NullableCostRange) IsSet() bool {
	return v.isSet
}

func (v *NullableCostRange) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCostRange(val *CostRange) *NullableCostRange {
	return &NullableCostRange{value: val, isSet: true}
}

func (v NullableCostRange) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCostRange) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
