/*
Qovery API

- Qovery is the fastest way to deploy your full-stack apps on any Cloud provider. - ℹ️ The API is stable and still in development.

API version: 1.0.3
Contact: support+api+documentation@qovery.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package qovery

import (
	"encoding/json"
	"fmt"
)

// ClusterFeatureAcceptedValuesInner - struct for ClusterFeatureAcceptedValuesInner
type ClusterFeatureAcceptedValuesInner struct {
	Bool   *bool
	String *string
}

// boolAsClusterFeatureAcceptedValuesInner is a convenience function that returns bool wrapped in ClusterFeatureAcceptedValuesInner
func BoolAsClusterFeatureAcceptedValuesInner(v *bool) ClusterFeatureAcceptedValuesInner {
	return ClusterFeatureAcceptedValuesInner{
		Bool: v,
	}
}

// stringAsClusterFeatureAcceptedValuesInner is a convenience function that returns string wrapped in ClusterFeatureAcceptedValuesInner
func StringAsClusterFeatureAcceptedValuesInner(v *string) ClusterFeatureAcceptedValuesInner {
	return ClusterFeatureAcceptedValuesInner{
		String: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *ClusterFeatureAcceptedValuesInner) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into Bool
	err = json.Unmarshal(data, &dst.Bool)
	if err == nil {
		jsonbool, _ := json.Marshal(dst.Bool)
		if string(jsonbool) == "{}" { // empty struct
			dst.Bool = nil
		} else {
			match++
		}
	} else {
		dst.Bool = nil
	}

	// try to unmarshal data into String
	err = json.Unmarshal(data, &dst.String)
	if err == nil {
		jsonstring, _ := json.Marshal(dst.String)
		if string(jsonstring) == "{}" { // empty struct
			dst.String = nil
		} else {
			match++
		}
	} else {
		dst.String = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.Bool = nil
		dst.String = nil

		return fmt.Errorf("data matches more than one schema in oneOf(ClusterFeatureAcceptedValuesInner)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(ClusterFeatureAcceptedValuesInner)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src ClusterFeatureAcceptedValuesInner) MarshalJSON() ([]byte, error) {
	if src.Bool != nil {
		return json.Marshal(&src.Bool)
	}

	if src.String != nil {
		return json.Marshal(&src.String)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *ClusterFeatureAcceptedValuesInner) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.Bool != nil {
		return obj.Bool
	}

	if obj.String != nil {
		return obj.String
	}

	// all schemas are nil
	return nil
}

type NullableClusterFeatureAcceptedValuesInner struct {
	value *ClusterFeatureAcceptedValuesInner
	isSet bool
}

func (v NullableClusterFeatureAcceptedValuesInner) Get() *ClusterFeatureAcceptedValuesInner {
	return v.value
}

func (v *NullableClusterFeatureAcceptedValuesInner) Set(val *ClusterFeatureAcceptedValuesInner) {
	v.value = val
	v.isSet = true
}

func (v NullableClusterFeatureAcceptedValuesInner) IsSet() bool {
	return v.isSet
}

func (v *NullableClusterFeatureAcceptedValuesInner) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableClusterFeatureAcceptedValuesInner(val *ClusterFeatureAcceptedValuesInner) *NullableClusterFeatureAcceptedValuesInner {
	return &NullableClusterFeatureAcceptedValuesInner{value: val, isSet: true}
}

func (v NullableClusterFeatureAcceptedValuesInner) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableClusterFeatureAcceptedValuesInner) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
