/*
Qovery API

- Qovery is the fastest way to deploy your full-stack apps on any Cloud provider. - ℹ️ The API is stable and still in development.

API version: 1.0.3
Contact: support+api+documentation@qovery.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package qovery

import (
	"encoding/json"
)

// ApplicationPort struct for ApplicationPort
type ApplicationPort struct {
	Ports []ApplicationPortPortsInner `json:"ports,omitempty"`
}

// NewApplicationPort instantiates a new ApplicationPort object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewApplicationPort() *ApplicationPort {
	this := ApplicationPort{}
	return &this
}

// NewApplicationPortWithDefaults instantiates a new ApplicationPort object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewApplicationPortWithDefaults() *ApplicationPort {
	this := ApplicationPort{}
	return &this
}

// GetPorts returns the Ports field value if set, zero value otherwise.
func (o *ApplicationPort) GetPorts() []ApplicationPortPortsInner {
	if o == nil || o.Ports == nil {
		var ret []ApplicationPortPortsInner
		return ret
	}
	return o.Ports
}

// GetPortsOk returns a tuple with the Ports field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApplicationPort) GetPortsOk() ([]ApplicationPortPortsInner, bool) {
	if o == nil || o.Ports == nil {
		return nil, false
	}
	return o.Ports, true
}

// HasPorts returns a boolean if a field has been set.
func (o *ApplicationPort) HasPorts() bool {
	if o != nil && o.Ports != nil {
		return true
	}

	return false
}

// SetPorts gets a reference to the given []ApplicationPortPortsInner and assigns it to the Ports field.
func (o *ApplicationPort) SetPorts(v []ApplicationPortPortsInner) {
	o.Ports = v
}

func (o ApplicationPort) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Ports != nil {
		toSerialize["ports"] = o.Ports
	}
	return json.Marshal(toSerialize)
}

type NullableApplicationPort struct {
	value *ApplicationPort
	isSet bool
}

func (v NullableApplicationPort) Get() *ApplicationPort {
	return v.value
}

func (v *NullableApplicationPort) Set(val *ApplicationPort) {
	v.value = val
	v.isSet = true
}

func (v NullableApplicationPort) IsSet() bool {
	return v.isSet
}

func (v *NullableApplicationPort) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableApplicationPort(val *ApplicationPort) *NullableApplicationPort {
	return &NullableApplicationPort{value: val, isSet: true}
}

func (v NullableApplicationPort) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableApplicationPort) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
