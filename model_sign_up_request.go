/*
Qovery API

- Qovery is the fastest way to deploy your full-stack apps on any Cloud provider. - ℹ️ The API is stable and still in development.

API version: 1.0.3
Contact: support+api+documentation@qovery.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package qovery

import (
	"encoding/json"
	"fmt"
)

// checks if the SignUpRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SignUpRequest{}

// SignUpRequest struct for SignUpRequest
type SignUpRequest struct {
	FirstName             string           `json:"first_name"`
	LastName              string           `json:"last_name"`
	UserEmail             string           `json:"user_email"`
	TypeOfUse             TypeOfUseEnum    `json:"type_of_use"`
	QoveryUsage           string           `json:"qovery_usage"`
	CompanyName           *string          `json:"company_name,omitempty"`
	CompanySize           *CompanySizeEnum `json:"company_size,omitempty"`
	UserRole              *string          `json:"user_role,omitempty"`
	QoveryUsageOther      *string          `json:"qovery_usage_other,omitempty"`
	UserQuestions         *string          `json:"user_questions,omitempty"`
	CurrentStep           *string          `json:"current_step,omitempty"`
	DxAuth                *bool            `json:"dx_auth,omitempty"`
	InfrastructureHosting *string          `json:"infrastructure_hosting,omitempty"`
	AdditionalProperties  map[string]interface{}
}

type _SignUpRequest SignUpRequest

// NewSignUpRequest instantiates a new SignUpRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSignUpRequest(firstName string, lastName string, userEmail string, typeOfUse TypeOfUseEnum, qoveryUsage string) *SignUpRequest {
	this := SignUpRequest{}
	this.FirstName = firstName
	this.LastName = lastName
	this.UserEmail = userEmail
	this.TypeOfUse = typeOfUse
	this.QoveryUsage = qoveryUsage
	return &this
}

// NewSignUpRequestWithDefaults instantiates a new SignUpRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSignUpRequestWithDefaults() *SignUpRequest {
	this := SignUpRequest{}
	return &this
}

// GetFirstName returns the FirstName field value
func (o *SignUpRequest) GetFirstName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.FirstName
}

// GetFirstNameOk returns a tuple with the FirstName field value
// and a boolean to check if the value has been set.
func (o *SignUpRequest) GetFirstNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.FirstName, true
}

// SetFirstName sets field value
func (o *SignUpRequest) SetFirstName(v string) {
	o.FirstName = v
}

// GetLastName returns the LastName field value
func (o *SignUpRequest) GetLastName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.LastName
}

// GetLastNameOk returns a tuple with the LastName field value
// and a boolean to check if the value has been set.
func (o *SignUpRequest) GetLastNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.LastName, true
}

// SetLastName sets field value
func (o *SignUpRequest) SetLastName(v string) {
	o.LastName = v
}

// GetUserEmail returns the UserEmail field value
func (o *SignUpRequest) GetUserEmail() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.UserEmail
}

// GetUserEmailOk returns a tuple with the UserEmail field value
// and a boolean to check if the value has been set.
func (o *SignUpRequest) GetUserEmailOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.UserEmail, true
}

// SetUserEmail sets field value
func (o *SignUpRequest) SetUserEmail(v string) {
	o.UserEmail = v
}

// GetTypeOfUse returns the TypeOfUse field value
func (o *SignUpRequest) GetTypeOfUse() TypeOfUseEnum {
	if o == nil {
		var ret TypeOfUseEnum
		return ret
	}

	return o.TypeOfUse
}

// GetTypeOfUseOk returns a tuple with the TypeOfUse field value
// and a boolean to check if the value has been set.
func (o *SignUpRequest) GetTypeOfUseOk() (*TypeOfUseEnum, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TypeOfUse, true
}

// SetTypeOfUse sets field value
func (o *SignUpRequest) SetTypeOfUse(v TypeOfUseEnum) {
	o.TypeOfUse = v
}

// GetQoveryUsage returns the QoveryUsage field value
func (o *SignUpRequest) GetQoveryUsage() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.QoveryUsage
}

// GetQoveryUsageOk returns a tuple with the QoveryUsage field value
// and a boolean to check if the value has been set.
func (o *SignUpRequest) GetQoveryUsageOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.QoveryUsage, true
}

// SetQoveryUsage sets field value
func (o *SignUpRequest) SetQoveryUsage(v string) {
	o.QoveryUsage = v
}

// GetCompanyName returns the CompanyName field value if set, zero value otherwise.
func (o *SignUpRequest) GetCompanyName() string {
	if o == nil || IsNil(o.CompanyName) {
		var ret string
		return ret
	}
	return *o.CompanyName
}

// GetCompanyNameOk returns a tuple with the CompanyName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SignUpRequest) GetCompanyNameOk() (*string, bool) {
	if o == nil || IsNil(o.CompanyName) {
		return nil, false
	}
	return o.CompanyName, true
}

// HasCompanyName returns a boolean if a field has been set.
func (o *SignUpRequest) HasCompanyName() bool {
	if o != nil && !IsNil(o.CompanyName) {
		return true
	}

	return false
}

// SetCompanyName gets a reference to the given string and assigns it to the CompanyName field.
func (o *SignUpRequest) SetCompanyName(v string) {
	o.CompanyName = &v
}

// GetCompanySize returns the CompanySize field value if set, zero value otherwise.
func (o *SignUpRequest) GetCompanySize() CompanySizeEnum {
	if o == nil || IsNil(o.CompanySize) {
		var ret CompanySizeEnum
		return ret
	}
	return *o.CompanySize
}

// GetCompanySizeOk returns a tuple with the CompanySize field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SignUpRequest) GetCompanySizeOk() (*CompanySizeEnum, bool) {
	if o == nil || IsNil(o.CompanySize) {
		return nil, false
	}
	return o.CompanySize, true
}

// HasCompanySize returns a boolean if a field has been set.
func (o *SignUpRequest) HasCompanySize() bool {
	if o != nil && !IsNil(o.CompanySize) {
		return true
	}

	return false
}

// SetCompanySize gets a reference to the given CompanySizeEnum and assigns it to the CompanySize field.
func (o *SignUpRequest) SetCompanySize(v CompanySizeEnum) {
	o.CompanySize = &v
}

// GetUserRole returns the UserRole field value if set, zero value otherwise.
func (o *SignUpRequest) GetUserRole() string {
	if o == nil || IsNil(o.UserRole) {
		var ret string
		return ret
	}
	return *o.UserRole
}

// GetUserRoleOk returns a tuple with the UserRole field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SignUpRequest) GetUserRoleOk() (*string, bool) {
	if o == nil || IsNil(o.UserRole) {
		return nil, false
	}
	return o.UserRole, true
}

// HasUserRole returns a boolean if a field has been set.
func (o *SignUpRequest) HasUserRole() bool {
	if o != nil && !IsNil(o.UserRole) {
		return true
	}

	return false
}

// SetUserRole gets a reference to the given string and assigns it to the UserRole field.
func (o *SignUpRequest) SetUserRole(v string) {
	o.UserRole = &v
}

// GetQoveryUsageOther returns the QoveryUsageOther field value if set, zero value otherwise.
func (o *SignUpRequest) GetQoveryUsageOther() string {
	if o == nil || IsNil(o.QoveryUsageOther) {
		var ret string
		return ret
	}
	return *o.QoveryUsageOther
}

// GetQoveryUsageOtherOk returns a tuple with the QoveryUsageOther field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SignUpRequest) GetQoveryUsageOtherOk() (*string, bool) {
	if o == nil || IsNil(o.QoveryUsageOther) {
		return nil, false
	}
	return o.QoveryUsageOther, true
}

// HasQoveryUsageOther returns a boolean if a field has been set.
func (o *SignUpRequest) HasQoveryUsageOther() bool {
	if o != nil && !IsNil(o.QoveryUsageOther) {
		return true
	}

	return false
}

// SetQoveryUsageOther gets a reference to the given string and assigns it to the QoveryUsageOther field.
func (o *SignUpRequest) SetQoveryUsageOther(v string) {
	o.QoveryUsageOther = &v
}

// GetUserQuestions returns the UserQuestions field value if set, zero value otherwise.
func (o *SignUpRequest) GetUserQuestions() string {
	if o == nil || IsNil(o.UserQuestions) {
		var ret string
		return ret
	}
	return *o.UserQuestions
}

// GetUserQuestionsOk returns a tuple with the UserQuestions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SignUpRequest) GetUserQuestionsOk() (*string, bool) {
	if o == nil || IsNil(o.UserQuestions) {
		return nil, false
	}
	return o.UserQuestions, true
}

// HasUserQuestions returns a boolean if a field has been set.
func (o *SignUpRequest) HasUserQuestions() bool {
	if o != nil && !IsNil(o.UserQuestions) {
		return true
	}

	return false
}

// SetUserQuestions gets a reference to the given string and assigns it to the UserQuestions field.
func (o *SignUpRequest) SetUserQuestions(v string) {
	o.UserQuestions = &v
}

// GetCurrentStep returns the CurrentStep field value if set, zero value otherwise.
func (o *SignUpRequest) GetCurrentStep() string {
	if o == nil || IsNil(o.CurrentStep) {
		var ret string
		return ret
	}
	return *o.CurrentStep
}

// GetCurrentStepOk returns a tuple with the CurrentStep field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SignUpRequest) GetCurrentStepOk() (*string, bool) {
	if o == nil || IsNil(o.CurrentStep) {
		return nil, false
	}
	return o.CurrentStep, true
}

// HasCurrentStep returns a boolean if a field has been set.
func (o *SignUpRequest) HasCurrentStep() bool {
	if o != nil && !IsNil(o.CurrentStep) {
		return true
	}

	return false
}

// SetCurrentStep gets a reference to the given string and assigns it to the CurrentStep field.
func (o *SignUpRequest) SetCurrentStep(v string) {
	o.CurrentStep = &v
}

// GetDxAuth returns the DxAuth field value if set, zero value otherwise.
func (o *SignUpRequest) GetDxAuth() bool {
	if o == nil || IsNil(o.DxAuth) {
		var ret bool
		return ret
	}
	return *o.DxAuth
}

// GetDxAuthOk returns a tuple with the DxAuth field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SignUpRequest) GetDxAuthOk() (*bool, bool) {
	if o == nil || IsNil(o.DxAuth) {
		return nil, false
	}
	return o.DxAuth, true
}

// HasDxAuth returns a boolean if a field has been set.
func (o *SignUpRequest) HasDxAuth() bool {
	if o != nil && !IsNil(o.DxAuth) {
		return true
	}

	return false
}

// SetDxAuth gets a reference to the given bool and assigns it to the DxAuth field.
func (o *SignUpRequest) SetDxAuth(v bool) {
	o.DxAuth = &v
}

// GetInfrastructureHosting returns the InfrastructureHosting field value if set, zero value otherwise.
func (o *SignUpRequest) GetInfrastructureHosting() string {
	if o == nil || IsNil(o.InfrastructureHosting) {
		var ret string
		return ret
	}
	return *o.InfrastructureHosting
}

// GetInfrastructureHostingOk returns a tuple with the InfrastructureHosting field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SignUpRequest) GetInfrastructureHostingOk() (*string, bool) {
	if o == nil || IsNil(o.InfrastructureHosting) {
		return nil, false
	}
	return o.InfrastructureHosting, true
}

// HasInfrastructureHosting returns a boolean if a field has been set.
func (o *SignUpRequest) HasInfrastructureHosting() bool {
	if o != nil && !IsNil(o.InfrastructureHosting) {
		return true
	}

	return false
}

// SetInfrastructureHosting gets a reference to the given string and assigns it to the InfrastructureHosting field.
func (o *SignUpRequest) SetInfrastructureHosting(v string) {
	o.InfrastructureHosting = &v
}

func (o SignUpRequest) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SignUpRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["first_name"] = o.FirstName
	toSerialize["last_name"] = o.LastName
	toSerialize["user_email"] = o.UserEmail
	toSerialize["type_of_use"] = o.TypeOfUse
	toSerialize["qovery_usage"] = o.QoveryUsage
	if !IsNil(o.CompanyName) {
		toSerialize["company_name"] = o.CompanyName
	}
	if !IsNil(o.CompanySize) {
		toSerialize["company_size"] = o.CompanySize
	}
	if !IsNil(o.UserRole) {
		toSerialize["user_role"] = o.UserRole
	}
	if !IsNil(o.QoveryUsageOther) {
		toSerialize["qovery_usage_other"] = o.QoveryUsageOther
	}
	if !IsNil(o.UserQuestions) {
		toSerialize["user_questions"] = o.UserQuestions
	}
	if !IsNil(o.CurrentStep) {
		toSerialize["current_step"] = o.CurrentStep
	}
	if !IsNil(o.DxAuth) {
		toSerialize["dx_auth"] = o.DxAuth
	}
	if !IsNil(o.InfrastructureHosting) {
		toSerialize["infrastructure_hosting"] = o.InfrastructureHosting
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *SignUpRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"first_name",
		"last_name",
		"user_email",
		"type_of_use",
		"qovery_usage",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varSignUpRequest := _SignUpRequest{}

	err = json.Unmarshal(data, &varSignUpRequest)

	if err != nil {
		return err
	}

	*o = SignUpRequest(varSignUpRequest)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "first_name")
		delete(additionalProperties, "last_name")
		delete(additionalProperties, "user_email")
		delete(additionalProperties, "type_of_use")
		delete(additionalProperties, "qovery_usage")
		delete(additionalProperties, "company_name")
		delete(additionalProperties, "company_size")
		delete(additionalProperties, "user_role")
		delete(additionalProperties, "qovery_usage_other")
		delete(additionalProperties, "user_questions")
		delete(additionalProperties, "current_step")
		delete(additionalProperties, "dx_auth")
		delete(additionalProperties, "infrastructure_hosting")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableSignUpRequest struct {
	value *SignUpRequest
	isSet bool
}

func (v NullableSignUpRequest) Get() *SignUpRequest {
	return v.value
}

func (v *NullableSignUpRequest) Set(val *SignUpRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableSignUpRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableSignUpRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSignUpRequest(val *SignUpRequest) *NullableSignUpRequest {
	return &NullableSignUpRequest{value: val, isSet: true}
}

func (v NullableSignUpRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSignUpRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
