/*
Qovery API

- Qovery is the fastest way to deploy your full-stack apps on any Cloud provider. - ℹ️ The API is stable and still in development.

API version: 1.0.3
Contact: support+api+documentation@qovery.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package qovery

import (
	"encoding/json"
	"fmt"
)

// EnvironmentVariableScopeEnum the model 'EnvironmentVariableScopeEnum'
type EnvironmentVariableScopeEnum string

// List of EnvironmentVariableScopeEnum
const (
	ENVIRONMENTVARIABLESCOPEENUM_APPLICATION EnvironmentVariableScopeEnum = "APPLICATION"
	ENVIRONMENTVARIABLESCOPEENUM_BUILT_IN    EnvironmentVariableScopeEnum = "BUILT_IN"
	ENVIRONMENTVARIABLESCOPEENUM_ENVIRONMENT EnvironmentVariableScopeEnum = "ENVIRONMENT"
	ENVIRONMENTVARIABLESCOPEENUM_PROJECT     EnvironmentVariableScopeEnum = "PROJECT"
)

// All allowed values of EnvironmentVariableScopeEnum enum
var AllowedEnvironmentVariableScopeEnumEnumValues = []EnvironmentVariableScopeEnum{
	"APPLICATION",
	"BUILT_IN",
	"ENVIRONMENT",
	"PROJECT",
}

func (v *EnvironmentVariableScopeEnum) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := EnvironmentVariableScopeEnum(value)
	for _, existing := range AllowedEnvironmentVariableScopeEnumEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid EnvironmentVariableScopeEnum", value)
}

// NewEnvironmentVariableScopeEnumFromValue returns a pointer to a valid EnvironmentVariableScopeEnum
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewEnvironmentVariableScopeEnumFromValue(v string) (*EnvironmentVariableScopeEnum, error) {
	ev := EnvironmentVariableScopeEnum(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for EnvironmentVariableScopeEnum: valid values are %v", v, AllowedEnvironmentVariableScopeEnumEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v EnvironmentVariableScopeEnum) IsValid() bool {
	for _, existing := range AllowedEnvironmentVariableScopeEnumEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to EnvironmentVariableScopeEnum value
func (v EnvironmentVariableScopeEnum) Ptr() *EnvironmentVariableScopeEnum {
	return &v
}

type NullableEnvironmentVariableScopeEnum struct {
	value *EnvironmentVariableScopeEnum
	isSet bool
}

func (v NullableEnvironmentVariableScopeEnum) Get() *EnvironmentVariableScopeEnum {
	return v.value
}

func (v *NullableEnvironmentVariableScopeEnum) Set(val *EnvironmentVariableScopeEnum) {
	v.value = val
	v.isSet = true
}

func (v NullableEnvironmentVariableScopeEnum) IsSet() bool {
	return v.isSet
}

func (v *NullableEnvironmentVariableScopeEnum) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEnvironmentVariableScopeEnum(val *EnvironmentVariableScopeEnum) *NullableEnvironmentVariableScopeEnum {
	return &NullableEnvironmentVariableScopeEnum{value: val, isSet: true}
}

func (v NullableEnvironmentVariableScopeEnum) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEnvironmentVariableScopeEnum) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
