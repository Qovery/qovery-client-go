/*
Qovery API

- Qovery is the fastest way to deploy your full-stack apps on any Cloud provider. - ℹ️ The API is stable and still in development.

API version: 1.0.3
Contact: support+api+documentation@qovery.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package qovery

import (
	"encoding/json"
)

// checks if the HelmRepositoryRequestConfig type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &HelmRepositoryRequestConfig{}

// HelmRepositoryRequestConfig struct for HelmRepositoryRequestConfig
type HelmRepositoryRequestConfig struct {
	// Bypass tls certificate verification when connecting to repository
	SkipTlsVerification *bool `json:"skip_tls_verification,omitempty"`
	// Required if the repository is private
	Login *string `json:"login,omitempty"`
	// Required if the repository is private
	Password *string `json:"password,omitempty"`
}

// NewHelmRepositoryRequestConfig instantiates a new HelmRepositoryRequestConfig object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewHelmRepositoryRequestConfig() *HelmRepositoryRequestConfig {
	this := HelmRepositoryRequestConfig{}
	var skipTlsVerification bool = false
	this.SkipTlsVerification = &skipTlsVerification
	return &this
}

// NewHelmRepositoryRequestConfigWithDefaults instantiates a new HelmRepositoryRequestConfig object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewHelmRepositoryRequestConfigWithDefaults() *HelmRepositoryRequestConfig {
	this := HelmRepositoryRequestConfig{}
	var skipTlsVerification bool = false
	this.SkipTlsVerification = &skipTlsVerification
	return &this
}

// GetSkipTlsVerification returns the SkipTlsVerification field value if set, zero value otherwise.
func (o *HelmRepositoryRequestConfig) GetSkipTlsVerification() bool {
	if o == nil || IsNil(o.SkipTlsVerification) {
		var ret bool
		return ret
	}
	return *o.SkipTlsVerification
}

// GetSkipTlsVerificationOk returns a tuple with the SkipTlsVerification field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HelmRepositoryRequestConfig) GetSkipTlsVerificationOk() (*bool, bool) {
	if o == nil || IsNil(o.SkipTlsVerification) {
		return nil, false
	}
	return o.SkipTlsVerification, true
}

// HasSkipTlsVerification returns a boolean if a field has been set.
func (o *HelmRepositoryRequestConfig) HasSkipTlsVerification() bool {
	if o != nil && !IsNil(o.SkipTlsVerification) {
		return true
	}

	return false
}

// SetSkipTlsVerification gets a reference to the given bool and assigns it to the SkipTlsVerification field.
func (o *HelmRepositoryRequestConfig) SetSkipTlsVerification(v bool) {
	o.SkipTlsVerification = &v
}

// GetLogin returns the Login field value if set, zero value otherwise.
func (o *HelmRepositoryRequestConfig) GetLogin() string {
	if o == nil || IsNil(o.Login) {
		var ret string
		return ret
	}
	return *o.Login
}

// GetLoginOk returns a tuple with the Login field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HelmRepositoryRequestConfig) GetLoginOk() (*string, bool) {
	if o == nil || IsNil(o.Login) {
		return nil, false
	}
	return o.Login, true
}

// HasLogin returns a boolean if a field has been set.
func (o *HelmRepositoryRequestConfig) HasLogin() bool {
	if o != nil && !IsNil(o.Login) {
		return true
	}

	return false
}

// SetLogin gets a reference to the given string and assigns it to the Login field.
func (o *HelmRepositoryRequestConfig) SetLogin(v string) {
	o.Login = &v
}

// GetPassword returns the Password field value if set, zero value otherwise.
func (o *HelmRepositoryRequestConfig) GetPassword() string {
	if o == nil || IsNil(o.Password) {
		var ret string
		return ret
	}
	return *o.Password
}

// GetPasswordOk returns a tuple with the Password field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HelmRepositoryRequestConfig) GetPasswordOk() (*string, bool) {
	if o == nil || IsNil(o.Password) {
		return nil, false
	}
	return o.Password, true
}

// HasPassword returns a boolean if a field has been set.
func (o *HelmRepositoryRequestConfig) HasPassword() bool {
	if o != nil && !IsNil(o.Password) {
		return true
	}

	return false
}

// SetPassword gets a reference to the given string and assigns it to the Password field.
func (o *HelmRepositoryRequestConfig) SetPassword(v string) {
	o.Password = &v
}

func (o HelmRepositoryRequestConfig) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o HelmRepositoryRequestConfig) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.SkipTlsVerification) {
		toSerialize["skip_tls_verification"] = o.SkipTlsVerification
	}
	if !IsNil(o.Login) {
		toSerialize["login"] = o.Login
	}
	if !IsNil(o.Password) {
		toSerialize["password"] = o.Password
	}
	return toSerialize, nil
}

type NullableHelmRepositoryRequestConfig struct {
	value *HelmRepositoryRequestConfig
	isSet bool
}

func (v NullableHelmRepositoryRequestConfig) Get() *HelmRepositoryRequestConfig {
	return v.value
}

func (v *NullableHelmRepositoryRequestConfig) Set(val *HelmRepositoryRequestConfig) {
	v.value = val
	v.isSet = true
}

func (v NullableHelmRepositoryRequestConfig) IsSet() bool {
	return v.isSet
}

func (v *NullableHelmRepositoryRequestConfig) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableHelmRepositoryRequestConfig(val *HelmRepositoryRequestConfig) *NullableHelmRepositoryRequestConfig {
	return &NullableHelmRepositoryRequestConfig{value: val, isSet: true}
}

func (v NullableHelmRepositoryRequestConfig) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableHelmRepositoryRequestConfig) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
