/*
Qovery API

- Qovery is the fastest way to deploy your full-stack apps on any Cloud provider. - ℹ️ The API is stable and still in development.

API version: 1.0.3
Contact: support+api+documentation@qovery.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package qovery

import (
	"encoding/json"
)

// BackupResponseAllOf struct for BackupResponseAllOf
type BackupResponseAllOf struct {
	Status *Status `json:"status,omitempty"`
}

// NewBackupResponseAllOf instantiates a new BackupResponseAllOf object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBackupResponseAllOf() *BackupResponseAllOf {
	this := BackupResponseAllOf{}
	return &this
}

// NewBackupResponseAllOfWithDefaults instantiates a new BackupResponseAllOf object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBackupResponseAllOfWithDefaults() *BackupResponseAllOf {
	this := BackupResponseAllOf{}
	return &this
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *BackupResponseAllOf) GetStatus() Status {
	if o == nil || o.Status == nil {
		var ret Status
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BackupResponseAllOf) GetStatusOk() (*Status, bool) {
	if o == nil || o.Status == nil {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *BackupResponseAllOf) HasStatus() bool {
	if o != nil && o.Status != nil {
		return true
	}

	return false
}

// SetStatus gets a reference to the given Status and assigns it to the Status field.
func (o *BackupResponseAllOf) SetStatus(v Status) {
	o.Status = &v
}

func (o BackupResponseAllOf) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Status != nil {
		toSerialize["status"] = o.Status
	}
	return json.Marshal(toSerialize)
}

type NullableBackupResponseAllOf struct {
	value *BackupResponseAllOf
	isSet bool
}

func (v NullableBackupResponseAllOf) Get() *BackupResponseAllOf {
	return v.value
}

func (v *NullableBackupResponseAllOf) Set(val *BackupResponseAllOf) {
	v.value = val
	v.isSet = true
}

func (v NullableBackupResponseAllOf) IsSet() bool {
	return v.isSet
}

func (v *NullableBackupResponseAllOf) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBackupResponseAllOf(val *BackupResponseAllOf) *NullableBackupResponseAllOf {
	return &NullableBackupResponseAllOf{value: val, isSet: true}
}

func (v NullableBackupResponseAllOf) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBackupResponseAllOf) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
