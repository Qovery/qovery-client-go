/*
Qovery API

- Qovery is the fastest way to deploy your full-stack apps on any Cloud provider. - ℹ️ The API is stable and still in development.

API version: 1.0.4
Contact: support+api+documentation@qovery.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package qovery

import (
	"encoding/json"
	"fmt"
)

// TerraformBackend - Configuration for Terraform backend - exactly one backend type must be specified
type TerraformBackend struct {
	TerraformBackendOneOf  *TerraformBackendOneOf
	TerraformBackendOneOf1 *TerraformBackendOneOf1
}

// TerraformBackendOneOfAsTerraformBackend is a convenience function that returns TerraformBackendOneOf wrapped in TerraformBackend
func TerraformBackendOneOfAsTerraformBackend(v *TerraformBackendOneOf) TerraformBackend {
	return TerraformBackend{
		TerraformBackendOneOf: v,
	}
}

// TerraformBackendOneOf1AsTerraformBackend is a convenience function that returns TerraformBackendOneOf1 wrapped in TerraformBackend
func TerraformBackendOneOf1AsTerraformBackend(v *TerraformBackendOneOf1) TerraformBackend {
	return TerraformBackend{
		TerraformBackendOneOf1: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *TerraformBackend) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into TerraformBackendOneOf
	err = json.Unmarshal(data, &dst.TerraformBackendOneOf)
	if err == nil {
		jsonTerraformBackendOneOf, _ := json.Marshal(dst.TerraformBackendOneOf)
		if string(jsonTerraformBackendOneOf) == "{}" { // empty struct
			dst.TerraformBackendOneOf = nil
		} else {
			match++
		}
	} else {
		dst.TerraformBackendOneOf = nil
	}

	// try to unmarshal data into TerraformBackendOneOf1
	err = json.Unmarshal(data, &dst.TerraformBackendOneOf1)
	if err == nil {
		jsonTerraformBackendOneOf1, _ := json.Marshal(dst.TerraformBackendOneOf1)
		if string(jsonTerraformBackendOneOf1) == "{}" { // empty struct
			dst.TerraformBackendOneOf1 = nil
		} else {
			match++
		}
	} else {
		dst.TerraformBackendOneOf1 = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.TerraformBackendOneOf = nil
		dst.TerraformBackendOneOf1 = nil

		return fmt.Errorf("data matches more than one schema in oneOf(TerraformBackend)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(TerraformBackend)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src TerraformBackend) MarshalJSON() ([]byte, error) {
	if src.TerraformBackendOneOf != nil {
		return json.Marshal(&src.TerraformBackendOneOf)
	}

	if src.TerraformBackendOneOf1 != nil {
		return json.Marshal(&src.TerraformBackendOneOf1)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *TerraformBackend) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.TerraformBackendOneOf != nil {
		return obj.TerraformBackendOneOf
	}

	if obj.TerraformBackendOneOf1 != nil {
		return obj.TerraformBackendOneOf1
	}

	// all schemas are nil
	return nil
}

type NullableTerraformBackend struct {
	value *TerraformBackend
	isSet bool
}

func (v NullableTerraformBackend) Get() *TerraformBackend {
	return v.value
}

func (v *NullableTerraformBackend) Set(val *TerraformBackend) {
	v.value = val
	v.isSet = true
}

func (v NullableTerraformBackend) IsSet() bool {
	return v.isSet
}

func (v *NullableTerraformBackend) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTerraformBackend(val *TerraformBackend) *NullableTerraformBackend {
	return &NullableTerraformBackend{value: val, isSet: true}
}

func (v NullableTerraformBackend) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTerraformBackend) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
