/*
Qovery API

- Qovery is the fastest way to deploy your full-stack apps on any Cloud provider. - ℹ️ The API is stable and still in development.

API version: 1.0.3
Contact: support+api+documentation@qovery.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package qovery

import (
	"encoding/json"
	"fmt"
)

// checks if the DeploymentHistoryService type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DeploymentHistoryService{}

// DeploymentHistoryService struct for DeploymentHistoryService
type DeploymentHistoryService struct {
	Identifier           DeploymentHistoryServiceIdentifier `json:"identifier"`
	Status               StateEnum                          `json:"status"`
	AuditingData         DeploymentHistoryAuditingData      `json:"auditing_data"`
	Details              DeploymentHistoryServiceDetails    `json:"details"`
	StatusDetails        *StatusDetails                     `json:"status_details,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _DeploymentHistoryService DeploymentHistoryService

// NewDeploymentHistoryService instantiates a new DeploymentHistoryService object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDeploymentHistoryService(identifier DeploymentHistoryServiceIdentifier, status StateEnum, auditingData DeploymentHistoryAuditingData, details DeploymentHistoryServiceDetails) *DeploymentHistoryService {
	this := DeploymentHistoryService{}
	this.Identifier = identifier
	this.Status = status
	this.AuditingData = auditingData
	this.Details = details
	return &this
}

// NewDeploymentHistoryServiceWithDefaults instantiates a new DeploymentHistoryService object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDeploymentHistoryServiceWithDefaults() *DeploymentHistoryService {
	this := DeploymentHistoryService{}
	return &this
}

// GetIdentifier returns the Identifier field value
func (o *DeploymentHistoryService) GetIdentifier() DeploymentHistoryServiceIdentifier {
	if o == nil {
		var ret DeploymentHistoryServiceIdentifier
		return ret
	}

	return o.Identifier
}

// GetIdentifierOk returns a tuple with the Identifier field value
// and a boolean to check if the value has been set.
func (o *DeploymentHistoryService) GetIdentifierOk() (*DeploymentHistoryServiceIdentifier, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Identifier, true
}

// SetIdentifier sets field value
func (o *DeploymentHistoryService) SetIdentifier(v DeploymentHistoryServiceIdentifier) {
	o.Identifier = v
}

// GetStatus returns the Status field value
func (o *DeploymentHistoryService) GetStatus() StateEnum {
	if o == nil {
		var ret StateEnum
		return ret
	}

	return o.Status
}

// GetStatusOk returns a tuple with the Status field value
// and a boolean to check if the value has been set.
func (o *DeploymentHistoryService) GetStatusOk() (*StateEnum, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Status, true
}

// SetStatus sets field value
func (o *DeploymentHistoryService) SetStatus(v StateEnum) {
	o.Status = v
}

// GetAuditingData returns the AuditingData field value
func (o *DeploymentHistoryService) GetAuditingData() DeploymentHistoryAuditingData {
	if o == nil {
		var ret DeploymentHistoryAuditingData
		return ret
	}

	return o.AuditingData
}

// GetAuditingDataOk returns a tuple with the AuditingData field value
// and a boolean to check if the value has been set.
func (o *DeploymentHistoryService) GetAuditingDataOk() (*DeploymentHistoryAuditingData, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AuditingData, true
}

// SetAuditingData sets field value
func (o *DeploymentHistoryService) SetAuditingData(v DeploymentHistoryAuditingData) {
	o.AuditingData = v
}

// GetDetails returns the Details field value
func (o *DeploymentHistoryService) GetDetails() DeploymentHistoryServiceDetails {
	if o == nil {
		var ret DeploymentHistoryServiceDetails
		return ret
	}

	return o.Details
}

// GetDetailsOk returns a tuple with the Details field value
// and a boolean to check if the value has been set.
func (o *DeploymentHistoryService) GetDetailsOk() (*DeploymentHistoryServiceDetails, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Details, true
}

// SetDetails sets field value
func (o *DeploymentHistoryService) SetDetails(v DeploymentHistoryServiceDetails) {
	o.Details = v
}

// GetStatusDetails returns the StatusDetails field value if set, zero value otherwise.
func (o *DeploymentHistoryService) GetStatusDetails() StatusDetails {
	if o == nil || IsNil(o.StatusDetails) {
		var ret StatusDetails
		return ret
	}
	return *o.StatusDetails
}

// GetStatusDetailsOk returns a tuple with the StatusDetails field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeploymentHistoryService) GetStatusDetailsOk() (*StatusDetails, bool) {
	if o == nil || IsNil(o.StatusDetails) {
		return nil, false
	}
	return o.StatusDetails, true
}

// HasStatusDetails returns a boolean if a field has been set.
func (o *DeploymentHistoryService) HasStatusDetails() bool {
	if o != nil && !IsNil(o.StatusDetails) {
		return true
	}

	return false
}

// SetStatusDetails gets a reference to the given StatusDetails and assigns it to the StatusDetails field.
func (o *DeploymentHistoryService) SetStatusDetails(v StatusDetails) {
	o.StatusDetails = &v
}

func (o DeploymentHistoryService) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DeploymentHistoryService) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["identifier"] = o.Identifier
	toSerialize["status"] = o.Status
	toSerialize["auditing_data"] = o.AuditingData
	toSerialize["details"] = o.Details
	if !IsNil(o.StatusDetails) {
		toSerialize["status_details"] = o.StatusDetails
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *DeploymentHistoryService) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"identifier",
		"status",
		"auditing_data",
		"details",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varDeploymentHistoryService := _DeploymentHistoryService{}

	err = json.Unmarshal(data, &varDeploymentHistoryService)

	if err != nil {
		return err
	}

	*o = DeploymentHistoryService(varDeploymentHistoryService)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "identifier")
		delete(additionalProperties, "status")
		delete(additionalProperties, "auditing_data")
		delete(additionalProperties, "details")
		delete(additionalProperties, "status_details")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableDeploymentHistoryService struct {
	value *DeploymentHistoryService
	isSet bool
}

func (v NullableDeploymentHistoryService) Get() *DeploymentHistoryService {
	return v.value
}

func (v *NullableDeploymentHistoryService) Set(val *DeploymentHistoryService) {
	v.value = val
	v.isSet = true
}

func (v NullableDeploymentHistoryService) IsSet() bool {
	return v.isSet
}

func (v *NullableDeploymentHistoryService) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDeploymentHistoryService(val *DeploymentHistoryService) *NullableDeploymentHistoryService {
	return &NullableDeploymentHistoryService{value: val, isSet: true}
}

func (v NullableDeploymentHistoryService) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDeploymentHistoryService) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
