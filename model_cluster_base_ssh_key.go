/*
Qovery API

- Qovery is the fastest way to deploy your full-stack apps on any Cloud provider. - ℹ️ The API is stable and still in development.

API version: 1.0.3
Contact: support+api+documentation@qovery.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package qovery

import (
	"encoding/json"
)

// ClusterBaseSshKey Indicate your public ssh_key to remotely connect to your EC2 instance.
type ClusterBaseSshKey struct {
	Results []string `json:"results,omitempty"`
}

// NewClusterBaseSshKey instantiates a new ClusterBaseSshKey object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewClusterBaseSshKey() *ClusterBaseSshKey {
	this := ClusterBaseSshKey{}
	return &this
}

// NewClusterBaseSshKeyWithDefaults instantiates a new ClusterBaseSshKey object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewClusterBaseSshKeyWithDefaults() *ClusterBaseSshKey {
	this := ClusterBaseSshKey{}
	return &this
}

// GetResults returns the Results field value if set, zero value otherwise.
func (o *ClusterBaseSshKey) GetResults() []string {
	if o == nil || o.Results == nil {
		var ret []string
		return ret
	}
	return o.Results
}

// GetResultsOk returns a tuple with the Results field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ClusterBaseSshKey) GetResultsOk() ([]string, bool) {
	if o == nil || o.Results == nil {
		return nil, false
	}
	return o.Results, true
}

// HasResults returns a boolean if a field has been set.
func (o *ClusterBaseSshKey) HasResults() bool {
	if o != nil && o.Results != nil {
		return true
	}

	return false
}

// SetResults gets a reference to the given []string and assigns it to the Results field.
func (o *ClusterBaseSshKey) SetResults(v []string) {
	o.Results = v
}

func (o ClusterBaseSshKey) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Results != nil {
		toSerialize["results"] = o.Results
	}
	return json.Marshal(toSerialize)
}

type NullableClusterBaseSshKey struct {
	value *ClusterBaseSshKey
	isSet bool
}

func (v NullableClusterBaseSshKey) Get() *ClusterBaseSshKey {
	return v.value
}

func (v *NullableClusterBaseSshKey) Set(val *ClusterBaseSshKey) {
	v.value = val
	v.isSet = true
}

func (v NullableClusterBaseSshKey) IsSet() bool {
	return v.isSet
}

func (v *NullableClusterBaseSshKey) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableClusterBaseSshKey(val *ClusterBaseSshKey) *NullableClusterBaseSshKey {
	return &NullableClusterBaseSshKey{value: val, isSet: true}
}

func (v NullableClusterBaseSshKey) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableClusterBaseSshKey) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
