/*
Qovery API

- Qovery is the fastest way to deploy your full-stack apps on any Cloud provider. - ℹ️ The API is stable and still in development.

API version: 1.0.4
Contact: support+api+documentation@qovery.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package qovery

import (
	"encoding/json"
)

// checks if the ClusterInfrastructureCertManagerChartParameters type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ClusterInfrastructureCertManagerChartParameters{}

// ClusterInfrastructureCertManagerChartParameters struct for ClusterInfrastructureCertManagerChartParameters
type ClusterInfrastructureCertManagerChartParameters struct {
	KubernetesNamespace  *string `json:"kubernetes_namespace,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _ClusterInfrastructureCertManagerChartParameters ClusterInfrastructureCertManagerChartParameters

// NewClusterInfrastructureCertManagerChartParameters instantiates a new ClusterInfrastructureCertManagerChartParameters object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewClusterInfrastructureCertManagerChartParameters() *ClusterInfrastructureCertManagerChartParameters {
	this := ClusterInfrastructureCertManagerChartParameters{}
	return &this
}

// NewClusterInfrastructureCertManagerChartParametersWithDefaults instantiates a new ClusterInfrastructureCertManagerChartParameters object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewClusterInfrastructureCertManagerChartParametersWithDefaults() *ClusterInfrastructureCertManagerChartParameters {
	this := ClusterInfrastructureCertManagerChartParameters{}
	return &this
}

// GetKubernetesNamespace returns the KubernetesNamespace field value if set, zero value otherwise.
func (o *ClusterInfrastructureCertManagerChartParameters) GetKubernetesNamespace() string {
	if o == nil || IsNil(o.KubernetesNamespace) {
		var ret string
		return ret
	}
	return *o.KubernetesNamespace
}

// GetKubernetesNamespaceOk returns a tuple with the KubernetesNamespace field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ClusterInfrastructureCertManagerChartParameters) GetKubernetesNamespaceOk() (*string, bool) {
	if o == nil || IsNil(o.KubernetesNamespace) {
		return nil, false
	}
	return o.KubernetesNamespace, true
}

// HasKubernetesNamespace returns a boolean if a field has been set.
func (o *ClusterInfrastructureCertManagerChartParameters) HasKubernetesNamespace() bool {
	if o != nil && !IsNil(o.KubernetesNamespace) {
		return true
	}

	return false
}

// SetKubernetesNamespace gets a reference to the given string and assigns it to the KubernetesNamespace field.
func (o *ClusterInfrastructureCertManagerChartParameters) SetKubernetesNamespace(v string) {
	o.KubernetesNamespace = &v
}

func (o ClusterInfrastructureCertManagerChartParameters) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ClusterInfrastructureCertManagerChartParameters) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.KubernetesNamespace) {
		toSerialize["kubernetes_namespace"] = o.KubernetesNamespace
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *ClusterInfrastructureCertManagerChartParameters) UnmarshalJSON(data []byte) (err error) {
	varClusterInfrastructureCertManagerChartParameters := _ClusterInfrastructureCertManagerChartParameters{}

	err = json.Unmarshal(data, &varClusterInfrastructureCertManagerChartParameters)

	if err != nil {
		return err
	}

	*o = ClusterInfrastructureCertManagerChartParameters(varClusterInfrastructureCertManagerChartParameters)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "kubernetes_namespace")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableClusterInfrastructureCertManagerChartParameters struct {
	value *ClusterInfrastructureCertManagerChartParameters
	isSet bool
}

func (v NullableClusterInfrastructureCertManagerChartParameters) Get() *ClusterInfrastructureCertManagerChartParameters {
	return v.value
}

func (v *NullableClusterInfrastructureCertManagerChartParameters) Set(val *ClusterInfrastructureCertManagerChartParameters) {
	v.value = val
	v.isSet = true
}

func (v NullableClusterInfrastructureCertManagerChartParameters) IsSet() bool {
	return v.isSet
}

func (v *NullableClusterInfrastructureCertManagerChartParameters) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableClusterInfrastructureCertManagerChartParameters(val *ClusterInfrastructureCertManagerChartParameters) *NullableClusterInfrastructureCertManagerChartParameters {
	return &NullableClusterInfrastructureCertManagerChartParameters{value: val, isSet: true}
}

func (v NullableClusterInfrastructureCertManagerChartParameters) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableClusterInfrastructureCertManagerChartParameters) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
