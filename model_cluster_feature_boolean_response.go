/*
Qovery API

- Qovery is the fastest way to deploy your full-stack apps on any Cloud provider. - ℹ️ The API is stable and still in development.

API version: 1.0.3
Contact: support+api+documentation@qovery.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package qovery

import (
	"encoding/json"
)

// checks if the ClusterFeatureBooleanResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ClusterFeatureBooleanResponse{}

// ClusterFeatureBooleanResponse struct for ClusterFeatureBooleanResponse
type ClusterFeatureBooleanResponse struct {
	Type  ClusterFeatureResponseTypeEnum `json:"type"`
	Value bool                           `json:"value"`
}

// NewClusterFeatureBooleanResponse instantiates a new ClusterFeatureBooleanResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewClusterFeatureBooleanResponse(type_ ClusterFeatureResponseTypeEnum, value bool) *ClusterFeatureBooleanResponse {
	this := ClusterFeatureBooleanResponse{}
	this.Type = type_
	this.Value = value
	return &this
}

// NewClusterFeatureBooleanResponseWithDefaults instantiates a new ClusterFeatureBooleanResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewClusterFeatureBooleanResponseWithDefaults() *ClusterFeatureBooleanResponse {
	this := ClusterFeatureBooleanResponse{}
	return &this
}

// GetType returns the Type field value
func (o *ClusterFeatureBooleanResponse) GetType() ClusterFeatureResponseTypeEnum {
	if o == nil {
		var ret ClusterFeatureResponseTypeEnum
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *ClusterFeatureBooleanResponse) GetTypeOk() (*ClusterFeatureResponseTypeEnum, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *ClusterFeatureBooleanResponse) SetType(v ClusterFeatureResponseTypeEnum) {
	o.Type = v
}

// GetValue returns the Value field value
func (o *ClusterFeatureBooleanResponse) GetValue() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Value
}

// GetValueOk returns a tuple with the Value field value
// and a boolean to check if the value has been set.
func (o *ClusterFeatureBooleanResponse) GetValueOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Value, true
}

// SetValue sets field value
func (o *ClusterFeatureBooleanResponse) SetValue(v bool) {
	o.Value = v
}

func (o ClusterFeatureBooleanResponse) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ClusterFeatureBooleanResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["type"] = o.Type
	toSerialize["value"] = o.Value
	return toSerialize, nil
}

type NullableClusterFeatureBooleanResponse struct {
	value *ClusterFeatureBooleanResponse
	isSet bool
}

func (v NullableClusterFeatureBooleanResponse) Get() *ClusterFeatureBooleanResponse {
	return v.value
}

func (v *NullableClusterFeatureBooleanResponse) Set(val *ClusterFeatureBooleanResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableClusterFeatureBooleanResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableClusterFeatureBooleanResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableClusterFeatureBooleanResponse(val *ClusterFeatureBooleanResponse) *NullableClusterFeatureBooleanResponse {
	return &NullableClusterFeatureBooleanResponse{value: val, isSet: true}
}

func (v NullableClusterFeatureBooleanResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableClusterFeatureBooleanResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
