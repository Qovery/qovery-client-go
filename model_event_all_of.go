/*
Qovery API

- Qovery is the fastest way to deploy your full-stack apps on any Cloud provider. - ℹ️ The API is stable and still in development.

API version: 1.0.3
Contact: support+api+documentation@qovery.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package qovery

import (
	"encoding/json"
)

// EventAllOf struct for EventAllOf
type EventAllOf struct {
	User   *User          `json:"user,omitempty"`
	Commit NullableCommit `json:"commit,omitempty"`
	Status *Status        `json:"status,omitempty"`
	// DRAFT - we have to specify here all the possible events
	Type *string          `json:"type,omitempty"`
	Log  *ReferenceObject `json:"log,omitempty"`
}

// NewEventAllOf instantiates a new EventAllOf object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEventAllOf() *EventAllOf {
	this := EventAllOf{}
	return &this
}

// NewEventAllOfWithDefaults instantiates a new EventAllOf object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEventAllOfWithDefaults() *EventAllOf {
	this := EventAllOf{}
	return &this
}

// GetUser returns the User field value if set, zero value otherwise.
func (o *EventAllOf) GetUser() User {
	if o == nil || o.User == nil {
		var ret User
		return ret
	}
	return *o.User
}

// GetUserOk returns a tuple with the User field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventAllOf) GetUserOk() (*User, bool) {
	if o == nil || o.User == nil {
		return nil, false
	}
	return o.User, true
}

// HasUser returns a boolean if a field has been set.
func (o *EventAllOf) HasUser() bool {
	if o != nil && o.User != nil {
		return true
	}

	return false
}

// SetUser gets a reference to the given User and assigns it to the User field.
func (o *EventAllOf) SetUser(v User) {
	o.User = &v
}

// GetCommit returns the Commit field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *EventAllOf) GetCommit() Commit {
	if o == nil || o.Commit.Get() == nil {
		var ret Commit
		return ret
	}
	return *o.Commit.Get()
}

// GetCommitOk returns a tuple with the Commit field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *EventAllOf) GetCommitOk() (*Commit, bool) {
	if o == nil {
		return nil, false
	}
	return o.Commit.Get(), o.Commit.IsSet()
}

// HasCommit returns a boolean if a field has been set.
func (o *EventAllOf) HasCommit() bool {
	if o != nil && o.Commit.IsSet() {
		return true
	}

	return false
}

// SetCommit gets a reference to the given NullableCommit and assigns it to the Commit field.
func (o *EventAllOf) SetCommit(v Commit) {
	o.Commit.Set(&v)
}

// SetCommitNil sets the value for Commit to be an explicit nil
func (o *EventAllOf) SetCommitNil() {
	o.Commit.Set(nil)
}

// UnsetCommit ensures that no value is present for Commit, not even an explicit nil
func (o *EventAllOf) UnsetCommit() {
	o.Commit.Unset()
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *EventAllOf) GetStatus() Status {
	if o == nil || o.Status == nil {
		var ret Status
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventAllOf) GetStatusOk() (*Status, bool) {
	if o == nil || o.Status == nil {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *EventAllOf) HasStatus() bool {
	if o != nil && o.Status != nil {
		return true
	}

	return false
}

// SetStatus gets a reference to the given Status and assigns it to the Status field.
func (o *EventAllOf) SetStatus(v Status) {
	o.Status = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *EventAllOf) GetType() string {
	if o == nil || o.Type == nil {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventAllOf) GetTypeOk() (*string, bool) {
	if o == nil || o.Type == nil {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *EventAllOf) HasType() bool {
	if o != nil && o.Type != nil {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *EventAllOf) SetType(v string) {
	o.Type = &v
}

// GetLog returns the Log field value if set, zero value otherwise.
func (o *EventAllOf) GetLog() ReferenceObject {
	if o == nil || o.Log == nil {
		var ret ReferenceObject
		return ret
	}
	return *o.Log
}

// GetLogOk returns a tuple with the Log field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventAllOf) GetLogOk() (*ReferenceObject, bool) {
	if o == nil || o.Log == nil {
		return nil, false
	}
	return o.Log, true
}

// HasLog returns a boolean if a field has been set.
func (o *EventAllOf) HasLog() bool {
	if o != nil && o.Log != nil {
		return true
	}

	return false
}

// SetLog gets a reference to the given ReferenceObject and assigns it to the Log field.
func (o *EventAllOf) SetLog(v ReferenceObject) {
	o.Log = &v
}

func (o EventAllOf) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.User != nil {
		toSerialize["user"] = o.User
	}
	if o.Commit.IsSet() {
		toSerialize["commit"] = o.Commit.Get()
	}
	if o.Status != nil {
		toSerialize["status"] = o.Status
	}
	if o.Type != nil {
		toSerialize["type"] = o.Type
	}
	if o.Log != nil {
		toSerialize["log"] = o.Log
	}
	return json.Marshal(toSerialize)
}

type NullableEventAllOf struct {
	value *EventAllOf
	isSet bool
}

func (v NullableEventAllOf) Get() *EventAllOf {
	return v.value
}

func (v *NullableEventAllOf) Set(val *EventAllOf) {
	v.value = val
	v.isSet = true
}

func (v NullableEventAllOf) IsSet() bool {
	return v.isSet
}

func (v *NullableEventAllOf) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEventAllOf(val *EventAllOf) *NullableEventAllOf {
	return &NullableEventAllOf{value: val, isSet: true}
}

func (v NullableEventAllOf) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEventAllOf) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
