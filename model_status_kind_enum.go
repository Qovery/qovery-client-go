/*
Qovery API

- Qovery is the fastest way to deploy your full-stack apps on any Cloud provider. - ℹ️ The API is stable and still in development.

API version: 1.0.3
Contact: support+api+documentation@qovery.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package qovery

import (
	"encoding/json"
	"fmt"
)

// StatusKindEnum the model 'StatusKindEnum'
type StatusKindEnum string

// List of StatusKindEnum
const (
	STATUSKINDENUM_CANCELED               StatusKindEnum = "CANCELED"
	STATUSKINDENUM_CANCELING              StatusKindEnum = "CANCELING"
	STATUSKINDENUM_DELETED                StatusKindEnum = "DELETED"
	STATUSKINDENUM_DELETE_ERROR           StatusKindEnum = "DELETE_ERROR"
	STATUSKINDENUM_DELETE_IN_PROGRESS     StatusKindEnum = "DELETE_IN_PROGRESS"
	STATUSKINDENUM_DEPLOYED               StatusKindEnum = "DEPLOYED"
	STATUSKINDENUM_DEPLOYMENT_ERROR       StatusKindEnum = "DEPLOYMENT_ERROR"
	STATUSKINDENUM_DEPLOYMENT_IN_PROGRESS StatusKindEnum = "DEPLOYMENT_IN_PROGRESS"
	STATUSKINDENUM_ERROR                  StatusKindEnum = "ERROR"
	STATUSKINDENUM_PAUSED                 StatusKindEnum = "PAUSED"
	STATUSKINDENUM_PAUSE_ERROR            StatusKindEnum = "PAUSE_ERROR"
	STATUSKINDENUM_PAUSE_IN_PROGRESS      StatusKindEnum = "PAUSE_IN_PROGRESS"
	STATUSKINDENUM_WAITING                StatusKindEnum = "WAITING"
)

// All allowed values of StatusKindEnum enum
var AllowedStatusKindEnumEnumValues = []StatusKindEnum{
	"CANCELED",
	"CANCELING",
	"DELETED",
	"DELETE_ERROR",
	"DELETE_IN_PROGRESS",
	"DEPLOYED",
	"DEPLOYMENT_ERROR",
	"DEPLOYMENT_IN_PROGRESS",
	"ERROR",
	"PAUSED",
	"PAUSE_ERROR",
	"PAUSE_IN_PROGRESS",
	"WAITING",
}

func (v *StatusKindEnum) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := StatusKindEnum(value)
	for _, existing := range AllowedStatusKindEnumEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid StatusKindEnum", value)
}

// NewStatusKindEnumFromValue returns a pointer to a valid StatusKindEnum
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewStatusKindEnumFromValue(v string) (*StatusKindEnum, error) {
	ev := StatusKindEnum(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for StatusKindEnum: valid values are %v", v, AllowedStatusKindEnumEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v StatusKindEnum) IsValid() bool {
	for _, existing := range AllowedStatusKindEnumEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to StatusKindEnum value
func (v StatusKindEnum) Ptr() *StatusKindEnum {
	return &v
}

type NullableStatusKindEnum struct {
	value *StatusKindEnum
	isSet bool
}

func (v NullableStatusKindEnum) Get() *StatusKindEnum {
	return v.value
}

func (v *NullableStatusKindEnum) Set(val *StatusKindEnum) {
	v.value = val
	v.isSet = true
}

func (v NullableStatusKindEnum) IsSet() bool {
	return v.isSet
}

func (v *NullableStatusKindEnum) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableStatusKindEnum(val *StatusKindEnum) *NullableStatusKindEnum {
	return &NullableStatusKindEnum{value: val, isSet: true}
}

func (v NullableStatusKindEnum) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableStatusKindEnum) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
