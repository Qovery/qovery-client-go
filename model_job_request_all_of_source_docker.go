/*
Qovery API

- Qovery is the fastest way to deploy your full-stack apps on any Cloud provider. - ℹ️ The API is stable and still in development.

API version: 1.0.3
Contact: support+api+documentation@qovery.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package qovery

import (
	"encoding/json"
)

// checks if the JobRequestAllOfSourceDocker type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &JobRequestAllOfSourceDocker{}

// JobRequestAllOfSourceDocker struct for JobRequestAllOfSourceDocker
type JobRequestAllOfSourceDocker struct {
	// The path of the associated Dockerfile. Only if you are using build_mode = DOCKER
	DockerfilePath NullableString                   `json:"dockerfile_path,omitempty"`
	GitRepository  *ApplicationGitRepositoryRequest `json:"git_repository,omitempty"`
	// The content of your dockerfile if it is not stored inside your git repository
	DockerfileRaw NullableString `json:"dockerfile_raw,omitempty"`
}

// NewJobRequestAllOfSourceDocker instantiates a new JobRequestAllOfSourceDocker object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewJobRequestAllOfSourceDocker() *JobRequestAllOfSourceDocker {
	this := JobRequestAllOfSourceDocker{}
	return &this
}

// NewJobRequestAllOfSourceDockerWithDefaults instantiates a new JobRequestAllOfSourceDocker object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewJobRequestAllOfSourceDockerWithDefaults() *JobRequestAllOfSourceDocker {
	this := JobRequestAllOfSourceDocker{}
	return &this
}

// GetDockerfilePath returns the DockerfilePath field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *JobRequestAllOfSourceDocker) GetDockerfilePath() string {
	if o == nil || IsNil(o.DockerfilePath.Get()) {
		var ret string
		return ret
	}
	return *o.DockerfilePath.Get()
}

// GetDockerfilePathOk returns a tuple with the DockerfilePath field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *JobRequestAllOfSourceDocker) GetDockerfilePathOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.DockerfilePath.Get(), o.DockerfilePath.IsSet()
}

// HasDockerfilePath returns a boolean if a field has been set.
func (o *JobRequestAllOfSourceDocker) HasDockerfilePath() bool {
	if o != nil && o.DockerfilePath.IsSet() {
		return true
	}

	return false
}

// SetDockerfilePath gets a reference to the given NullableString and assigns it to the DockerfilePath field.
func (o *JobRequestAllOfSourceDocker) SetDockerfilePath(v string) {
	o.DockerfilePath.Set(&v)
}

// SetDockerfilePathNil sets the value for DockerfilePath to be an explicit nil
func (o *JobRequestAllOfSourceDocker) SetDockerfilePathNil() {
	o.DockerfilePath.Set(nil)
}

// UnsetDockerfilePath ensures that no value is present for DockerfilePath, not even an explicit nil
func (o *JobRequestAllOfSourceDocker) UnsetDockerfilePath() {
	o.DockerfilePath.Unset()
}

// GetGitRepository returns the GitRepository field value if set, zero value otherwise.
func (o *JobRequestAllOfSourceDocker) GetGitRepository() ApplicationGitRepositoryRequest {
	if o == nil || IsNil(o.GitRepository) {
		var ret ApplicationGitRepositoryRequest
		return ret
	}
	return *o.GitRepository
}

// GetGitRepositoryOk returns a tuple with the GitRepository field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JobRequestAllOfSourceDocker) GetGitRepositoryOk() (*ApplicationGitRepositoryRequest, bool) {
	if o == nil || IsNil(o.GitRepository) {
		return nil, false
	}
	return o.GitRepository, true
}

// HasGitRepository returns a boolean if a field has been set.
func (o *JobRequestAllOfSourceDocker) HasGitRepository() bool {
	if o != nil && !IsNil(o.GitRepository) {
		return true
	}

	return false
}

// SetGitRepository gets a reference to the given ApplicationGitRepositoryRequest and assigns it to the GitRepository field.
func (o *JobRequestAllOfSourceDocker) SetGitRepository(v ApplicationGitRepositoryRequest) {
	o.GitRepository = &v
}

// GetDockerfileRaw returns the DockerfileRaw field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *JobRequestAllOfSourceDocker) GetDockerfileRaw() string {
	if o == nil || IsNil(o.DockerfileRaw.Get()) {
		var ret string
		return ret
	}
	return *o.DockerfileRaw.Get()
}

// GetDockerfileRawOk returns a tuple with the DockerfileRaw field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *JobRequestAllOfSourceDocker) GetDockerfileRawOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.DockerfileRaw.Get(), o.DockerfileRaw.IsSet()
}

// HasDockerfileRaw returns a boolean if a field has been set.
func (o *JobRequestAllOfSourceDocker) HasDockerfileRaw() bool {
	if o != nil && o.DockerfileRaw.IsSet() {
		return true
	}

	return false
}

// SetDockerfileRaw gets a reference to the given NullableString and assigns it to the DockerfileRaw field.
func (o *JobRequestAllOfSourceDocker) SetDockerfileRaw(v string) {
	o.DockerfileRaw.Set(&v)
}

// SetDockerfileRawNil sets the value for DockerfileRaw to be an explicit nil
func (o *JobRequestAllOfSourceDocker) SetDockerfileRawNil() {
	o.DockerfileRaw.Set(nil)
}

// UnsetDockerfileRaw ensures that no value is present for DockerfileRaw, not even an explicit nil
func (o *JobRequestAllOfSourceDocker) UnsetDockerfileRaw() {
	o.DockerfileRaw.Unset()
}

func (o JobRequestAllOfSourceDocker) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o JobRequestAllOfSourceDocker) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.DockerfilePath.IsSet() {
		toSerialize["dockerfile_path"] = o.DockerfilePath.Get()
	}
	if !IsNil(o.GitRepository) {
		toSerialize["git_repository"] = o.GitRepository
	}
	if o.DockerfileRaw.IsSet() {
		toSerialize["dockerfile_raw"] = o.DockerfileRaw.Get()
	}
	return toSerialize, nil
}

type NullableJobRequestAllOfSourceDocker struct {
	value *JobRequestAllOfSourceDocker
	isSet bool
}

func (v NullableJobRequestAllOfSourceDocker) Get() *JobRequestAllOfSourceDocker {
	return v.value
}

func (v *NullableJobRequestAllOfSourceDocker) Set(val *JobRequestAllOfSourceDocker) {
	v.value = val
	v.isSet = true
}

func (v NullableJobRequestAllOfSourceDocker) IsSet() bool {
	return v.isSet
}

func (v *NullableJobRequestAllOfSourceDocker) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableJobRequestAllOfSourceDocker(val *JobRequestAllOfSourceDocker) *NullableJobRequestAllOfSourceDocker {
	return &NullableJobRequestAllOfSourceDocker{value: val, isSet: true}
}

func (v NullableJobRequestAllOfSourceDocker) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableJobRequestAllOfSourceDocker) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
