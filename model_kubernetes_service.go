/*
Qovery API

- Qovery is the fastest way to deploy your full-stack apps on any Cloud provider. - ℹ️ The API is stable and still in development.

API version: 1.0.4
Contact: support+api+documentation@qovery.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package qovery

import (
	"encoding/json"
	"fmt"
)

// checks if the KubernetesService type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &KubernetesService{}

// KubernetesService struct for KubernetesService
type KubernetesService struct {
	Metadata             KubernetesMetadata    `json:"metadata"`
	ServiceSpec          KubernetesServiceSpec `json:"service_spec"`
	AdditionalProperties map[string]interface{}
}

type _KubernetesService KubernetesService

// NewKubernetesService instantiates a new KubernetesService object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewKubernetesService(metadata KubernetesMetadata, serviceSpec KubernetesServiceSpec) *KubernetesService {
	this := KubernetesService{}
	this.Metadata = metadata
	this.ServiceSpec = serviceSpec
	return &this
}

// NewKubernetesServiceWithDefaults instantiates a new KubernetesService object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewKubernetesServiceWithDefaults() *KubernetesService {
	this := KubernetesService{}
	return &this
}

// GetMetadata returns the Metadata field value
func (o *KubernetesService) GetMetadata() KubernetesMetadata {
	if o == nil {
		var ret KubernetesMetadata
		return ret
	}

	return o.Metadata
}

// GetMetadataOk returns a tuple with the Metadata field value
// and a boolean to check if the value has been set.
func (o *KubernetesService) GetMetadataOk() (*KubernetesMetadata, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Metadata, true
}

// SetMetadata sets field value
func (o *KubernetesService) SetMetadata(v KubernetesMetadata) {
	o.Metadata = v
}

// GetServiceSpec returns the ServiceSpec field value
func (o *KubernetesService) GetServiceSpec() KubernetesServiceSpec {
	if o == nil {
		var ret KubernetesServiceSpec
		return ret
	}

	return o.ServiceSpec
}

// GetServiceSpecOk returns a tuple with the ServiceSpec field value
// and a boolean to check if the value has been set.
func (o *KubernetesService) GetServiceSpecOk() (*KubernetesServiceSpec, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ServiceSpec, true
}

// SetServiceSpec sets field value
func (o *KubernetesService) SetServiceSpec(v KubernetesServiceSpec) {
	o.ServiceSpec = v
}

func (o KubernetesService) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o KubernetesService) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["metadata"] = o.Metadata
	toSerialize["service_spec"] = o.ServiceSpec

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *KubernetesService) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"metadata",
		"service_spec",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varKubernetesService := _KubernetesService{}

	err = json.Unmarshal(data, &varKubernetesService)

	if err != nil {
		return err
	}

	*o = KubernetesService(varKubernetesService)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "metadata")
		delete(additionalProperties, "service_spec")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableKubernetesService struct {
	value *KubernetesService
	isSet bool
}

func (v NullableKubernetesService) Get() *KubernetesService {
	return v.value
}

func (v *NullableKubernetesService) Set(val *KubernetesService) {
	v.value = val
	v.isSet = true
}

func (v NullableKubernetesService) IsSet() bool {
	return v.isSet
}

func (v *NullableKubernetesService) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableKubernetesService(val *KubernetesService) *NullableKubernetesService {
	return &NullableKubernetesService{value: val, isSet: true}
}

func (v NullableKubernetesService) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableKubernetesService) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
