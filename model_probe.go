/*
Qovery API

- Qovery is the fastest way to deploy your full-stack apps on any Cloud provider. - ℹ️ The API is stable and still in development.

API version: 1.0.4
Contact: support+api+documentation@qovery.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package qovery

import (
	"encoding/json"
)

// checks if the Probe type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Probe{}

// Probe struct for Probe
type Probe struct {
	Type                 *ProbeType `json:"type,omitempty"`
	InitialDelaySeconds  *int32     `json:"initial_delay_seconds,omitempty"`
	PeriodSeconds        *int32     `json:"period_seconds,omitempty"`
	TimeoutSeconds       *int32     `json:"timeout_seconds,omitempty"`
	SuccessThreshold     *int32     `json:"success_threshold,omitempty"`
	FailureThreshold     *int32     `json:"failure_threshold,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _Probe Probe

// NewProbe instantiates a new Probe object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewProbe() *Probe {
	this := Probe{}
	var initialDelaySeconds int32 = 30
	this.InitialDelaySeconds = &initialDelaySeconds
	var periodSeconds int32 = 10
	this.PeriodSeconds = &periodSeconds
	var timeoutSeconds int32 = 5
	this.TimeoutSeconds = &timeoutSeconds
	var successThreshold int32 = 1
	this.SuccessThreshold = &successThreshold
	var failureThreshold int32 = 9
	this.FailureThreshold = &failureThreshold
	return &this
}

// NewProbeWithDefaults instantiates a new Probe object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewProbeWithDefaults() *Probe {
	this := Probe{}
	var initialDelaySeconds int32 = 30
	this.InitialDelaySeconds = &initialDelaySeconds
	var periodSeconds int32 = 10
	this.PeriodSeconds = &periodSeconds
	var timeoutSeconds int32 = 5
	this.TimeoutSeconds = &timeoutSeconds
	var successThreshold int32 = 1
	this.SuccessThreshold = &successThreshold
	var failureThreshold int32 = 9
	this.FailureThreshold = &failureThreshold
	return &this
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *Probe) GetType() ProbeType {
	if o == nil || IsNil(o.Type) {
		var ret ProbeType
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Probe) GetTypeOk() (*ProbeType, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *Probe) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given ProbeType and assigns it to the Type field.
func (o *Probe) SetType(v ProbeType) {
	o.Type = &v
}

// GetInitialDelaySeconds returns the InitialDelaySeconds field value if set, zero value otherwise.
func (o *Probe) GetInitialDelaySeconds() int32 {
	if o == nil || IsNil(o.InitialDelaySeconds) {
		var ret int32
		return ret
	}
	return *o.InitialDelaySeconds
}

// GetInitialDelaySecondsOk returns a tuple with the InitialDelaySeconds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Probe) GetInitialDelaySecondsOk() (*int32, bool) {
	if o == nil || IsNil(o.InitialDelaySeconds) {
		return nil, false
	}
	return o.InitialDelaySeconds, true
}

// HasInitialDelaySeconds returns a boolean if a field has been set.
func (o *Probe) HasInitialDelaySeconds() bool {
	if o != nil && !IsNil(o.InitialDelaySeconds) {
		return true
	}

	return false
}

// SetInitialDelaySeconds gets a reference to the given int32 and assigns it to the InitialDelaySeconds field.
func (o *Probe) SetInitialDelaySeconds(v int32) {
	o.InitialDelaySeconds = &v
}

// GetPeriodSeconds returns the PeriodSeconds field value if set, zero value otherwise.
func (o *Probe) GetPeriodSeconds() int32 {
	if o == nil || IsNil(o.PeriodSeconds) {
		var ret int32
		return ret
	}
	return *o.PeriodSeconds
}

// GetPeriodSecondsOk returns a tuple with the PeriodSeconds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Probe) GetPeriodSecondsOk() (*int32, bool) {
	if o == nil || IsNil(o.PeriodSeconds) {
		return nil, false
	}
	return o.PeriodSeconds, true
}

// HasPeriodSeconds returns a boolean if a field has been set.
func (o *Probe) HasPeriodSeconds() bool {
	if o != nil && !IsNil(o.PeriodSeconds) {
		return true
	}

	return false
}

// SetPeriodSeconds gets a reference to the given int32 and assigns it to the PeriodSeconds field.
func (o *Probe) SetPeriodSeconds(v int32) {
	o.PeriodSeconds = &v
}

// GetTimeoutSeconds returns the TimeoutSeconds field value if set, zero value otherwise.
func (o *Probe) GetTimeoutSeconds() int32 {
	if o == nil || IsNil(o.TimeoutSeconds) {
		var ret int32
		return ret
	}
	return *o.TimeoutSeconds
}

// GetTimeoutSecondsOk returns a tuple with the TimeoutSeconds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Probe) GetTimeoutSecondsOk() (*int32, bool) {
	if o == nil || IsNil(o.TimeoutSeconds) {
		return nil, false
	}
	return o.TimeoutSeconds, true
}

// HasTimeoutSeconds returns a boolean if a field has been set.
func (o *Probe) HasTimeoutSeconds() bool {
	if o != nil && !IsNil(o.TimeoutSeconds) {
		return true
	}

	return false
}

// SetTimeoutSeconds gets a reference to the given int32 and assigns it to the TimeoutSeconds field.
func (o *Probe) SetTimeoutSeconds(v int32) {
	o.TimeoutSeconds = &v
}

// GetSuccessThreshold returns the SuccessThreshold field value if set, zero value otherwise.
func (o *Probe) GetSuccessThreshold() int32 {
	if o == nil || IsNil(o.SuccessThreshold) {
		var ret int32
		return ret
	}
	return *o.SuccessThreshold
}

// GetSuccessThresholdOk returns a tuple with the SuccessThreshold field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Probe) GetSuccessThresholdOk() (*int32, bool) {
	if o == nil || IsNil(o.SuccessThreshold) {
		return nil, false
	}
	return o.SuccessThreshold, true
}

// HasSuccessThreshold returns a boolean if a field has been set.
func (o *Probe) HasSuccessThreshold() bool {
	if o != nil && !IsNil(o.SuccessThreshold) {
		return true
	}

	return false
}

// SetSuccessThreshold gets a reference to the given int32 and assigns it to the SuccessThreshold field.
func (o *Probe) SetSuccessThreshold(v int32) {
	o.SuccessThreshold = &v
}

// GetFailureThreshold returns the FailureThreshold field value if set, zero value otherwise.
func (o *Probe) GetFailureThreshold() int32 {
	if o == nil || IsNil(o.FailureThreshold) {
		var ret int32
		return ret
	}
	return *o.FailureThreshold
}

// GetFailureThresholdOk returns a tuple with the FailureThreshold field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Probe) GetFailureThresholdOk() (*int32, bool) {
	if o == nil || IsNil(o.FailureThreshold) {
		return nil, false
	}
	return o.FailureThreshold, true
}

// HasFailureThreshold returns a boolean if a field has been set.
func (o *Probe) HasFailureThreshold() bool {
	if o != nil && !IsNil(o.FailureThreshold) {
		return true
	}

	return false
}

// SetFailureThreshold gets a reference to the given int32 and assigns it to the FailureThreshold field.
func (o *Probe) SetFailureThreshold(v int32) {
	o.FailureThreshold = &v
}

func (o Probe) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Probe) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !IsNil(o.InitialDelaySeconds) {
		toSerialize["initial_delay_seconds"] = o.InitialDelaySeconds
	}
	if !IsNil(o.PeriodSeconds) {
		toSerialize["period_seconds"] = o.PeriodSeconds
	}
	if !IsNil(o.TimeoutSeconds) {
		toSerialize["timeout_seconds"] = o.TimeoutSeconds
	}
	if !IsNil(o.SuccessThreshold) {
		toSerialize["success_threshold"] = o.SuccessThreshold
	}
	if !IsNil(o.FailureThreshold) {
		toSerialize["failure_threshold"] = o.FailureThreshold
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *Probe) UnmarshalJSON(data []byte) (err error) {
	varProbe := _Probe{}

	err = json.Unmarshal(data, &varProbe)

	if err != nil {
		return err
	}

	*o = Probe(varProbe)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "type")
		delete(additionalProperties, "initial_delay_seconds")
		delete(additionalProperties, "period_seconds")
		delete(additionalProperties, "timeout_seconds")
		delete(additionalProperties, "success_threshold")
		delete(additionalProperties, "failure_threshold")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableProbe struct {
	value *Probe
	isSet bool
}

func (v NullableProbe) Get() *Probe {
	return v.value
}

func (v *NullableProbe) Set(val *Probe) {
	v.value = val
	v.isSet = true
}

func (v NullableProbe) IsSet() bool {
	return v.isSet
}

func (v *NullableProbe) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableProbe(val *Probe) *NullableProbe {
	return &NullableProbe{value: val, isSet: true}
}

func (v NullableProbe) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableProbe) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
