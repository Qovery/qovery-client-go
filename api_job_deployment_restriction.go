/*
Qovery API

- Qovery is the fastest way to deploy your full-stack apps on any Cloud provider. - ℹ️ The API is stable and still in development.

API version: 1.0.3
Contact: support+api+documentation@qovery.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package qovery

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)

// JobDeploymentRestrictionAPIService JobDeploymentRestrictionAPI service
type JobDeploymentRestrictionAPIService service

type ApiCreateJobDeploymentRestrictionRequest struct {
	ctx                             context.Context
	ApiService                      *JobDeploymentRestrictionAPIService
	jobId                           string
	jobDeploymentRestrictionRequest *JobDeploymentRestrictionRequest
}

func (r ApiCreateJobDeploymentRestrictionRequest) JobDeploymentRestrictionRequest(jobDeploymentRestrictionRequest JobDeploymentRestrictionRequest) ApiCreateJobDeploymentRestrictionRequest {
	r.jobDeploymentRestrictionRequest = &jobDeploymentRestrictionRequest
	return r
}

func (r ApiCreateJobDeploymentRestrictionRequest) Execute() (*JobDeploymentRestrictionResponse, *http.Response, error) {
	return r.ApiService.CreateJobDeploymentRestrictionExecute(r)
}

/*
CreateJobDeploymentRestriction Create a job deployment restriction

Create a job deployment restriction

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param jobId Job ID
	@return ApiCreateJobDeploymentRestrictionRequest
*/
func (a *JobDeploymentRestrictionAPIService) CreateJobDeploymentRestriction(ctx context.Context, jobId string) ApiCreateJobDeploymentRestrictionRequest {
	return ApiCreateJobDeploymentRestrictionRequest{
		ApiService: a,
		ctx:        ctx,
		jobId:      jobId,
	}
}

// Execute executes the request
//
//	@return JobDeploymentRestrictionResponse
func (a *JobDeploymentRestrictionAPIService) CreateJobDeploymentRestrictionExecute(r ApiCreateJobDeploymentRestrictionRequest) (*JobDeploymentRestrictionResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *JobDeploymentRestrictionResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "JobDeploymentRestrictionAPIService.CreateJobDeploymentRestriction")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/job/{jobId}/deploymentRestriction"
	localVarPath = strings.Replace(localVarPath, "{"+"jobId"+"}", url.PathEscape(parameterValueToString(r.jobId, "jobId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.jobDeploymentRestrictionRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["ApiKeyAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDeleteJobDeploymentRestrictionRequest struct {
	ctx                     context.Context
	ApiService              *JobDeploymentRestrictionAPIService
	jobId                   string
	deploymentRestrictionId string
}

func (r ApiDeleteJobDeploymentRestrictionRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeleteJobDeploymentRestrictionExecute(r)
}

/*
DeleteJobDeploymentRestriction Delete a job deployment restriction

Delete a job deployment restriction

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param jobId Job ID
	@param deploymentRestrictionId Deployment Restriction ID
	@return ApiDeleteJobDeploymentRestrictionRequest
*/
func (a *JobDeploymentRestrictionAPIService) DeleteJobDeploymentRestriction(ctx context.Context, jobId string, deploymentRestrictionId string) ApiDeleteJobDeploymentRestrictionRequest {
	return ApiDeleteJobDeploymentRestrictionRequest{
		ApiService:              a,
		ctx:                     ctx,
		jobId:                   jobId,
		deploymentRestrictionId: deploymentRestrictionId,
	}
}

// Execute executes the request
func (a *JobDeploymentRestrictionAPIService) DeleteJobDeploymentRestrictionExecute(r ApiDeleteJobDeploymentRestrictionRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodDelete
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "JobDeploymentRestrictionAPIService.DeleteJobDeploymentRestriction")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/job/{jobId}/deploymentRestriction/{deploymentRestrictionId}"
	localVarPath = strings.Replace(localVarPath, "{"+"jobId"+"}", url.PathEscape(parameterValueToString(r.jobId, "jobId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"deploymentRestrictionId"+"}", url.PathEscape(parameterValueToString(r.deploymentRestrictionId, "deploymentRestrictionId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["ApiKeyAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiEditJobDeploymentRestrictionRequest struct {
	ctx                             context.Context
	ApiService                      *JobDeploymentRestrictionAPIService
	jobId                           string
	deploymentRestrictionId         string
	jobDeploymentRestrictionRequest *JobDeploymentRestrictionRequest
}

func (r ApiEditJobDeploymentRestrictionRequest) JobDeploymentRestrictionRequest(jobDeploymentRestrictionRequest JobDeploymentRestrictionRequest) ApiEditJobDeploymentRestrictionRequest {
	r.jobDeploymentRestrictionRequest = &jobDeploymentRestrictionRequest
	return r
}

func (r ApiEditJobDeploymentRestrictionRequest) Execute() (*JobDeploymentRestrictionResponse, *http.Response, error) {
	return r.ApiService.EditJobDeploymentRestrictionExecute(r)
}

/*
EditJobDeploymentRestriction Edit a job deployment restriction

Edit a job deployment restriction

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param jobId Job ID
	@param deploymentRestrictionId Deployment Restriction ID
	@return ApiEditJobDeploymentRestrictionRequest
*/
func (a *JobDeploymentRestrictionAPIService) EditJobDeploymentRestriction(ctx context.Context, jobId string, deploymentRestrictionId string) ApiEditJobDeploymentRestrictionRequest {
	return ApiEditJobDeploymentRestrictionRequest{
		ApiService:              a,
		ctx:                     ctx,
		jobId:                   jobId,
		deploymentRestrictionId: deploymentRestrictionId,
	}
}

// Execute executes the request
//
//	@return JobDeploymentRestrictionResponse
func (a *JobDeploymentRestrictionAPIService) EditJobDeploymentRestrictionExecute(r ApiEditJobDeploymentRestrictionRequest) (*JobDeploymentRestrictionResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPut
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *JobDeploymentRestrictionResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "JobDeploymentRestrictionAPIService.EditJobDeploymentRestriction")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/job/{jobId}/deploymentRestriction/{deploymentRestrictionId}"
	localVarPath = strings.Replace(localVarPath, "{"+"jobId"+"}", url.PathEscape(parameterValueToString(r.jobId, "jobId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"deploymentRestrictionId"+"}", url.PathEscape(parameterValueToString(r.deploymentRestrictionId, "deploymentRestrictionId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.jobDeploymentRestrictionRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["ApiKeyAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetJobDeploymentRestrictionsRequest struct {
	ctx        context.Context
	ApiService *JobDeploymentRestrictionAPIService
	jobId      string
}

func (r ApiGetJobDeploymentRestrictionsRequest) Execute() (*JobDeploymentRestrictionResponseList, *http.Response, error) {
	return r.ApiService.GetJobDeploymentRestrictionsExecute(r)
}

/*
GetJobDeploymentRestrictions Get job deployment restrictions

Get job deployment restrictions

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param jobId Job ID
	@return ApiGetJobDeploymentRestrictionsRequest
*/
func (a *JobDeploymentRestrictionAPIService) GetJobDeploymentRestrictions(ctx context.Context, jobId string) ApiGetJobDeploymentRestrictionsRequest {
	return ApiGetJobDeploymentRestrictionsRequest{
		ApiService: a,
		ctx:        ctx,
		jobId:      jobId,
	}
}

// Execute executes the request
//
//	@return JobDeploymentRestrictionResponseList
func (a *JobDeploymentRestrictionAPIService) GetJobDeploymentRestrictionsExecute(r ApiGetJobDeploymentRestrictionsRequest) (*JobDeploymentRestrictionResponseList, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *JobDeploymentRestrictionResponseList
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "JobDeploymentRestrictionAPIService.GetJobDeploymentRestrictions")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/job/{jobId}/deploymentRestriction"
	localVarPath = strings.Replace(localVarPath, "{"+"jobId"+"}", url.PathEscape(parameterValueToString(r.jobId, "jobId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["ApiKeyAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
