/*
Qovery API

- Qovery is the fastest way to deploy your full-stack apps on any Cloud provider. - ℹ️ The API is stable and still in development.

API version: 1.0.3
Contact: support+api+documentation@qovery.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package qovery

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the SecretEditRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SecretEditRequest{}

// SecretEditRequest struct for SecretEditRequest
type SecretEditRequest struct {
	Value *string `json:"value,omitempty"`
	Key   string  `json:"key"`
}

type _SecretEditRequest SecretEditRequest

// NewSecretEditRequest instantiates a new SecretEditRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSecretEditRequest(key string) *SecretEditRequest {
	this := SecretEditRequest{}
	this.Key = key
	return &this
}

// NewSecretEditRequestWithDefaults instantiates a new SecretEditRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSecretEditRequestWithDefaults() *SecretEditRequest {
	this := SecretEditRequest{}
	return &this
}

// GetValue returns the Value field value if set, zero value otherwise.
func (o *SecretEditRequest) GetValue() string {
	if o == nil || IsNil(o.Value) {
		var ret string
		return ret
	}
	return *o.Value
}

// GetValueOk returns a tuple with the Value field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SecretEditRequest) GetValueOk() (*string, bool) {
	if o == nil || IsNil(o.Value) {
		return nil, false
	}
	return o.Value, true
}

// HasValue returns a boolean if a field has been set.
func (o *SecretEditRequest) HasValue() bool {
	if o != nil && !IsNil(o.Value) {
		return true
	}

	return false
}

// SetValue gets a reference to the given string and assigns it to the Value field.
func (o *SecretEditRequest) SetValue(v string) {
	o.Value = &v
}

// GetKey returns the Key field value
func (o *SecretEditRequest) GetKey() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Key
}

// GetKeyOk returns a tuple with the Key field value
// and a boolean to check if the value has been set.
func (o *SecretEditRequest) GetKeyOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Key, true
}

// SetKey sets field value
func (o *SecretEditRequest) SetKey(v string) {
	o.Key = v
}

func (o SecretEditRequest) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SecretEditRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Value) {
		toSerialize["value"] = o.Value
	}
	toSerialize["key"] = o.Key
	return toSerialize, nil
}

func (o *SecretEditRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"key",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varSecretEditRequest := _SecretEditRequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varSecretEditRequest)

	if err != nil {
		return err
	}

	*o = SecretEditRequest(varSecretEditRequest)

	return err
}

type NullableSecretEditRequest struct {
	value *SecretEditRequest
	isSet bool
}

func (v NullableSecretEditRequest) Get() *SecretEditRequest {
	return v.value
}

func (v *NullableSecretEditRequest) Set(val *SecretEditRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableSecretEditRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableSecretEditRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSecretEditRequest(val *SecretEditRequest) *NullableSecretEditRequest {
	return &NullableSecretEditRequest{value: val, isSet: true}
}

func (v NullableSecretEditRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSecretEditRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
