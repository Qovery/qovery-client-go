/*
Qovery API

- Qovery is the fastest way to deploy your full-stack apps on any Cloud provider. - ℹ️ The API is stable and still in development.

API version: 1.0.3
Contact: support+api+documentation@qovery.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package qovery

import (
	"encoding/json"
	"time"
)

// checks if the PaidUsage type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PaidUsage{}

// PaidUsage struct for PaidUsage
type PaidUsage struct {
	MaxDeploymentsPerMonth *int32       `json:"max_deployments_per_month,omitempty"`
	ConsumedDeployments    *int32       `json:"consumed_deployments,omitempty"`
	MonthlyPlanCost        *float32     `json:"monthly_plan_cost,omitempty"`
	MonthlyPlanCostInCents *int32       `json:"monthly_plan_cost_in_cents,omitempty"`
	RemainingDeployments   *int32       `json:"remaining_deployments,omitempty"`
	DeploymentsExceeded    *bool        `json:"deployments_exceeded,omitempty"`
	RenewalAt              NullableTime `json:"renewal_at,omitempty"`
	AdditionalProperties   map[string]interface{}
}

type _PaidUsage PaidUsage

// NewPaidUsage instantiates a new PaidUsage object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPaidUsage() *PaidUsage {
	this := PaidUsage{}
	return &this
}

// NewPaidUsageWithDefaults instantiates a new PaidUsage object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPaidUsageWithDefaults() *PaidUsage {
	this := PaidUsage{}
	return &this
}

// GetMaxDeploymentsPerMonth returns the MaxDeploymentsPerMonth field value if set, zero value otherwise.
func (o *PaidUsage) GetMaxDeploymentsPerMonth() int32 {
	if o == nil || IsNil(o.MaxDeploymentsPerMonth) {
		var ret int32
		return ret
	}
	return *o.MaxDeploymentsPerMonth
}

// GetMaxDeploymentsPerMonthOk returns a tuple with the MaxDeploymentsPerMonth field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PaidUsage) GetMaxDeploymentsPerMonthOk() (*int32, bool) {
	if o == nil || IsNil(o.MaxDeploymentsPerMonth) {
		return nil, false
	}
	return o.MaxDeploymentsPerMonth, true
}

// HasMaxDeploymentsPerMonth returns a boolean if a field has been set.
func (o *PaidUsage) HasMaxDeploymentsPerMonth() bool {
	if o != nil && !IsNil(o.MaxDeploymentsPerMonth) {
		return true
	}

	return false
}

// SetMaxDeploymentsPerMonth gets a reference to the given int32 and assigns it to the MaxDeploymentsPerMonth field.
func (o *PaidUsage) SetMaxDeploymentsPerMonth(v int32) {
	o.MaxDeploymentsPerMonth = &v
}

// GetConsumedDeployments returns the ConsumedDeployments field value if set, zero value otherwise.
func (o *PaidUsage) GetConsumedDeployments() int32 {
	if o == nil || IsNil(o.ConsumedDeployments) {
		var ret int32
		return ret
	}
	return *o.ConsumedDeployments
}

// GetConsumedDeploymentsOk returns a tuple with the ConsumedDeployments field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PaidUsage) GetConsumedDeploymentsOk() (*int32, bool) {
	if o == nil || IsNil(o.ConsumedDeployments) {
		return nil, false
	}
	return o.ConsumedDeployments, true
}

// HasConsumedDeployments returns a boolean if a field has been set.
func (o *PaidUsage) HasConsumedDeployments() bool {
	if o != nil && !IsNil(o.ConsumedDeployments) {
		return true
	}

	return false
}

// SetConsumedDeployments gets a reference to the given int32 and assigns it to the ConsumedDeployments field.
func (o *PaidUsage) SetConsumedDeployments(v int32) {
	o.ConsumedDeployments = &v
}

// GetMonthlyPlanCost returns the MonthlyPlanCost field value if set, zero value otherwise.
func (o *PaidUsage) GetMonthlyPlanCost() float32 {
	if o == nil || IsNil(o.MonthlyPlanCost) {
		var ret float32
		return ret
	}
	return *o.MonthlyPlanCost
}

// GetMonthlyPlanCostOk returns a tuple with the MonthlyPlanCost field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PaidUsage) GetMonthlyPlanCostOk() (*float32, bool) {
	if o == nil || IsNil(o.MonthlyPlanCost) {
		return nil, false
	}
	return o.MonthlyPlanCost, true
}

// HasMonthlyPlanCost returns a boolean if a field has been set.
func (o *PaidUsage) HasMonthlyPlanCost() bool {
	if o != nil && !IsNil(o.MonthlyPlanCost) {
		return true
	}

	return false
}

// SetMonthlyPlanCost gets a reference to the given float32 and assigns it to the MonthlyPlanCost field.
func (o *PaidUsage) SetMonthlyPlanCost(v float32) {
	o.MonthlyPlanCost = &v
}

// GetMonthlyPlanCostInCents returns the MonthlyPlanCostInCents field value if set, zero value otherwise.
func (o *PaidUsage) GetMonthlyPlanCostInCents() int32 {
	if o == nil || IsNil(o.MonthlyPlanCostInCents) {
		var ret int32
		return ret
	}
	return *o.MonthlyPlanCostInCents
}

// GetMonthlyPlanCostInCentsOk returns a tuple with the MonthlyPlanCostInCents field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PaidUsage) GetMonthlyPlanCostInCentsOk() (*int32, bool) {
	if o == nil || IsNil(o.MonthlyPlanCostInCents) {
		return nil, false
	}
	return o.MonthlyPlanCostInCents, true
}

// HasMonthlyPlanCostInCents returns a boolean if a field has been set.
func (o *PaidUsage) HasMonthlyPlanCostInCents() bool {
	if o != nil && !IsNil(o.MonthlyPlanCostInCents) {
		return true
	}

	return false
}

// SetMonthlyPlanCostInCents gets a reference to the given int32 and assigns it to the MonthlyPlanCostInCents field.
func (o *PaidUsage) SetMonthlyPlanCostInCents(v int32) {
	o.MonthlyPlanCostInCents = &v
}

// GetRemainingDeployments returns the RemainingDeployments field value if set, zero value otherwise.
func (o *PaidUsage) GetRemainingDeployments() int32 {
	if o == nil || IsNil(o.RemainingDeployments) {
		var ret int32
		return ret
	}
	return *o.RemainingDeployments
}

// GetRemainingDeploymentsOk returns a tuple with the RemainingDeployments field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PaidUsage) GetRemainingDeploymentsOk() (*int32, bool) {
	if o == nil || IsNil(o.RemainingDeployments) {
		return nil, false
	}
	return o.RemainingDeployments, true
}

// HasRemainingDeployments returns a boolean if a field has been set.
func (o *PaidUsage) HasRemainingDeployments() bool {
	if o != nil && !IsNil(o.RemainingDeployments) {
		return true
	}

	return false
}

// SetRemainingDeployments gets a reference to the given int32 and assigns it to the RemainingDeployments field.
func (o *PaidUsage) SetRemainingDeployments(v int32) {
	o.RemainingDeployments = &v
}

// GetDeploymentsExceeded returns the DeploymentsExceeded field value if set, zero value otherwise.
func (o *PaidUsage) GetDeploymentsExceeded() bool {
	if o == nil || IsNil(o.DeploymentsExceeded) {
		var ret bool
		return ret
	}
	return *o.DeploymentsExceeded
}

// GetDeploymentsExceededOk returns a tuple with the DeploymentsExceeded field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PaidUsage) GetDeploymentsExceededOk() (*bool, bool) {
	if o == nil || IsNil(o.DeploymentsExceeded) {
		return nil, false
	}
	return o.DeploymentsExceeded, true
}

// HasDeploymentsExceeded returns a boolean if a field has been set.
func (o *PaidUsage) HasDeploymentsExceeded() bool {
	if o != nil && !IsNil(o.DeploymentsExceeded) {
		return true
	}

	return false
}

// SetDeploymentsExceeded gets a reference to the given bool and assigns it to the DeploymentsExceeded field.
func (o *PaidUsage) SetDeploymentsExceeded(v bool) {
	o.DeploymentsExceeded = &v
}

// GetRenewalAt returns the RenewalAt field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PaidUsage) GetRenewalAt() time.Time {
	if o == nil || IsNil(o.RenewalAt.Get()) {
		var ret time.Time
		return ret
	}
	return *o.RenewalAt.Get()
}

// GetRenewalAtOk returns a tuple with the RenewalAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PaidUsage) GetRenewalAtOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return o.RenewalAt.Get(), o.RenewalAt.IsSet()
}

// HasRenewalAt returns a boolean if a field has been set.
func (o *PaidUsage) HasRenewalAt() bool {
	if o != nil && o.RenewalAt.IsSet() {
		return true
	}

	return false
}

// SetRenewalAt gets a reference to the given NullableTime and assigns it to the RenewalAt field.
func (o *PaidUsage) SetRenewalAt(v time.Time) {
	o.RenewalAt.Set(&v)
}

// SetRenewalAtNil sets the value for RenewalAt to be an explicit nil
func (o *PaidUsage) SetRenewalAtNil() {
	o.RenewalAt.Set(nil)
}

// UnsetRenewalAt ensures that no value is present for RenewalAt, not even an explicit nil
func (o *PaidUsage) UnsetRenewalAt() {
	o.RenewalAt.Unset()
}

func (o PaidUsage) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PaidUsage) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.MaxDeploymentsPerMonth) {
		toSerialize["max_deployments_per_month"] = o.MaxDeploymentsPerMonth
	}
	if !IsNil(o.ConsumedDeployments) {
		toSerialize["consumed_deployments"] = o.ConsumedDeployments
	}
	if !IsNil(o.MonthlyPlanCost) {
		toSerialize["monthly_plan_cost"] = o.MonthlyPlanCost
	}
	if !IsNil(o.MonthlyPlanCostInCents) {
		toSerialize["monthly_plan_cost_in_cents"] = o.MonthlyPlanCostInCents
	}
	if !IsNil(o.RemainingDeployments) {
		toSerialize["remaining_deployments"] = o.RemainingDeployments
	}
	if !IsNil(o.DeploymentsExceeded) {
		toSerialize["deployments_exceeded"] = o.DeploymentsExceeded
	}
	if o.RenewalAt.IsSet() {
		toSerialize["renewal_at"] = o.RenewalAt.Get()
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *PaidUsage) UnmarshalJSON(data []byte) (err error) {
	varPaidUsage := _PaidUsage{}

	err = json.Unmarshal(data, &varPaidUsage)

	if err != nil {
		return err
	}

	*o = PaidUsage(varPaidUsage)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "max_deployments_per_month")
		delete(additionalProperties, "consumed_deployments")
		delete(additionalProperties, "monthly_plan_cost")
		delete(additionalProperties, "monthly_plan_cost_in_cents")
		delete(additionalProperties, "remaining_deployments")
		delete(additionalProperties, "deployments_exceeded")
		delete(additionalProperties, "renewal_at")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullablePaidUsage struct {
	value *PaidUsage
	isSet bool
}

func (v NullablePaidUsage) Get() *PaidUsage {
	return v.value
}

func (v *NullablePaidUsage) Set(val *PaidUsage) {
	v.value = val
	v.isSet = true
}

func (v NullablePaidUsage) IsSet() bool {
	return v.isSet
}

func (v *NullablePaidUsage) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePaidUsage(val *PaidUsage) *NullablePaidUsage {
	return &NullablePaidUsage{value: val, isSet: true}
}

func (v NullablePaidUsage) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePaidUsage) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
