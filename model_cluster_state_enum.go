/*
Qovery API

- Qovery is the fastest way to deploy your full-stack apps on any Cloud provider. - ℹ️ The API is stable and still in development.

API version: 1.0.3
Contact: support+api+documentation@qovery.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package qovery

import (
	"encoding/json"
	"fmt"
)

// ClusterStateEnum the model 'ClusterStateEnum'
type ClusterStateEnum string

// List of ClusterStateEnum
const (
	CLUSTERSTATEENUM_BUILDING            ClusterStateEnum = "BUILDING"
	CLUSTERSTATEENUM_BUILD_ERROR         ClusterStateEnum = "BUILD_ERROR"
	CLUSTERSTATEENUM_CANCELED            ClusterStateEnum = "CANCELED"
	CLUSTERSTATEENUM_CANCELING           ClusterStateEnum = "CANCELING"
	CLUSTERSTATEENUM_DELETED             ClusterStateEnum = "DELETED"
	CLUSTERSTATEENUM_DELETE_ERROR        ClusterStateEnum = "DELETE_ERROR"
	CLUSTERSTATEENUM_DELETE_QUEUED       ClusterStateEnum = "DELETE_QUEUED"
	CLUSTERSTATEENUM_DELETING            ClusterStateEnum = "DELETING"
	CLUSTERSTATEENUM_DEPLOYED            ClusterStateEnum = "DEPLOYED"
	CLUSTERSTATEENUM_DEPLOYING           ClusterStateEnum = "DEPLOYING"
	CLUSTERSTATEENUM_DEPLOYMENT_ERROR    ClusterStateEnum = "DEPLOYMENT_ERROR"
	CLUSTERSTATEENUM_DEPLOYMENT_QUEUED   ClusterStateEnum = "DEPLOYMENT_QUEUED"
	CLUSTERSTATEENUM_DRY_RUN             ClusterStateEnum = "DRY_RUN"
	CLUSTERSTATEENUM_QUEUED              ClusterStateEnum = "QUEUED"
	CLUSTERSTATEENUM_READY               ClusterStateEnum = "READY"
	CLUSTERSTATEENUM_STOPPED             ClusterStateEnum = "STOPPED"
	CLUSTERSTATEENUM_STOPPING            ClusterStateEnum = "STOPPING"
	CLUSTERSTATEENUM_STOP_ERROR          ClusterStateEnum = "STOP_ERROR"
	CLUSTERSTATEENUM_STOP_QUEUED         ClusterStateEnum = "STOP_QUEUED"
	CLUSTERSTATEENUM_RESTART_QUEUED      ClusterStateEnum = "RESTART_QUEUED"
	CLUSTERSTATEENUM_RESTARTING          ClusterStateEnum = "RESTARTING"
	CLUSTERSTATEENUM_RESTARTED           ClusterStateEnum = "RESTARTED"
	CLUSTERSTATEENUM_RESTART_ERROR       ClusterStateEnum = "RESTART_ERROR"
	CLUSTERSTATEENUM_INVALID_CREDENTIALS ClusterStateEnum = "INVALID_CREDENTIALS"
)

// All allowed values of ClusterStateEnum enum
var AllowedClusterStateEnumEnumValues = []ClusterStateEnum{
	"BUILDING",
	"BUILD_ERROR",
	"CANCELED",
	"CANCELING",
	"DELETED",
	"DELETE_ERROR",
	"DELETE_QUEUED",
	"DELETING",
	"DEPLOYED",
	"DEPLOYING",
	"DEPLOYMENT_ERROR",
	"DEPLOYMENT_QUEUED",
	"DRY_RUN",
	"QUEUED",
	"READY",
	"STOPPED",
	"STOPPING",
	"STOP_ERROR",
	"STOP_QUEUED",
	"RESTART_QUEUED",
	"RESTARTING",
	"RESTARTED",
	"RESTART_ERROR",
	"INVALID_CREDENTIALS",
}

func (v *ClusterStateEnum) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ClusterStateEnum(value)
	for _, existing := range AllowedClusterStateEnumEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ClusterStateEnum", value)
}

// NewClusterStateEnumFromValue returns a pointer to a valid ClusterStateEnum
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewClusterStateEnumFromValue(v string) (*ClusterStateEnum, error) {
	ev := ClusterStateEnum(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ClusterStateEnum: valid values are %v", v, AllowedClusterStateEnumEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ClusterStateEnum) IsValid() bool {
	for _, existing := range AllowedClusterStateEnumEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to ClusterStateEnum value
func (v ClusterStateEnum) Ptr() *ClusterStateEnum {
	return &v
}

type NullableClusterStateEnum struct {
	value *ClusterStateEnum
	isSet bool
}

func (v NullableClusterStateEnum) Get() *ClusterStateEnum {
	return v.value
}

func (v *NullableClusterStateEnum) Set(val *ClusterStateEnum) {
	v.value = val
	v.isSet = true
}

func (v NullableClusterStateEnum) IsSet() bool {
	return v.isSet
}

func (v *NullableClusterStateEnum) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableClusterStateEnum(val *ClusterStateEnum) *NullableClusterStateEnum {
	return &NullableClusterStateEnum{value: val, isSet: true}
}

func (v NullableClusterStateEnum) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableClusterStateEnum) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
