/*
Qovery API

- Qovery is the fastest way to deploy your full-stack apps on any Cloud provider. - ℹ️ The API is stable and still in development.

API version: 1.0.4
Contact: support+api+documentation@qovery.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package qovery

import (
	"encoding/json"
	"fmt"
)

// checks if the GitRepositoryRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &GitRepositoryRequest{}

// GitRepositoryRequest Git repository information for Terraform operations
type GitRepositoryRequest struct {
	// Git repository URL
	Url string `json:"url"`
	// Name of the branch to use (optional)
	Branch NullableString `json:"branch,omitempty"`
	// Root path within the repository
	RootPath *string `json:"root_path,omitempty"`
	// The git token id on Qovery side
	GitTokenId           NullableString `json:"git_token_id,omitempty"`
	Provider             GitProvider    `json:"provider"`
	AdditionalProperties map[string]interface{}
}

type _GitRepositoryRequest GitRepositoryRequest

// NewGitRepositoryRequest instantiates a new GitRepositoryRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGitRepositoryRequest(url string, provider GitProvider) *GitRepositoryRequest {
	this := GitRepositoryRequest{}
	this.Url = url
	var rootPath string = "/"
	this.RootPath = &rootPath
	this.Provider = provider
	return &this
}

// NewGitRepositoryRequestWithDefaults instantiates a new GitRepositoryRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGitRepositoryRequestWithDefaults() *GitRepositoryRequest {
	this := GitRepositoryRequest{}
	var rootPath string = "/"
	this.RootPath = &rootPath
	return &this
}

// GetUrl returns the Url field value
func (o *GitRepositoryRequest) GetUrl() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Url
}

// GetUrlOk returns a tuple with the Url field value
// and a boolean to check if the value has been set.
func (o *GitRepositoryRequest) GetUrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Url, true
}

// SetUrl sets field value
func (o *GitRepositoryRequest) SetUrl(v string) {
	o.Url = v
}

// GetBranch returns the Branch field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *GitRepositoryRequest) GetBranch() string {
	if o == nil || IsNil(o.Branch.Get()) {
		var ret string
		return ret
	}
	return *o.Branch.Get()
}

// GetBranchOk returns a tuple with the Branch field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *GitRepositoryRequest) GetBranchOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Branch.Get(), o.Branch.IsSet()
}

// HasBranch returns a boolean if a field has been set.
func (o *GitRepositoryRequest) HasBranch() bool {
	if o != nil && o.Branch.IsSet() {
		return true
	}

	return false
}

// SetBranch gets a reference to the given NullableString and assigns it to the Branch field.
func (o *GitRepositoryRequest) SetBranch(v string) {
	o.Branch.Set(&v)
}

// SetBranchNil sets the value for Branch to be an explicit nil
func (o *GitRepositoryRequest) SetBranchNil() {
	o.Branch.Set(nil)
}

// UnsetBranch ensures that no value is present for Branch, not even an explicit nil
func (o *GitRepositoryRequest) UnsetBranch() {
	o.Branch.Unset()
}

// GetRootPath returns the RootPath field value if set, zero value otherwise.
func (o *GitRepositoryRequest) GetRootPath() string {
	if o == nil || IsNil(o.RootPath) {
		var ret string
		return ret
	}
	return *o.RootPath
}

// GetRootPathOk returns a tuple with the RootPath field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GitRepositoryRequest) GetRootPathOk() (*string, bool) {
	if o == nil || IsNil(o.RootPath) {
		return nil, false
	}
	return o.RootPath, true
}

// HasRootPath returns a boolean if a field has been set.
func (o *GitRepositoryRequest) HasRootPath() bool {
	if o != nil && !IsNil(o.RootPath) {
		return true
	}

	return false
}

// SetRootPath gets a reference to the given string and assigns it to the RootPath field.
func (o *GitRepositoryRequest) SetRootPath(v string) {
	o.RootPath = &v
}

// GetGitTokenId returns the GitTokenId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *GitRepositoryRequest) GetGitTokenId() string {
	if o == nil || IsNil(o.GitTokenId.Get()) {
		var ret string
		return ret
	}
	return *o.GitTokenId.Get()
}

// GetGitTokenIdOk returns a tuple with the GitTokenId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *GitRepositoryRequest) GetGitTokenIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.GitTokenId.Get(), o.GitTokenId.IsSet()
}

// HasGitTokenId returns a boolean if a field has been set.
func (o *GitRepositoryRequest) HasGitTokenId() bool {
	if o != nil && o.GitTokenId.IsSet() {
		return true
	}

	return false
}

// SetGitTokenId gets a reference to the given NullableString and assigns it to the GitTokenId field.
func (o *GitRepositoryRequest) SetGitTokenId(v string) {
	o.GitTokenId.Set(&v)
}

// SetGitTokenIdNil sets the value for GitTokenId to be an explicit nil
func (o *GitRepositoryRequest) SetGitTokenIdNil() {
	o.GitTokenId.Set(nil)
}

// UnsetGitTokenId ensures that no value is present for GitTokenId, not even an explicit nil
func (o *GitRepositoryRequest) UnsetGitTokenId() {
	o.GitTokenId.Unset()
}

// GetProvider returns the Provider field value
func (o *GitRepositoryRequest) GetProvider() GitProvider {
	if o == nil {
		var ret GitProvider
		return ret
	}

	return o.Provider
}

// GetProviderOk returns a tuple with the Provider field value
// and a boolean to check if the value has been set.
func (o *GitRepositoryRequest) GetProviderOk() (*GitProvider, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Provider, true
}

// SetProvider sets field value
func (o *GitRepositoryRequest) SetProvider(v GitProvider) {
	o.Provider = v
}

func (o GitRepositoryRequest) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o GitRepositoryRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["url"] = o.Url
	if o.Branch.IsSet() {
		toSerialize["branch"] = o.Branch.Get()
	}
	if !IsNil(o.RootPath) {
		toSerialize["root_path"] = o.RootPath
	}
	if o.GitTokenId.IsSet() {
		toSerialize["git_token_id"] = o.GitTokenId.Get()
	}
	toSerialize["provider"] = o.Provider

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *GitRepositoryRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"url",
		"provider",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varGitRepositoryRequest := _GitRepositoryRequest{}

	err = json.Unmarshal(data, &varGitRepositoryRequest)

	if err != nil {
		return err
	}

	*o = GitRepositoryRequest(varGitRepositoryRequest)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "url")
		delete(additionalProperties, "branch")
		delete(additionalProperties, "root_path")
		delete(additionalProperties, "git_token_id")
		delete(additionalProperties, "provider")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableGitRepositoryRequest struct {
	value *GitRepositoryRequest
	isSet bool
}

func (v NullableGitRepositoryRequest) Get() *GitRepositoryRequest {
	return v.value
}

func (v *NullableGitRepositoryRequest) Set(val *GitRepositoryRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableGitRepositoryRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableGitRepositoryRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGitRepositoryRequest(val *GitRepositoryRequest) *NullableGitRepositoryRequest {
	return &NullableGitRepositoryRequest{value: val, isSet: true}
}

func (v NullableGitRepositoryRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGitRepositoryRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
