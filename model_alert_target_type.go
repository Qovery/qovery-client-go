/*
Qovery API

- Qovery is the fastest way to deploy your full-stack apps on any Cloud provider. - ℹ️ The API is stable and still in development.

API version: 1.0.4
Contact: support+api+documentation@qovery.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package qovery

import (
	"encoding/json"
	"fmt"
)

// AlertTargetType The target of an alert
type AlertTargetType string

// List of AlertTargetType
const (
	ALERTTARGETTYPE_CLUSTER     AlertTargetType = " CLUSTER"
	ALERTTARGETTYPE_ENVIRONMENT AlertTargetType = "ENVIRONMENT"
	ALERTTARGETTYPE_APPLICATION AlertTargetType = "APPLICATION"
	ALERTTARGETTYPE_CONTAINER   AlertTargetType = "CONTAINER"
	ALERTTARGETTYPE_JOB         AlertTargetType = "JOB"
	ALERTTARGETTYPE_CRONJOB     AlertTargetType = "CRONJOB"
	ALERTTARGETTYPE_HELM        AlertTargetType = "HELM"
	ALERTTARGETTYPE_TERRAFORM   AlertTargetType = "TERRAFORM"
)

// All allowed values of AlertTargetType enum
var AllowedAlertTargetTypeEnumValues = []AlertTargetType{
	" CLUSTER",
	"ENVIRONMENT",
	"APPLICATION",
	"CONTAINER",
	"JOB",
	"CRONJOB",
	"HELM",
	"TERRAFORM",
}

func (v *AlertTargetType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := AlertTargetType(value)
	for _, existing := range AllowedAlertTargetTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid AlertTargetType", value)
}

// NewAlertTargetTypeFromValue returns a pointer to a valid AlertTargetType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewAlertTargetTypeFromValue(v string) (*AlertTargetType, error) {
	ev := AlertTargetType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for AlertTargetType: valid values are %v", v, AllowedAlertTargetTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v AlertTargetType) IsValid() bool {
	for _, existing := range AllowedAlertTargetTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to AlertTargetType value
func (v AlertTargetType) Ptr() *AlertTargetType {
	return &v
}

type NullableAlertTargetType struct {
	value *AlertTargetType
	isSet bool
}

func (v NullableAlertTargetType) Get() *AlertTargetType {
	return v.value
}

func (v *NullableAlertTargetType) Set(val *AlertTargetType) {
	v.value = val
	v.isSet = true
}

func (v NullableAlertTargetType) IsSet() bool {
	return v.isSet
}

func (v *NullableAlertTargetType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAlertTargetType(val *AlertTargetType) *NullableAlertTargetType {
	return &NullableAlertTargetType{value: val, isSet: true}
}

func (v NullableAlertTargetType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAlertTargetType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
