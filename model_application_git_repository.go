/*
Qovery API

- Qovery is the fastest way to deploy your full-stack apps on any Cloud provider. - ℹ️ The API is stable and still in development.

API version: 1.0.3
Contact: support+api+documentation@qovery.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package qovery

import (
	"encoding/json"
	"time"
)

// checks if the ApplicationGitRepository type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ApplicationGitRepository{}

// ApplicationGitRepository struct for ApplicationGitRepository
type ApplicationGitRepository struct {
	HasAccess *bool            `json:"has_access,omitempty"`
	Provider  *GitProviderEnum `json:"provider,omitempty"`
	Owner     *string          `json:"owner,omitempty"`
	Url       *string          `json:"url,omitempty"`
	// repository name
	Name     *string `json:"name,omitempty"`
	Branch   *string `json:"branch,omitempty"`
	RootPath *string `json:"root_path,omitempty"`
	// Git commit ID corresponding to the deployed version of the app
	DeployedCommitId *string `json:"deployed_commit_id,omitempty"`
	// Git commit date corresponding to the deployed version of the app
	DeployedCommitDate *time.Time `json:"deployed_commit_date,omitempty"`
	// Git commit user corresponding to the deployed version of the app
	DeployedCommitContributor *string `json:"deployed_commit_contributor,omitempty"`
	DeployedCommitTag         *string `json:"deployed_commit_tag,omitempty"`
}

// NewApplicationGitRepository instantiates a new ApplicationGitRepository object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewApplicationGitRepository() *ApplicationGitRepository {
	this := ApplicationGitRepository{}
	return &this
}

// NewApplicationGitRepositoryWithDefaults instantiates a new ApplicationGitRepository object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewApplicationGitRepositoryWithDefaults() *ApplicationGitRepository {
	this := ApplicationGitRepository{}
	return &this
}

// GetHasAccess returns the HasAccess field value if set, zero value otherwise.
func (o *ApplicationGitRepository) GetHasAccess() bool {
	if o == nil || IsNil(o.HasAccess) {
		var ret bool
		return ret
	}
	return *o.HasAccess
}

// GetHasAccessOk returns a tuple with the HasAccess field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApplicationGitRepository) GetHasAccessOk() (*bool, bool) {
	if o == nil || IsNil(o.HasAccess) {
		return nil, false
	}
	return o.HasAccess, true
}

// HasHasAccess returns a boolean if a field has been set.
func (o *ApplicationGitRepository) HasHasAccess() bool {
	if o != nil && !IsNil(o.HasAccess) {
		return true
	}

	return false
}

// SetHasAccess gets a reference to the given bool and assigns it to the HasAccess field.
func (o *ApplicationGitRepository) SetHasAccess(v bool) {
	o.HasAccess = &v
}

// GetProvider returns the Provider field value if set, zero value otherwise.
func (o *ApplicationGitRepository) GetProvider() GitProviderEnum {
	if o == nil || IsNil(o.Provider) {
		var ret GitProviderEnum
		return ret
	}
	return *o.Provider
}

// GetProviderOk returns a tuple with the Provider field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApplicationGitRepository) GetProviderOk() (*GitProviderEnum, bool) {
	if o == nil || IsNil(o.Provider) {
		return nil, false
	}
	return o.Provider, true
}

// HasProvider returns a boolean if a field has been set.
func (o *ApplicationGitRepository) HasProvider() bool {
	if o != nil && !IsNil(o.Provider) {
		return true
	}

	return false
}

// SetProvider gets a reference to the given GitProviderEnum and assigns it to the Provider field.
func (o *ApplicationGitRepository) SetProvider(v GitProviderEnum) {
	o.Provider = &v
}

// GetOwner returns the Owner field value if set, zero value otherwise.
func (o *ApplicationGitRepository) GetOwner() string {
	if o == nil || IsNil(o.Owner) {
		var ret string
		return ret
	}
	return *o.Owner
}

// GetOwnerOk returns a tuple with the Owner field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApplicationGitRepository) GetOwnerOk() (*string, bool) {
	if o == nil || IsNil(o.Owner) {
		return nil, false
	}
	return o.Owner, true
}

// HasOwner returns a boolean if a field has been set.
func (o *ApplicationGitRepository) HasOwner() bool {
	if o != nil && !IsNil(o.Owner) {
		return true
	}

	return false
}

// SetOwner gets a reference to the given string and assigns it to the Owner field.
func (o *ApplicationGitRepository) SetOwner(v string) {
	o.Owner = &v
}

// GetUrl returns the Url field value if set, zero value otherwise.
func (o *ApplicationGitRepository) GetUrl() string {
	if o == nil || IsNil(o.Url) {
		var ret string
		return ret
	}
	return *o.Url
}

// GetUrlOk returns a tuple with the Url field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApplicationGitRepository) GetUrlOk() (*string, bool) {
	if o == nil || IsNil(o.Url) {
		return nil, false
	}
	return o.Url, true
}

// HasUrl returns a boolean if a field has been set.
func (o *ApplicationGitRepository) HasUrl() bool {
	if o != nil && !IsNil(o.Url) {
		return true
	}

	return false
}

// SetUrl gets a reference to the given string and assigns it to the Url field.
func (o *ApplicationGitRepository) SetUrl(v string) {
	o.Url = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *ApplicationGitRepository) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApplicationGitRepository) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *ApplicationGitRepository) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *ApplicationGitRepository) SetName(v string) {
	o.Name = &v
}

// GetBranch returns the Branch field value if set, zero value otherwise.
func (o *ApplicationGitRepository) GetBranch() string {
	if o == nil || IsNil(o.Branch) {
		var ret string
		return ret
	}
	return *o.Branch
}

// GetBranchOk returns a tuple with the Branch field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApplicationGitRepository) GetBranchOk() (*string, bool) {
	if o == nil || IsNil(o.Branch) {
		return nil, false
	}
	return o.Branch, true
}

// HasBranch returns a boolean if a field has been set.
func (o *ApplicationGitRepository) HasBranch() bool {
	if o != nil && !IsNil(o.Branch) {
		return true
	}

	return false
}

// SetBranch gets a reference to the given string and assigns it to the Branch field.
func (o *ApplicationGitRepository) SetBranch(v string) {
	o.Branch = &v
}

// GetRootPath returns the RootPath field value if set, zero value otherwise.
func (o *ApplicationGitRepository) GetRootPath() string {
	if o == nil || IsNil(o.RootPath) {
		var ret string
		return ret
	}
	return *o.RootPath
}

// GetRootPathOk returns a tuple with the RootPath field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApplicationGitRepository) GetRootPathOk() (*string, bool) {
	if o == nil || IsNil(o.RootPath) {
		return nil, false
	}
	return o.RootPath, true
}

// HasRootPath returns a boolean if a field has been set.
func (o *ApplicationGitRepository) HasRootPath() bool {
	if o != nil && !IsNil(o.RootPath) {
		return true
	}

	return false
}

// SetRootPath gets a reference to the given string and assigns it to the RootPath field.
func (o *ApplicationGitRepository) SetRootPath(v string) {
	o.RootPath = &v
}

// GetDeployedCommitId returns the DeployedCommitId field value if set, zero value otherwise.
func (o *ApplicationGitRepository) GetDeployedCommitId() string {
	if o == nil || IsNil(o.DeployedCommitId) {
		var ret string
		return ret
	}
	return *o.DeployedCommitId
}

// GetDeployedCommitIdOk returns a tuple with the DeployedCommitId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApplicationGitRepository) GetDeployedCommitIdOk() (*string, bool) {
	if o == nil || IsNil(o.DeployedCommitId) {
		return nil, false
	}
	return o.DeployedCommitId, true
}

// HasDeployedCommitId returns a boolean if a field has been set.
func (o *ApplicationGitRepository) HasDeployedCommitId() bool {
	if o != nil && !IsNil(o.DeployedCommitId) {
		return true
	}

	return false
}

// SetDeployedCommitId gets a reference to the given string and assigns it to the DeployedCommitId field.
func (o *ApplicationGitRepository) SetDeployedCommitId(v string) {
	o.DeployedCommitId = &v
}

// GetDeployedCommitDate returns the DeployedCommitDate field value if set, zero value otherwise.
func (o *ApplicationGitRepository) GetDeployedCommitDate() time.Time {
	if o == nil || IsNil(o.DeployedCommitDate) {
		var ret time.Time
		return ret
	}
	return *o.DeployedCommitDate
}

// GetDeployedCommitDateOk returns a tuple with the DeployedCommitDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApplicationGitRepository) GetDeployedCommitDateOk() (*time.Time, bool) {
	if o == nil || IsNil(o.DeployedCommitDate) {
		return nil, false
	}
	return o.DeployedCommitDate, true
}

// HasDeployedCommitDate returns a boolean if a field has been set.
func (o *ApplicationGitRepository) HasDeployedCommitDate() bool {
	if o != nil && !IsNil(o.DeployedCommitDate) {
		return true
	}

	return false
}

// SetDeployedCommitDate gets a reference to the given time.Time and assigns it to the DeployedCommitDate field.
func (o *ApplicationGitRepository) SetDeployedCommitDate(v time.Time) {
	o.DeployedCommitDate = &v
}

// GetDeployedCommitContributor returns the DeployedCommitContributor field value if set, zero value otherwise.
func (o *ApplicationGitRepository) GetDeployedCommitContributor() string {
	if o == nil || IsNil(o.DeployedCommitContributor) {
		var ret string
		return ret
	}
	return *o.DeployedCommitContributor
}

// GetDeployedCommitContributorOk returns a tuple with the DeployedCommitContributor field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApplicationGitRepository) GetDeployedCommitContributorOk() (*string, bool) {
	if o == nil || IsNil(o.DeployedCommitContributor) {
		return nil, false
	}
	return o.DeployedCommitContributor, true
}

// HasDeployedCommitContributor returns a boolean if a field has been set.
func (o *ApplicationGitRepository) HasDeployedCommitContributor() bool {
	if o != nil && !IsNil(o.DeployedCommitContributor) {
		return true
	}

	return false
}

// SetDeployedCommitContributor gets a reference to the given string and assigns it to the DeployedCommitContributor field.
func (o *ApplicationGitRepository) SetDeployedCommitContributor(v string) {
	o.DeployedCommitContributor = &v
}

// GetDeployedCommitTag returns the DeployedCommitTag field value if set, zero value otherwise.
func (o *ApplicationGitRepository) GetDeployedCommitTag() string {
	if o == nil || IsNil(o.DeployedCommitTag) {
		var ret string
		return ret
	}
	return *o.DeployedCommitTag
}

// GetDeployedCommitTagOk returns a tuple with the DeployedCommitTag field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApplicationGitRepository) GetDeployedCommitTagOk() (*string, bool) {
	if o == nil || IsNil(o.DeployedCommitTag) {
		return nil, false
	}
	return o.DeployedCommitTag, true
}

// HasDeployedCommitTag returns a boolean if a field has been set.
func (o *ApplicationGitRepository) HasDeployedCommitTag() bool {
	if o != nil && !IsNil(o.DeployedCommitTag) {
		return true
	}

	return false
}

// SetDeployedCommitTag gets a reference to the given string and assigns it to the DeployedCommitTag field.
func (o *ApplicationGitRepository) SetDeployedCommitTag(v string) {
	o.DeployedCommitTag = &v
}

func (o ApplicationGitRepository) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ApplicationGitRepository) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.HasAccess) {
		toSerialize["has_access"] = o.HasAccess
	}
	if !IsNil(o.Provider) {
		toSerialize["provider"] = o.Provider
	}
	if !IsNil(o.Owner) {
		toSerialize["owner"] = o.Owner
	}
	if !IsNil(o.Url) {
		toSerialize["url"] = o.Url
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Branch) {
		toSerialize["branch"] = o.Branch
	}
	if !IsNil(o.RootPath) {
		toSerialize["root_path"] = o.RootPath
	}
	if !IsNil(o.DeployedCommitId) {
		toSerialize["deployed_commit_id"] = o.DeployedCommitId
	}
	if !IsNil(o.DeployedCommitDate) {
		toSerialize["deployed_commit_date"] = o.DeployedCommitDate
	}
	if !IsNil(o.DeployedCommitContributor) {
		toSerialize["deployed_commit_contributor"] = o.DeployedCommitContributor
	}
	if !IsNil(o.DeployedCommitTag) {
		toSerialize["deployed_commit_tag"] = o.DeployedCommitTag
	}
	return toSerialize, nil
}

type NullableApplicationGitRepository struct {
	value *ApplicationGitRepository
	isSet bool
}

func (v NullableApplicationGitRepository) Get() *ApplicationGitRepository {
	return v.value
}

func (v *NullableApplicationGitRepository) Set(val *ApplicationGitRepository) {
	v.value = val
	v.isSet = true
}

func (v NullableApplicationGitRepository) IsSet() bool {
	return v.isSet
}

func (v *NullableApplicationGitRepository) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableApplicationGitRepository(val *ApplicationGitRepository) *NullableApplicationGitRepository {
	return &NullableApplicationGitRepository{value: val, isSet: true}
}

func (v NullableApplicationGitRepository) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableApplicationGitRepository) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
