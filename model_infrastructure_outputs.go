/*
Qovery API

- Qovery is the fastest way to deploy your full-stack apps on any Cloud provider. - ℹ️ The API is stable and still in development.

API version: 1.0.3
Contact: support+api+documentation@qovery.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package qovery

import (
	"encoding/json"
	"fmt"
)

// InfrastructureOutputs - struct for InfrastructureOutputs
type InfrastructureOutputs struct {
	AksInfrastructureOutputs     *AksInfrastructureOutputs
	EksInfrastructureOutputs     *EksInfrastructureOutputs
	GkeInfrastructureOutputs     *GkeInfrastructureOutputs
	KapsuleInfrastructureOutputs *KapsuleInfrastructureOutputs
}

// AksInfrastructureOutputsAsInfrastructureOutputs is a convenience function that returns AksInfrastructureOutputs wrapped in InfrastructureOutputs
func AksInfrastructureOutputsAsInfrastructureOutputs(v *AksInfrastructureOutputs) InfrastructureOutputs {
	return InfrastructureOutputs{
		AksInfrastructureOutputs: v,
	}
}

// EksInfrastructureOutputsAsInfrastructureOutputs is a convenience function that returns EksInfrastructureOutputs wrapped in InfrastructureOutputs
func EksInfrastructureOutputsAsInfrastructureOutputs(v *EksInfrastructureOutputs) InfrastructureOutputs {
	return InfrastructureOutputs{
		EksInfrastructureOutputs: v,
	}
}

// GkeInfrastructureOutputsAsInfrastructureOutputs is a convenience function that returns GkeInfrastructureOutputs wrapped in InfrastructureOutputs
func GkeInfrastructureOutputsAsInfrastructureOutputs(v *GkeInfrastructureOutputs) InfrastructureOutputs {
	return InfrastructureOutputs{
		GkeInfrastructureOutputs: v,
	}
}

// KapsuleInfrastructureOutputsAsInfrastructureOutputs is a convenience function that returns KapsuleInfrastructureOutputs wrapped in InfrastructureOutputs
func KapsuleInfrastructureOutputsAsInfrastructureOutputs(v *KapsuleInfrastructureOutputs) InfrastructureOutputs {
	return InfrastructureOutputs{
		KapsuleInfrastructureOutputs: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *InfrastructureOutputs) UnmarshalJSON(data []byte) error {
	var err error
	// use discriminator value to speed up the lookup
	var jsonDict map[string]interface{}
	err = newStrictDecoder(data).Decode(&jsonDict)
	if err != nil {
		return fmt.Errorf("failed to unmarshal JSON into map for the discriminator lookup")
	}

	// check if the discriminator value is 'AKS'
	if jsonDict["kind"] == "AKS" {
		// try to unmarshal JSON data into AksInfrastructureOutputs
		err = json.Unmarshal(data, &dst.AksInfrastructureOutputs)
		if err == nil {
			return nil // data stored in dst.AksInfrastructureOutputs, return on the first match
		} else {
			dst.AksInfrastructureOutputs = nil
			return fmt.Errorf("failed to unmarshal InfrastructureOutputs as AksInfrastructureOutputs: %s", err.Error())
		}
	}

	// check if the discriminator value is 'EKS'
	if jsonDict["kind"] == "EKS" {
		// try to unmarshal JSON data into EksInfrastructureOutputs
		err = json.Unmarshal(data, &dst.EksInfrastructureOutputs)
		if err == nil {
			return nil // data stored in dst.EksInfrastructureOutputs, return on the first match
		} else {
			dst.EksInfrastructureOutputs = nil
			return fmt.Errorf("failed to unmarshal InfrastructureOutputs as EksInfrastructureOutputs: %s", err.Error())
		}
	}

	// check if the discriminator value is 'GKE'
	if jsonDict["kind"] == "GKE" {
		// try to unmarshal JSON data into GkeInfrastructureOutputs
		err = json.Unmarshal(data, &dst.GkeInfrastructureOutputs)
		if err == nil {
			return nil // data stored in dst.GkeInfrastructureOutputs, return on the first match
		} else {
			dst.GkeInfrastructureOutputs = nil
			return fmt.Errorf("failed to unmarshal InfrastructureOutputs as GkeInfrastructureOutputs: %s", err.Error())
		}
	}

	// check if the discriminator value is 'SCW_KAPSULE'
	if jsonDict["kind"] == "SCW_KAPSULE" {
		// try to unmarshal JSON data into KapsuleInfrastructureOutputs
		err = json.Unmarshal(data, &dst.KapsuleInfrastructureOutputs)
		if err == nil {
			return nil // data stored in dst.KapsuleInfrastructureOutputs, return on the first match
		} else {
			dst.KapsuleInfrastructureOutputs = nil
			return fmt.Errorf("failed to unmarshal InfrastructureOutputs as KapsuleInfrastructureOutputs: %s", err.Error())
		}
	}

	// check if the discriminator value is 'AksInfrastructureOutputs'
	if jsonDict["kind"] == "AksInfrastructureOutputs" {
		// try to unmarshal JSON data into AksInfrastructureOutputs
		err = json.Unmarshal(data, &dst.AksInfrastructureOutputs)
		if err == nil {
			return nil // data stored in dst.AksInfrastructureOutputs, return on the first match
		} else {
			dst.AksInfrastructureOutputs = nil
			return fmt.Errorf("failed to unmarshal InfrastructureOutputs as AksInfrastructureOutputs: %s", err.Error())
		}
	}

	// check if the discriminator value is 'EksInfrastructureOutputs'
	if jsonDict["kind"] == "EksInfrastructureOutputs" {
		// try to unmarshal JSON data into EksInfrastructureOutputs
		err = json.Unmarshal(data, &dst.EksInfrastructureOutputs)
		if err == nil {
			return nil // data stored in dst.EksInfrastructureOutputs, return on the first match
		} else {
			dst.EksInfrastructureOutputs = nil
			return fmt.Errorf("failed to unmarshal InfrastructureOutputs as EksInfrastructureOutputs: %s", err.Error())
		}
	}

	// check if the discriminator value is 'GkeInfrastructureOutputs'
	if jsonDict["kind"] == "GkeInfrastructureOutputs" {
		// try to unmarshal JSON data into GkeInfrastructureOutputs
		err = json.Unmarshal(data, &dst.GkeInfrastructureOutputs)
		if err == nil {
			return nil // data stored in dst.GkeInfrastructureOutputs, return on the first match
		} else {
			dst.GkeInfrastructureOutputs = nil
			return fmt.Errorf("failed to unmarshal InfrastructureOutputs as GkeInfrastructureOutputs: %s", err.Error())
		}
	}

	// check if the discriminator value is 'KapsuleInfrastructureOutputs'
	if jsonDict["kind"] == "KapsuleInfrastructureOutputs" {
		// try to unmarshal JSON data into KapsuleInfrastructureOutputs
		err = json.Unmarshal(data, &dst.KapsuleInfrastructureOutputs)
		if err == nil {
			return nil // data stored in dst.KapsuleInfrastructureOutputs, return on the first match
		} else {
			dst.KapsuleInfrastructureOutputs = nil
			return fmt.Errorf("failed to unmarshal InfrastructureOutputs as KapsuleInfrastructureOutputs: %s", err.Error())
		}
	}

	return nil
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src InfrastructureOutputs) MarshalJSON() ([]byte, error) {
	if src.AksInfrastructureOutputs != nil {
		return json.Marshal(&src.AksInfrastructureOutputs)
	}

	if src.EksInfrastructureOutputs != nil {
		return json.Marshal(&src.EksInfrastructureOutputs)
	}

	if src.GkeInfrastructureOutputs != nil {
		return json.Marshal(&src.GkeInfrastructureOutputs)
	}

	if src.KapsuleInfrastructureOutputs != nil {
		return json.Marshal(&src.KapsuleInfrastructureOutputs)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *InfrastructureOutputs) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.AksInfrastructureOutputs != nil {
		return obj.AksInfrastructureOutputs
	}

	if obj.EksInfrastructureOutputs != nil {
		return obj.EksInfrastructureOutputs
	}

	if obj.GkeInfrastructureOutputs != nil {
		return obj.GkeInfrastructureOutputs
	}

	if obj.KapsuleInfrastructureOutputs != nil {
		return obj.KapsuleInfrastructureOutputs
	}

	// all schemas are nil
	return nil
}

type NullableInfrastructureOutputs struct {
	value *InfrastructureOutputs
	isSet bool
}

func (v NullableInfrastructureOutputs) Get() *InfrastructureOutputs {
	return v.value
}

func (v *NullableInfrastructureOutputs) Set(val *InfrastructureOutputs) {
	v.value = val
	v.isSet = true
}

func (v NullableInfrastructureOutputs) IsSet() bool {
	return v.isSet
}

func (v *NullableInfrastructureOutputs) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInfrastructureOutputs(val *InfrastructureOutputs) *NullableInfrastructureOutputs {
	return &NullableInfrastructureOutputs{value: val, isSet: true}
}

func (v NullableInfrastructureOutputs) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInfrastructureOutputs) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
