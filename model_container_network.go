/*
Qovery API

- Qovery is the fastest way to deploy your full-stack apps on any Cloud provider. - ℹ️ The API is stable and still in development.

API version: 1.0.4
Contact: support+api+documentation@qovery.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package qovery

import (
	"encoding/json"
)

// checks if the ContainerNetwork type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ContainerNetwork{}

// ContainerNetwork struct for ContainerNetwork
type ContainerNetwork struct {
	// Specify if the sticky session option (also called persistant session) is activated or not for this container. If activated, user will be redirected by the load balancer to the same instance each time he access to the container.
	StickySession        *bool `json:"sticky_session,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _ContainerNetwork ContainerNetwork

// NewContainerNetwork instantiates a new ContainerNetwork object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewContainerNetwork() *ContainerNetwork {
	this := ContainerNetwork{}
	var stickySession bool = false
	this.StickySession = &stickySession
	return &this
}

// NewContainerNetworkWithDefaults instantiates a new ContainerNetwork object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewContainerNetworkWithDefaults() *ContainerNetwork {
	this := ContainerNetwork{}
	var stickySession bool = false
	this.StickySession = &stickySession
	return &this
}

// GetStickySession returns the StickySession field value if set, zero value otherwise.
func (o *ContainerNetwork) GetStickySession() bool {
	if o == nil || IsNil(o.StickySession) {
		var ret bool
		return ret
	}
	return *o.StickySession
}

// GetStickySessionOk returns a tuple with the StickySession field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ContainerNetwork) GetStickySessionOk() (*bool, bool) {
	if o == nil || IsNil(o.StickySession) {
		return nil, false
	}
	return o.StickySession, true
}

// HasStickySession returns a boolean if a field has been set.
func (o *ContainerNetwork) HasStickySession() bool {
	if o != nil && !IsNil(o.StickySession) {
		return true
	}

	return false
}

// SetStickySession gets a reference to the given bool and assigns it to the StickySession field.
func (o *ContainerNetwork) SetStickySession(v bool) {
	o.StickySession = &v
}

func (o ContainerNetwork) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ContainerNetwork) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.StickySession) {
		toSerialize["sticky_session"] = o.StickySession
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *ContainerNetwork) UnmarshalJSON(data []byte) (err error) {
	varContainerNetwork := _ContainerNetwork{}

	err = json.Unmarshal(data, &varContainerNetwork)

	if err != nil {
		return err
	}

	*o = ContainerNetwork(varContainerNetwork)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "sticky_session")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableContainerNetwork struct {
	value *ContainerNetwork
	isSet bool
}

func (v NullableContainerNetwork) Get() *ContainerNetwork {
	return v.value
}

func (v *NullableContainerNetwork) Set(val *ContainerNetwork) {
	v.value = val
	v.isSet = true
}

func (v NullableContainerNetwork) IsSet() bool {
	return v.isSet
}

func (v *NullableContainerNetwork) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableContainerNetwork(val *ContainerNetwork) *NullableContainerNetwork {
	return &NullableContainerNetwork{value: val, isSet: true}
}

func (v NullableContainerNetwork) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableContainerNetwork) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
