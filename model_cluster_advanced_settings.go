/*
Qovery API

- Qovery is the fastest way to deploy your full-stack apps on any Cloud provider. - ℹ️ The API is stable and still in development.

API version: 1.0.3
Contact: support+api+documentation@qovery.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package qovery

import (
	"encoding/json"
)

// ClusterAdvancedSettings struct for ClusterAdvancedSettings
type ClusterAdvancedSettings struct {
	// Configure the number of seconds before cleaning images in the registry
	RegistryImageRetentionTime *int32 `json:"registry.image_retention_time,omitempty"`
	// Select the size of the main load_balancer (only effective for Scaleway)
	LoadBalancerSize *string `json:"load_balancer.size,omitempty"`
	// Deprecated
	PlecoResourcesTtl *int32 `json:"pleco.resources_ttl,omitempty"`
	// For how long in week loki is going to keep logs of your applications
	LokiLogRetentionInWeek *int32 `json:"loki.log_retention_in_week,omitempty"`
}

// NewClusterAdvancedSettings instantiates a new ClusterAdvancedSettings object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewClusterAdvancedSettings() *ClusterAdvancedSettings {
	this := ClusterAdvancedSettings{}
	var registryImageRetentionTime int32 = 31536000
	this.RegistryImageRetentionTime = &registryImageRetentionTime
	var loadBalancerSize string = "lb-s"
	this.LoadBalancerSize = &loadBalancerSize
	var plecoResourcesTtl int32 = -1
	this.PlecoResourcesTtl = &plecoResourcesTtl
	var lokiLogRetentionInWeek int32 = 12
	this.LokiLogRetentionInWeek = &lokiLogRetentionInWeek
	return &this
}

// NewClusterAdvancedSettingsWithDefaults instantiates a new ClusterAdvancedSettings object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewClusterAdvancedSettingsWithDefaults() *ClusterAdvancedSettings {
	this := ClusterAdvancedSettings{}
	var registryImageRetentionTime int32 = 31536000
	this.RegistryImageRetentionTime = &registryImageRetentionTime
	var loadBalancerSize string = "lb-s"
	this.LoadBalancerSize = &loadBalancerSize
	var plecoResourcesTtl int32 = -1
	this.PlecoResourcesTtl = &plecoResourcesTtl
	var lokiLogRetentionInWeek int32 = 12
	this.LokiLogRetentionInWeek = &lokiLogRetentionInWeek
	return &this
}

// GetRegistryImageRetentionTime returns the RegistryImageRetentionTime field value if set, zero value otherwise.
func (o *ClusterAdvancedSettings) GetRegistryImageRetentionTime() int32 {
	if o == nil || o.RegistryImageRetentionTime == nil {
		var ret int32
		return ret
	}
	return *o.RegistryImageRetentionTime
}

// GetRegistryImageRetentionTimeOk returns a tuple with the RegistryImageRetentionTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ClusterAdvancedSettings) GetRegistryImageRetentionTimeOk() (*int32, bool) {
	if o == nil || o.RegistryImageRetentionTime == nil {
		return nil, false
	}
	return o.RegistryImageRetentionTime, true
}

// HasRegistryImageRetentionTime returns a boolean if a field has been set.
func (o *ClusterAdvancedSettings) HasRegistryImageRetentionTime() bool {
	if o != nil && o.RegistryImageRetentionTime != nil {
		return true
	}

	return false
}

// SetRegistryImageRetentionTime gets a reference to the given int32 and assigns it to the RegistryImageRetentionTime field.
func (o *ClusterAdvancedSettings) SetRegistryImageRetentionTime(v int32) {
	o.RegistryImageRetentionTime = &v
}

// GetLoadBalancerSize returns the LoadBalancerSize field value if set, zero value otherwise.
func (o *ClusterAdvancedSettings) GetLoadBalancerSize() string {
	if o == nil || o.LoadBalancerSize == nil {
		var ret string
		return ret
	}
	return *o.LoadBalancerSize
}

// GetLoadBalancerSizeOk returns a tuple with the LoadBalancerSize field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ClusterAdvancedSettings) GetLoadBalancerSizeOk() (*string, bool) {
	if o == nil || o.LoadBalancerSize == nil {
		return nil, false
	}
	return o.LoadBalancerSize, true
}

// HasLoadBalancerSize returns a boolean if a field has been set.
func (o *ClusterAdvancedSettings) HasLoadBalancerSize() bool {
	if o != nil && o.LoadBalancerSize != nil {
		return true
	}

	return false
}

// SetLoadBalancerSize gets a reference to the given string and assigns it to the LoadBalancerSize field.
func (o *ClusterAdvancedSettings) SetLoadBalancerSize(v string) {
	o.LoadBalancerSize = &v
}

// GetPlecoResourcesTtl returns the PlecoResourcesTtl field value if set, zero value otherwise.
// Deprecated
func (o *ClusterAdvancedSettings) GetPlecoResourcesTtl() int32 {
	if o == nil || o.PlecoResourcesTtl == nil {
		var ret int32
		return ret
	}
	return *o.PlecoResourcesTtl
}

// GetPlecoResourcesTtlOk returns a tuple with the PlecoResourcesTtl field value if set, nil otherwise
// and a boolean to check if the value has been set.
// Deprecated
func (o *ClusterAdvancedSettings) GetPlecoResourcesTtlOk() (*int32, bool) {
	if o == nil || o.PlecoResourcesTtl == nil {
		return nil, false
	}
	return o.PlecoResourcesTtl, true
}

// HasPlecoResourcesTtl returns a boolean if a field has been set.
func (o *ClusterAdvancedSettings) HasPlecoResourcesTtl() bool {
	if o != nil && o.PlecoResourcesTtl != nil {
		return true
	}

	return false
}

// SetPlecoResourcesTtl gets a reference to the given int32 and assigns it to the PlecoResourcesTtl field.
// Deprecated
func (o *ClusterAdvancedSettings) SetPlecoResourcesTtl(v int32) {
	o.PlecoResourcesTtl = &v
}

// GetLokiLogRetentionInWeek returns the LokiLogRetentionInWeek field value if set, zero value otherwise.
func (o *ClusterAdvancedSettings) GetLokiLogRetentionInWeek() int32 {
	if o == nil || o.LokiLogRetentionInWeek == nil {
		var ret int32
		return ret
	}
	return *o.LokiLogRetentionInWeek
}

// GetLokiLogRetentionInWeekOk returns a tuple with the LokiLogRetentionInWeek field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ClusterAdvancedSettings) GetLokiLogRetentionInWeekOk() (*int32, bool) {
	if o == nil || o.LokiLogRetentionInWeek == nil {
		return nil, false
	}
	return o.LokiLogRetentionInWeek, true
}

// HasLokiLogRetentionInWeek returns a boolean if a field has been set.
func (o *ClusterAdvancedSettings) HasLokiLogRetentionInWeek() bool {
	if o != nil && o.LokiLogRetentionInWeek != nil {
		return true
	}

	return false
}

// SetLokiLogRetentionInWeek gets a reference to the given int32 and assigns it to the LokiLogRetentionInWeek field.
func (o *ClusterAdvancedSettings) SetLokiLogRetentionInWeek(v int32) {
	o.LokiLogRetentionInWeek = &v
}

func (o ClusterAdvancedSettings) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.RegistryImageRetentionTime != nil {
		toSerialize["registry.image_retention_time"] = o.RegistryImageRetentionTime
	}
	if o.LoadBalancerSize != nil {
		toSerialize["load_balancer.size"] = o.LoadBalancerSize
	}
	if o.PlecoResourcesTtl != nil {
		toSerialize["pleco.resources_ttl"] = o.PlecoResourcesTtl
	}
	if o.LokiLogRetentionInWeek != nil {
		toSerialize["loki.log_retention_in_week"] = o.LokiLogRetentionInWeek
	}
	return json.Marshal(toSerialize)
}

type NullableClusterAdvancedSettings struct {
	value *ClusterAdvancedSettings
	isSet bool
}

func (v NullableClusterAdvancedSettings) Get() *ClusterAdvancedSettings {
	return v.value
}

func (v *NullableClusterAdvancedSettings) Set(val *ClusterAdvancedSettings) {
	v.value = val
	v.isSet = true
}

func (v NullableClusterAdvancedSettings) IsSet() bool {
	return v.isSet
}

func (v *NullableClusterAdvancedSettings) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableClusterAdvancedSettings(val *ClusterAdvancedSettings) *NullableClusterAdvancedSettings {
	return &NullableClusterAdvancedSettings{value: val, isSet: true}
}

func (v NullableClusterAdvancedSettings) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableClusterAdvancedSettings) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
