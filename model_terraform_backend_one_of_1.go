/*
Qovery API

- Qovery is the fastest way to deploy your full-stack apps on any Cloud provider. - ℹ️ The API is stable and still in development.

API version: 1.0.4
Contact: support+api+documentation@qovery.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package qovery

import (
	"encoding/json"
)

// checks if the TerraformBackendOneOf1 type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TerraformBackendOneOf1{}

// TerraformBackendOneOf1 struct for TerraformBackendOneOf1
type TerraformBackendOneOf1 struct {
	// User-provided backend configuration
	UserProvided         map[string]interface{} `json:"user_provided,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _TerraformBackendOneOf1 TerraformBackendOneOf1

// NewTerraformBackendOneOf1 instantiates a new TerraformBackendOneOf1 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTerraformBackendOneOf1() *TerraformBackendOneOf1 {
	this := TerraformBackendOneOf1{}
	return &this
}

// NewTerraformBackendOneOf1WithDefaults instantiates a new TerraformBackendOneOf1 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTerraformBackendOneOf1WithDefaults() *TerraformBackendOneOf1 {
	this := TerraformBackendOneOf1{}
	return &this
}

// GetUserProvided returns the UserProvided field value if set, zero value otherwise.
func (o *TerraformBackendOneOf1) GetUserProvided() map[string]interface{} {
	if o == nil || IsNil(o.UserProvided) {
		var ret map[string]interface{}
		return ret
	}
	return o.UserProvided
}

// GetUserProvidedOk returns a tuple with the UserProvided field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TerraformBackendOneOf1) GetUserProvidedOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.UserProvided) {
		return map[string]interface{}{}, false
	}
	return o.UserProvided, true
}

// HasUserProvided returns a boolean if a field has been set.
func (o *TerraformBackendOneOf1) HasUserProvided() bool {
	if o != nil && !IsNil(o.UserProvided) {
		return true
	}

	return false
}

// SetUserProvided gets a reference to the given map[string]interface{} and assigns it to the UserProvided field.
func (o *TerraformBackendOneOf1) SetUserProvided(v map[string]interface{}) {
	o.UserProvided = v
}

func (o TerraformBackendOneOf1) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TerraformBackendOneOf1) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.UserProvided) {
		toSerialize["user_provided"] = o.UserProvided
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *TerraformBackendOneOf1) UnmarshalJSON(data []byte) (err error) {
	varTerraformBackendOneOf1 := _TerraformBackendOneOf1{}

	err = json.Unmarshal(data, &varTerraformBackendOneOf1)

	if err != nil {
		return err
	}

	*o = TerraformBackendOneOf1(varTerraformBackendOneOf1)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "user_provided")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableTerraformBackendOneOf1 struct {
	value *TerraformBackendOneOf1
	isSet bool
}

func (v NullableTerraformBackendOneOf1) Get() *TerraformBackendOneOf1 {
	return v.value
}

func (v *NullableTerraformBackendOneOf1) Set(val *TerraformBackendOneOf1) {
	v.value = val
	v.isSet = true
}

func (v NullableTerraformBackendOneOf1) IsSet() bool {
	return v.isSet
}

func (v *NullableTerraformBackendOneOf1) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTerraformBackendOneOf1(val *TerraformBackendOneOf1) *NullableTerraformBackendOneOf1 {
	return &NullableTerraformBackendOneOf1{value: val, isSet: true}
}

func (v NullableTerraformBackendOneOf1) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTerraformBackendOneOf1) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
