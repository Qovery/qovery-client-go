/*
Qovery API

- Qovery is the fastest way to deploy your full-stack apps on any Cloud provider. - ℹ️ The API is stable and still in development.

API version: 1.0.4
Contact: support+api+documentation@qovery.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package qovery

import (
	"encoding/json"
	"fmt"
)

// StepMetricStatusEnum The status of completion for the step: - SUCCESS: The step completed successfully. - ERROR: The step completed with an error. - CANCEL: The step was canceled. - SKIP: The step was skipped because it was not necessary.
type StepMetricStatusEnum string

// List of StepMetricStatusEnum
const (
	STEPMETRICSTATUSENUM_SUCCESS StepMetricStatusEnum = "SUCCESS"
	STEPMETRICSTATUSENUM_ERROR   StepMetricStatusEnum = "ERROR"
	STEPMETRICSTATUSENUM_CANCEL  StepMetricStatusEnum = "CANCEL"
	STEPMETRICSTATUSENUM_SKIP    StepMetricStatusEnum = "SKIP"
)

// All allowed values of StepMetricStatusEnum enum
var AllowedStepMetricStatusEnumEnumValues = []StepMetricStatusEnum{
	"SUCCESS",
	"ERROR",
	"CANCEL",
	"SKIP",
}

func (v *StepMetricStatusEnum) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := StepMetricStatusEnum(value)
	for _, existing := range AllowedStepMetricStatusEnumEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid StepMetricStatusEnum", value)
}

// NewStepMetricStatusEnumFromValue returns a pointer to a valid StepMetricStatusEnum
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewStepMetricStatusEnumFromValue(v string) (*StepMetricStatusEnum, error) {
	ev := StepMetricStatusEnum(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for StepMetricStatusEnum: valid values are %v", v, AllowedStepMetricStatusEnumEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v StepMetricStatusEnum) IsValid() bool {
	for _, existing := range AllowedStepMetricStatusEnumEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to StepMetricStatusEnum value
func (v StepMetricStatusEnum) Ptr() *StepMetricStatusEnum {
	return &v
}

type NullableStepMetricStatusEnum struct {
	value *StepMetricStatusEnum
	isSet bool
}

func (v NullableStepMetricStatusEnum) Get() *StepMetricStatusEnum {
	return v.value
}

func (v *NullableStepMetricStatusEnum) Set(val *StepMetricStatusEnum) {
	v.value = val
	v.isSet = true
}

func (v NullableStepMetricStatusEnum) IsSet() bool {
	return v.isSet
}

func (v *NullableStepMetricStatusEnum) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableStepMetricStatusEnum(val *StepMetricStatusEnum) *NullableStepMetricStatusEnum {
	return &NullableStepMetricStatusEnum{value: val, isSet: true}
}

func (v NullableStepMetricStatusEnum) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableStepMetricStatusEnum) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
