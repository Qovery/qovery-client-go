/*
Qovery API

- Qovery is the fastest way to deploy your full-stack apps on any Cloud provider. - ℹ️ The API is stable and still in development.

API version: 1.0.3
Contact: support+api+documentation@qovery.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package qovery

import (
	"encoding/json"
	"fmt"
)

// OrganizationCustomRoleProjectPermission Indicates the permission for a target project and a given environment type, from the lowest to the highest: - `NO_ACCESS` user has no access - `VIEWER` user can access the environment (and applications / containers / databases / variables) - `DEPLOYER` user can deploy the environment (dependent on the required cluster permission `ENV_CREATOR`) - `MANAGER` user can create an environment (and applications / containers / databases / variables)
type OrganizationCustomRoleProjectPermission string

// List of OrganizationCustomRoleProjectPermission
const (
	ORGANIZATIONCUSTOMROLEPROJECTPERMISSION_NO_ACCESS OrganizationCustomRoleProjectPermission = "NO_ACCESS"
	ORGANIZATIONCUSTOMROLEPROJECTPERMISSION_VIEWER    OrganizationCustomRoleProjectPermission = "VIEWER"
	ORGANIZATIONCUSTOMROLEPROJECTPERMISSION_DEPLOYER  OrganizationCustomRoleProjectPermission = "DEPLOYER"
	ORGANIZATIONCUSTOMROLEPROJECTPERMISSION_MANAGER   OrganizationCustomRoleProjectPermission = "MANAGER"
)

// All allowed values of OrganizationCustomRoleProjectPermission enum
var AllowedOrganizationCustomRoleProjectPermissionEnumValues = []OrganizationCustomRoleProjectPermission{
	"NO_ACCESS",
	"VIEWER",
	"DEPLOYER",
	"MANAGER",
}

func (v *OrganizationCustomRoleProjectPermission) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := OrganizationCustomRoleProjectPermission(value)
	for _, existing := range AllowedOrganizationCustomRoleProjectPermissionEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid OrganizationCustomRoleProjectPermission", value)
}

// NewOrganizationCustomRoleProjectPermissionFromValue returns a pointer to a valid OrganizationCustomRoleProjectPermission
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewOrganizationCustomRoleProjectPermissionFromValue(v string) (*OrganizationCustomRoleProjectPermission, error) {
	ev := OrganizationCustomRoleProjectPermission(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for OrganizationCustomRoleProjectPermission: valid values are %v", v, AllowedOrganizationCustomRoleProjectPermissionEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v OrganizationCustomRoleProjectPermission) IsValid() bool {
	for _, existing := range AllowedOrganizationCustomRoleProjectPermissionEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to OrganizationCustomRoleProjectPermission value
func (v OrganizationCustomRoleProjectPermission) Ptr() *OrganizationCustomRoleProjectPermission {
	return &v
}

type NullableOrganizationCustomRoleProjectPermission struct {
	value *OrganizationCustomRoleProjectPermission
	isSet bool
}

func (v NullableOrganizationCustomRoleProjectPermission) Get() *OrganizationCustomRoleProjectPermission {
	return v.value
}

func (v *NullableOrganizationCustomRoleProjectPermission) Set(val *OrganizationCustomRoleProjectPermission) {
	v.value = val
	v.isSet = true
}

func (v NullableOrganizationCustomRoleProjectPermission) IsSet() bool {
	return v.isSet
}

func (v *NullableOrganizationCustomRoleProjectPermission) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOrganizationCustomRoleProjectPermission(val *OrganizationCustomRoleProjectPermission) *NullableOrganizationCustomRoleProjectPermission {
	return &NullableOrganizationCustomRoleProjectPermission{value: val, isSet: true}
}

func (v NullableOrganizationCustomRoleProjectPermission) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOrganizationCustomRoleProjectPermission) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
