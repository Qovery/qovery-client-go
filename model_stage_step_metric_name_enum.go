/*
Qovery API

- Qovery is the fastest way to deploy your full-stack apps on any Cloud provider. - ℹ️ The API is stable and still in development.

API version: 1.0.3
Contact: support+api+documentation@qovery.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package qovery

import (
	"encoding/json"
	"fmt"
)

// StageStepMetricNameEnum The name of the deployment step at the stage level: - QUEUEING: The step preceding the actual stage deployment step. - PROVISION_BUILDER: The step to provision builders before the actual build.
type StageStepMetricNameEnum string

// List of StageStepMetricNameEnum
const (
	STAGESTEPMETRICNAMEENUM_QUEUEING          StageStepMetricNameEnum = "QUEUEING"
	STAGESTEPMETRICNAMEENUM_PROVISION_BUILDER StageStepMetricNameEnum = "PROVISION_BUILDER"
)

// All allowed values of StageStepMetricNameEnum enum
var AllowedStageStepMetricNameEnumEnumValues = []StageStepMetricNameEnum{
	"QUEUEING",
	"PROVISION_BUILDER",
}

func (v *StageStepMetricNameEnum) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := StageStepMetricNameEnum(value)
	for _, existing := range AllowedStageStepMetricNameEnumEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid StageStepMetricNameEnum", value)
}

// NewStageStepMetricNameEnumFromValue returns a pointer to a valid StageStepMetricNameEnum
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewStageStepMetricNameEnumFromValue(v string) (*StageStepMetricNameEnum, error) {
	ev := StageStepMetricNameEnum(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for StageStepMetricNameEnum: valid values are %v", v, AllowedStageStepMetricNameEnumEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v StageStepMetricNameEnum) IsValid() bool {
	for _, existing := range AllowedStageStepMetricNameEnumEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to StageStepMetricNameEnum value
func (v StageStepMetricNameEnum) Ptr() *StageStepMetricNameEnum {
	return &v
}

type NullableStageStepMetricNameEnum struct {
	value *StageStepMetricNameEnum
	isSet bool
}

func (v NullableStageStepMetricNameEnum) Get() *StageStepMetricNameEnum {
	return v.value
}

func (v *NullableStageStepMetricNameEnum) Set(val *StageStepMetricNameEnum) {
	v.value = val
	v.isSet = true
}

func (v NullableStageStepMetricNameEnum) IsSet() bool {
	return v.isSet
}

func (v *NullableStageStepMetricNameEnum) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableStageStepMetricNameEnum(val *StageStepMetricNameEnum) *NullableStageStepMetricNameEnum {
	return &NullableStageStepMetricNameEnum{value: val, isSet: true}
}

func (v NullableStageStepMetricNameEnum) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableStageStepMetricNameEnum) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
