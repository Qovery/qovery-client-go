/*
Qovery API

- Qovery is the fastest way to deploy your full-stack apps on any Cloud provider. - ℹ️ The API is stable and still in development.

API version: 1.0.3
Contact: support+api+documentation@qovery.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package qovery

import (
	"encoding/json"
)

// EnvironmentApplicationsStorage struct for EnvironmentApplicationsStorage
type EnvironmentApplicationsStorage struct {
	Application string        `json:"application"`
	Disks       []StorageDisk `json:"disks,omitempty"`
}

// NewEnvironmentApplicationsStorage instantiates a new EnvironmentApplicationsStorage object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEnvironmentApplicationsStorage(application string) *EnvironmentApplicationsStorage {
	this := EnvironmentApplicationsStorage{}
	this.Application = application
	return &this
}

// NewEnvironmentApplicationsStorageWithDefaults instantiates a new EnvironmentApplicationsStorage object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEnvironmentApplicationsStorageWithDefaults() *EnvironmentApplicationsStorage {
	this := EnvironmentApplicationsStorage{}
	return &this
}

// GetApplication returns the Application field value
func (o *EnvironmentApplicationsStorage) GetApplication() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Application
}

// GetApplicationOk returns a tuple with the Application field value
// and a boolean to check if the value has been set.
func (o *EnvironmentApplicationsStorage) GetApplicationOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Application, true
}

// SetApplication sets field value
func (o *EnvironmentApplicationsStorage) SetApplication(v string) {
	o.Application = v
}

// GetDisks returns the Disks field value if set, zero value otherwise.
func (o *EnvironmentApplicationsStorage) GetDisks() []StorageDisk {
	if o == nil || o.Disks == nil {
		var ret []StorageDisk
		return ret
	}
	return o.Disks
}

// GetDisksOk returns a tuple with the Disks field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EnvironmentApplicationsStorage) GetDisksOk() ([]StorageDisk, bool) {
	if o == nil || o.Disks == nil {
		return nil, false
	}
	return o.Disks, true
}

// HasDisks returns a boolean if a field has been set.
func (o *EnvironmentApplicationsStorage) HasDisks() bool {
	if o != nil && o.Disks != nil {
		return true
	}

	return false
}

// SetDisks gets a reference to the given []StorageDisk and assigns it to the Disks field.
func (o *EnvironmentApplicationsStorage) SetDisks(v []StorageDisk) {
	o.Disks = v
}

func (o EnvironmentApplicationsStorage) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["application"] = o.Application
	}
	if o.Disks != nil {
		toSerialize["disks"] = o.Disks
	}
	return json.Marshal(toSerialize)
}

type NullableEnvironmentApplicationsStorage struct {
	value *EnvironmentApplicationsStorage
	isSet bool
}

func (v NullableEnvironmentApplicationsStorage) Get() *EnvironmentApplicationsStorage {
	return v.value
}

func (v *NullableEnvironmentApplicationsStorage) Set(val *EnvironmentApplicationsStorage) {
	v.value = val
	v.isSet = true
}

func (v NullableEnvironmentApplicationsStorage) IsSet() bool {
	return v.isSet
}

func (v *NullableEnvironmentApplicationsStorage) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEnvironmentApplicationsStorage(val *EnvironmentApplicationsStorage) *NullableEnvironmentApplicationsStorage {
	return &NullableEnvironmentApplicationsStorage{value: val, isSet: true}
}

func (v NullableEnvironmentApplicationsStorage) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEnvironmentApplicationsStorage) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
