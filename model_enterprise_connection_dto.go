/*
Qovery API

- Qovery is the fastest way to deploy your full-stack apps on any Cloud provider. - ℹ️ The API is stable and still in development.

API version: 1.0.4
Contact: support+api+documentation@qovery.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package qovery

import (
	"encoding/json"
	"fmt"
)

// checks if the EnterpriseConnectionDto type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &EnterpriseConnectionDto{}

// EnterpriseConnectionDto struct for EnterpriseConnectionDto
type EnterpriseConnectionDto struct {
	// The purpose of this default role is to be associated to your users if: - you choose to not expose your IDPs groups to the SAML / OIDC connection - no associated group is found in your `group_mappings` defined  You can define either a Qovery provided role (i.e `viewer`) or one of your custom role`s uuid.
	DefaultRole string `json:"default_role"`
	// * if `true`, roles will be synchronized at each user login according to your `group_mappings` configuration based on your IDP groups * if `false`, no synchronization is done for your users and `group_mappings` configuration will be ignored
	EnforceGroupSync bool `json:"enforce_group_sync"`
	// This will allow to create mapping rules based on your IDP group names.   It's a dictionnary having: - key: either a Qovery provided role (i.e `viewer`) or one of your custom role`s uuid - value: an array of your IDP group names  Example: \"I want to associate the Qovery role `devops` to my IDP groups ['Administrators', 'DevSecOps']\"
	GroupMappings        map[string][]string `json:"group_mappings"`
	AdditionalProperties map[string]interface{}
}

type _EnterpriseConnectionDto EnterpriseConnectionDto

// NewEnterpriseConnectionDto instantiates a new EnterpriseConnectionDto object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEnterpriseConnectionDto(defaultRole string, enforceGroupSync bool, groupMappings map[string][]string) *EnterpriseConnectionDto {
	this := EnterpriseConnectionDto{}
	this.DefaultRole = defaultRole
	this.EnforceGroupSync = enforceGroupSync
	this.GroupMappings = groupMappings
	return &this
}

// NewEnterpriseConnectionDtoWithDefaults instantiates a new EnterpriseConnectionDto object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEnterpriseConnectionDtoWithDefaults() *EnterpriseConnectionDto {
	this := EnterpriseConnectionDto{}
	return &this
}

// GetDefaultRole returns the DefaultRole field value
func (o *EnterpriseConnectionDto) GetDefaultRole() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.DefaultRole
}

// GetDefaultRoleOk returns a tuple with the DefaultRole field value
// and a boolean to check if the value has been set.
func (o *EnterpriseConnectionDto) GetDefaultRoleOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DefaultRole, true
}

// SetDefaultRole sets field value
func (o *EnterpriseConnectionDto) SetDefaultRole(v string) {
	o.DefaultRole = v
}

// GetEnforceGroupSync returns the EnforceGroupSync field value
func (o *EnterpriseConnectionDto) GetEnforceGroupSync() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.EnforceGroupSync
}

// GetEnforceGroupSyncOk returns a tuple with the EnforceGroupSync field value
// and a boolean to check if the value has been set.
func (o *EnterpriseConnectionDto) GetEnforceGroupSyncOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.EnforceGroupSync, true
}

// SetEnforceGroupSync sets field value
func (o *EnterpriseConnectionDto) SetEnforceGroupSync(v bool) {
	o.EnforceGroupSync = v
}

// GetGroupMappings returns the GroupMappings field value
func (o *EnterpriseConnectionDto) GetGroupMappings() map[string][]string {
	if o == nil {
		var ret map[string][]string
		return ret
	}

	return o.GroupMappings
}

// GetGroupMappingsOk returns a tuple with the GroupMappings field value
// and a boolean to check if the value has been set.
func (o *EnterpriseConnectionDto) GetGroupMappingsOk() (*map[string][]string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.GroupMappings, true
}

// SetGroupMappings sets field value
func (o *EnterpriseConnectionDto) SetGroupMappings(v map[string][]string) {
	o.GroupMappings = v
}

func (o EnterpriseConnectionDto) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o EnterpriseConnectionDto) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["default_role"] = o.DefaultRole
	toSerialize["enforce_group_sync"] = o.EnforceGroupSync
	toSerialize["group_mappings"] = o.GroupMappings

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *EnterpriseConnectionDto) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"default_role",
		"enforce_group_sync",
		"group_mappings",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varEnterpriseConnectionDto := _EnterpriseConnectionDto{}

	err = json.Unmarshal(data, &varEnterpriseConnectionDto)

	if err != nil {
		return err
	}

	*o = EnterpriseConnectionDto(varEnterpriseConnectionDto)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "default_role")
		delete(additionalProperties, "enforce_group_sync")
		delete(additionalProperties, "group_mappings")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableEnterpriseConnectionDto struct {
	value *EnterpriseConnectionDto
	isSet bool
}

func (v NullableEnterpriseConnectionDto) Get() *EnterpriseConnectionDto {
	return v.value
}

func (v *NullableEnterpriseConnectionDto) Set(val *EnterpriseConnectionDto) {
	v.value = val
	v.isSet = true
}

func (v NullableEnterpriseConnectionDto) IsSet() bool {
	return v.isSet
}

func (v *NullableEnterpriseConnectionDto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEnterpriseConnectionDto(val *EnterpriseConnectionDto) *NullableEnterpriseConnectionDto {
	return &NullableEnterpriseConnectionDto{value: val, isSet: true}
}

func (v NullableEnterpriseConnectionDto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEnterpriseConnectionDto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
