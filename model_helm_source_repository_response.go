/*
Qovery API

- Qovery is the fastest way to deploy your full-stack apps on any Cloud provider. - ℹ️ The API is stable and still in development.

API version: 1.0.4
Contact: support+api+documentation@qovery.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package qovery

import (
	"encoding/json"
	"fmt"
)

// checks if the HelmSourceRepositoryResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &HelmSourceRepositoryResponse{}

// HelmSourceRepositoryResponse struct for HelmSourceRepositoryResponse
type HelmSourceRepositoryResponse struct {
	ChartName            string                                 `json:"chart_name"`
	ChartVersion         string                                 `json:"chart_version"`
	Repository           HelmSourceRepositoryResponseRepository `json:"repository"`
	AdditionalProperties map[string]interface{}
}

type _HelmSourceRepositoryResponse HelmSourceRepositoryResponse

// NewHelmSourceRepositoryResponse instantiates a new HelmSourceRepositoryResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewHelmSourceRepositoryResponse(chartName string, chartVersion string, repository HelmSourceRepositoryResponseRepository) *HelmSourceRepositoryResponse {
	this := HelmSourceRepositoryResponse{}
	this.ChartName = chartName
	this.ChartVersion = chartVersion
	this.Repository = repository
	return &this
}

// NewHelmSourceRepositoryResponseWithDefaults instantiates a new HelmSourceRepositoryResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewHelmSourceRepositoryResponseWithDefaults() *HelmSourceRepositoryResponse {
	this := HelmSourceRepositoryResponse{}
	return &this
}

// GetChartName returns the ChartName field value
func (o *HelmSourceRepositoryResponse) GetChartName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ChartName
}

// GetChartNameOk returns a tuple with the ChartName field value
// and a boolean to check if the value has been set.
func (o *HelmSourceRepositoryResponse) GetChartNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ChartName, true
}

// SetChartName sets field value
func (o *HelmSourceRepositoryResponse) SetChartName(v string) {
	o.ChartName = v
}

// GetChartVersion returns the ChartVersion field value
func (o *HelmSourceRepositoryResponse) GetChartVersion() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ChartVersion
}

// GetChartVersionOk returns a tuple with the ChartVersion field value
// and a boolean to check if the value has been set.
func (o *HelmSourceRepositoryResponse) GetChartVersionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ChartVersion, true
}

// SetChartVersion sets field value
func (o *HelmSourceRepositoryResponse) SetChartVersion(v string) {
	o.ChartVersion = v
}

// GetRepository returns the Repository field value
func (o *HelmSourceRepositoryResponse) GetRepository() HelmSourceRepositoryResponseRepository {
	if o == nil {
		var ret HelmSourceRepositoryResponseRepository
		return ret
	}

	return o.Repository
}

// GetRepositoryOk returns a tuple with the Repository field value
// and a boolean to check if the value has been set.
func (o *HelmSourceRepositoryResponse) GetRepositoryOk() (*HelmSourceRepositoryResponseRepository, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Repository, true
}

// SetRepository sets field value
func (o *HelmSourceRepositoryResponse) SetRepository(v HelmSourceRepositoryResponseRepository) {
	o.Repository = v
}

func (o HelmSourceRepositoryResponse) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o HelmSourceRepositoryResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["chart_name"] = o.ChartName
	toSerialize["chart_version"] = o.ChartVersion
	toSerialize["repository"] = o.Repository

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *HelmSourceRepositoryResponse) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"chart_name",
		"chart_version",
		"repository",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varHelmSourceRepositoryResponse := _HelmSourceRepositoryResponse{}

	err = json.Unmarshal(data, &varHelmSourceRepositoryResponse)

	if err != nil {
		return err
	}

	*o = HelmSourceRepositoryResponse(varHelmSourceRepositoryResponse)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "chart_name")
		delete(additionalProperties, "chart_version")
		delete(additionalProperties, "repository")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableHelmSourceRepositoryResponse struct {
	value *HelmSourceRepositoryResponse
	isSet bool
}

func (v NullableHelmSourceRepositoryResponse) Get() *HelmSourceRepositoryResponse {
	return v.value
}

func (v *NullableHelmSourceRepositoryResponse) Set(val *HelmSourceRepositoryResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableHelmSourceRepositoryResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableHelmSourceRepositoryResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableHelmSourceRepositoryResponse(val *HelmSourceRepositoryResponse) *NullableHelmSourceRepositoryResponse {
	return &NullableHelmSourceRepositoryResponse{value: val, isSet: true}
}

func (v NullableHelmSourceRepositoryResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableHelmSourceRepositoryResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
