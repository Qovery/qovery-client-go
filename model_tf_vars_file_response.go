/*
Qovery API

- Qovery is the fastest way to deploy your full-stack apps on any Cloud provider. - ℹ️ The API is stable and still in development.

API version: 1.0.4
Contact: support+api+documentation@qovery.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package qovery

import (
	"encoding/json"
	"fmt"
)

// checks if the TfVarsFileResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TfVarsFileResponse{}

// TfVarsFileResponse Represents a Terraform tfvars file with its variables
type TfVarsFileResponse struct {
	// The path to the tfvars file within the Git repository
	Source string `json:"source"`
	// Map of variable names to their values from the tfvars file
	Variables            map[string]string `json:"variables"`
	AdditionalProperties map[string]interface{}
}

type _TfVarsFileResponse TfVarsFileResponse

// NewTfVarsFileResponse instantiates a new TfVarsFileResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTfVarsFileResponse(source string, variables map[string]string) *TfVarsFileResponse {
	this := TfVarsFileResponse{}
	this.Source = source
	this.Variables = variables
	return &this
}

// NewTfVarsFileResponseWithDefaults instantiates a new TfVarsFileResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTfVarsFileResponseWithDefaults() *TfVarsFileResponse {
	this := TfVarsFileResponse{}
	return &this
}

// GetSource returns the Source field value
func (o *TfVarsFileResponse) GetSource() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Source
}

// GetSourceOk returns a tuple with the Source field value
// and a boolean to check if the value has been set.
func (o *TfVarsFileResponse) GetSourceOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Source, true
}

// SetSource sets field value
func (o *TfVarsFileResponse) SetSource(v string) {
	o.Source = v
}

// GetVariables returns the Variables field value
func (o *TfVarsFileResponse) GetVariables() map[string]string {
	if o == nil {
		var ret map[string]string
		return ret
	}

	return o.Variables
}

// GetVariablesOk returns a tuple with the Variables field value
// and a boolean to check if the value has been set.
func (o *TfVarsFileResponse) GetVariablesOk() (*map[string]string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Variables, true
}

// SetVariables sets field value
func (o *TfVarsFileResponse) SetVariables(v map[string]string) {
	o.Variables = v
}

func (o TfVarsFileResponse) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TfVarsFileResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["source"] = o.Source
	toSerialize["variables"] = o.Variables

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *TfVarsFileResponse) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"source",
		"variables",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varTfVarsFileResponse := _TfVarsFileResponse{}

	err = json.Unmarshal(data, &varTfVarsFileResponse)

	if err != nil {
		return err
	}

	*o = TfVarsFileResponse(varTfVarsFileResponse)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "source")
		delete(additionalProperties, "variables")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableTfVarsFileResponse struct {
	value *TfVarsFileResponse
	isSet bool
}

func (v NullableTfVarsFileResponse) Get() *TfVarsFileResponse {
	return v.value
}

func (v *NullableTfVarsFileResponse) Set(val *TfVarsFileResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableTfVarsFileResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableTfVarsFileResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTfVarsFileResponse(val *TfVarsFileResponse) *NullableTfVarsFileResponse {
	return &NullableTfVarsFileResponse{value: val, isSet: true}
}

func (v NullableTfVarsFileResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTfVarsFileResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
