/*
Qovery API

- Qovery is the fastest way to deploy your full-stack apps on any Cloud provider. - ℹ️ The API is stable and still in development.

API version: 1.0.3
Contact: support+api+documentation@qovery.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package qovery

import (
	"encoding/json"
)

// checks if the DockerfileCheckRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DockerfileCheckRequest{}

// DockerfileCheckRequest struct for DockerfileCheckRequest
type DockerfileCheckRequest struct {
	GitRepository GitRepository `json:"git_repository"`
	// path of the dockerfile with root_path as base path
	DockerfilePath string `json:"dockerfile_path"`
}

// NewDockerfileCheckRequest instantiates a new DockerfileCheckRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDockerfileCheckRequest(gitRepository GitRepository, dockerfilePath string) *DockerfileCheckRequest {
	this := DockerfileCheckRequest{}
	this.GitRepository = gitRepository
	this.DockerfilePath = dockerfilePath
	return &this
}

// NewDockerfileCheckRequestWithDefaults instantiates a new DockerfileCheckRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDockerfileCheckRequestWithDefaults() *DockerfileCheckRequest {
	this := DockerfileCheckRequest{}
	return &this
}

// GetGitRepository returns the GitRepository field value
func (o *DockerfileCheckRequest) GetGitRepository() GitRepository {
	if o == nil {
		var ret GitRepository
		return ret
	}

	return o.GitRepository
}

// GetGitRepositoryOk returns a tuple with the GitRepository field value
// and a boolean to check if the value has been set.
func (o *DockerfileCheckRequest) GetGitRepositoryOk() (*GitRepository, bool) {
	if o == nil {
		return nil, false
	}
	return &o.GitRepository, true
}

// SetGitRepository sets field value
func (o *DockerfileCheckRequest) SetGitRepository(v GitRepository) {
	o.GitRepository = v
}

// GetDockerfilePath returns the DockerfilePath field value
func (o *DockerfileCheckRequest) GetDockerfilePath() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.DockerfilePath
}

// GetDockerfilePathOk returns a tuple with the DockerfilePath field value
// and a boolean to check if the value has been set.
func (o *DockerfileCheckRequest) GetDockerfilePathOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DockerfilePath, true
}

// SetDockerfilePath sets field value
func (o *DockerfileCheckRequest) SetDockerfilePath(v string) {
	o.DockerfilePath = v
}

func (o DockerfileCheckRequest) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DockerfileCheckRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["git_repository"] = o.GitRepository
	toSerialize["dockerfile_path"] = o.DockerfilePath
	return toSerialize, nil
}

type NullableDockerfileCheckRequest struct {
	value *DockerfileCheckRequest
	isSet bool
}

func (v NullableDockerfileCheckRequest) Get() *DockerfileCheckRequest {
	return v.value
}

func (v *NullableDockerfileCheckRequest) Set(val *DockerfileCheckRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableDockerfileCheckRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableDockerfileCheckRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDockerfileCheckRequest(val *DockerfileCheckRequest) *NullableDockerfileCheckRequest {
	return &NullableDockerfileCheckRequest{value: val, isSet: true}
}

func (v NullableDockerfileCheckRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDockerfileCheckRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
