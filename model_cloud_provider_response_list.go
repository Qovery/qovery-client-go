/*
Qovery API

- Qovery is the fastest way to deploy your full-stack apps on any Cloud provider. - ℹ️ The API is stable and still in development.

API version: 1.0.3
Contact: support+api+documentation@qovery.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package qovery

import (
	"encoding/json"
)

// checks if the CloudProviderResponseList type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CloudProviderResponseList{}

// CloudProviderResponseList struct for CloudProviderResponseList
type CloudProviderResponseList struct {
	Results []CloudProvider `json:"results,omitempty"`
}

// NewCloudProviderResponseList instantiates a new CloudProviderResponseList object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCloudProviderResponseList() *CloudProviderResponseList {
	this := CloudProviderResponseList{}
	return &this
}

// NewCloudProviderResponseListWithDefaults instantiates a new CloudProviderResponseList object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCloudProviderResponseListWithDefaults() *CloudProviderResponseList {
	this := CloudProviderResponseList{}
	return &this
}

// GetResults returns the Results field value if set, zero value otherwise.
func (o *CloudProviderResponseList) GetResults() []CloudProvider {
	if o == nil || IsNil(o.Results) {
		var ret []CloudProvider
		return ret
	}
	return o.Results
}

// GetResultsOk returns a tuple with the Results field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CloudProviderResponseList) GetResultsOk() ([]CloudProvider, bool) {
	if o == nil || IsNil(o.Results) {
		return nil, false
	}
	return o.Results, true
}

// HasResults returns a boolean if a field has been set.
func (o *CloudProviderResponseList) HasResults() bool {
	if o != nil && !IsNil(o.Results) {
		return true
	}

	return false
}

// SetResults gets a reference to the given []CloudProvider and assigns it to the Results field.
func (o *CloudProviderResponseList) SetResults(v []CloudProvider) {
	o.Results = v
}

func (o CloudProviderResponseList) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CloudProviderResponseList) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Results) {
		toSerialize["results"] = o.Results
	}
	return toSerialize, nil
}

type NullableCloudProviderResponseList struct {
	value *CloudProviderResponseList
	isSet bool
}

func (v NullableCloudProviderResponseList) Get() *CloudProviderResponseList {
	return v.value
}

func (v *NullableCloudProviderResponseList) Set(val *CloudProviderResponseList) {
	v.value = val
	v.isSet = true
}

func (v NullableCloudProviderResponseList) IsSet() bool {
	return v.isSet
}

func (v *NullableCloudProviderResponseList) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCloudProviderResponseList(val *CloudProviderResponseList) *NullableCloudProviderResponseList {
	return &NullableCloudProviderResponseList{value: val, isSet: true}
}

func (v NullableCloudProviderResponseList) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCloudProviderResponseList) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
