{
  "openapi": "3.0.0",
  "info": {
    "version": "1.0.0",
    "title": "[BETA] Qovery API",
    "description": "- Qovery is the fastest way to deploy your full-stack apps on any Cloud provider.\n- ℹ️ The API is in Beta and still in progress. Some endpoints are not available yet.\n\n# Authentication\n\n<!-- ReDoc-Inject: <security-definitions> -->",
    "contact": {
      "name": "Qovery Support Team",
      "url": "https://discord.qovery.com",
      "email": "support+api+documentation@qovery.com"
    },
    "x-logo": {
      "url": "https://raw.githubusercontent.com/Qovery/public-resources/master/qovery_new_logo_white.svg",
      "altText": "Qovery"
    }
  },
  "x-tagGroups": [
    {
      "name": "Organization",
      "tags": [
        "Organization Main Calls",
        "Projects",
        "Members",
        "Billing",
        "Clusters",
        "Cloud Provider",
        "Cloud Provider Credentials"
      ]
    },
    {
      "name": "Project",
      "tags": [
        "Project Main Calls",
        "Environments",
        "Project Deployment Rule",
        "Project Environment Variable",
        "Project Secret"
      ]
    },
    {
      "name": "Environment",
      "tags": [
        "Environment Main Calls",
        "Applications",
        "Databases",
        "Environment Actions",
        "Environment Logs",
        "Environment Deployment History",
        "Environment Deployment Rule",
        "Environment Variable",
        "Environment Secret"
      ]
    },
    {
      "name": "Application",
      "tags": [
        "Application Main Calls",
        "Application Actions",
        "Application Configuration",
        "Custom Domain",
        "Dependency",
        "Application Metrics",
        "Application Database",
        "Application Logs",
        "Application Deployment History",
        "Application Environment Variable",
        "Application Secret",
        "Application Event"
      ]
    },
    {
      "name": "Database",
      "tags": [
        "Database Main Calls",
        "Database Actions",
        "Database Metrics",
        "Database Applications",
        "Logical Database",
        "Database Application",
        "Backups",
        "Database Event"
      ]
    },
    {
      "name": "Account",
      "tags": [
        "Account Info",
        "Git repositories",
        "Referral & Rewards"
      ]
    }
  ],
  "servers": [
    {
      "url": "https://api.qovery.com"
    }
  ],
  "paths": {
    "/organization": {
      "get": {
        "summary": "List user organizations",
        "operationId": "listOrganization",
        "tags": [
          "Organization Main Calls"
        ],
        "responses": {
          "200": {
            "description": "List organizations",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrganizationResponseList"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          }
        }
      },
      "post": {
        "summary": "Create an organization",
        "operationId": "createOrganization",
        "tags": [
          "Organization Main Calls"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/OrganizationRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Create organization",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrganizationResponse"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "description": "Organization name is already taken"
          }
        }
      }
    },
    "/organization/{organizationId}": {
      "get": {
        "summary": "Get organization by ID",
        "operationId": "getOrganization",
        "parameters": [
          {
            "$ref": "#/components/parameters/organizationId"
          }
        ],
        "tags": [
          "Organization Main Calls"
        ],
        "responses": {
          "200": {
            "description": "Get organization by ID",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrganizationResponse"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          }
        }
      },
      "put": {
        "summary": "Edit an organization",
        "description": "To edit an organization you must have the admin permission",
        "operationId": "editOrganization",
        "parameters": [
          {
            "$ref": "#/components/parameters/organizationId"
          }
        ],
        "tags": [
          "Organization Main Calls"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/OrganizationEditRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Edit an organization",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrganizationResponse"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "description": "Organization name is already taken"
          }
        }
      },
      "delete": {
        "summary": "Delete an organization",
        "description": "To delete an organization you must have the admin permission",
        "operationId": "deleteOrganization",
        "parameters": [
          {
            "$ref": "#/components/parameters/organizationId"
          }
        ],
        "tags": [
          "Organization Main Calls"
        ],
        "responses": {
          "204": {
            "$ref": "#/components/responses/204-deletion"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          }
        }
      }
    },
    "/organization/{organizationId}/member": {
      "get": {
        "summary": "Get organization members",
        "operationId": "getOrganizationMembers",
        "parameters": [
          {
            "$ref": "#/components/parameters/organizationId"
          }
        ],
        "tags": [
          "Members"
        ],
        "responses": {
          "200": {
            "description": "Get members",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MemberResponseList"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          }
        }
      }
    },
    "/organization/{organizationId}/member/{userId}": {
      "delete": {
        "summary": "Remove a member",
        "operationId": "deleteMember",
        "parameters": [
          {
            "$ref": "#/components/parameters/organizationId"
          },
          {
            "name": "userId",
            "in": "path",
            "description": "User ID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "tags": [
          "Members"
        ],
        "responses": {
          "204": {
            "$ref": "#/components/responses/204-deletion"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          }
        }
      }
    },
    "/organization/{organizationId}/inviteMember": {
      "get": {
        "summary": "Get invited members",
        "operationId": "getOrganizationInvitedMembers",
        "parameters": [
          {
            "$ref": "#/components/parameters/organizationId"
          }
        ],
        "tags": [
          "Members"
        ],
        "responses": {
          "200": {
            "description": "Get invited members",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InviteMemberResponseList"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          }
        }
      },
      "post": {
        "summary": "Invite someone in the organization",
        "operationId": "postInviteMember",
        "parameters": [
          {
            "$ref": "#/components/parameters/organizationId"
          }
        ],
        "tags": [
          "Members"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/InviteMemberRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "User invited",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InviteMemberResponse"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "description": "User already invited"
          }
        }
      }
    },
    "/organization/{organizationId}/inviteMember/{inviteId}": {
      "post": {
        "summary": "Accept Invite in the organization",
        "operationId": "postAcceptInviteMember",
        "parameters": [
          {
            "$ref": "#/components/parameters/organizationId"
          },
          {
            "name": "inviteId",
            "in": "path",
            "description": "Invite ID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "tags": [
          "Members"
        ],
        "responses": {
          "201": {
            "description": "User invited",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InviteMemberResponse"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "description": "User already invited"
          }
        }
      },
      "delete": {
        "summary": "Remove an invited member",
        "operationId": "deleteInviteMember",
        "parameters": [
          {
            "$ref": "#/components/parameters/organizationId"
          },
          {
            "$ref": "#/paths/~1organization~1%7BorganizationId%7D~1inviteMember~1%7BinviteId%7D/post/parameters/1"
          }
        ],
        "tags": [
          "Members"
        ],
        "responses": {
          "204": {
            "$ref": "#/components/responses/204-deletion"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          }
        }
      }
    },
    "/organization/{organizationId}/transferOwnership": {
      "post": {
        "summary": "Transfer organization ownership to another user",
        "operationId": "postOrganizationTransferOwnership",
        "parameters": [
          {
            "$ref": "#/components/parameters/organizationId"
          }
        ],
        "tags": [
          "Members"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TransferOwnershipRequest"
              }
            }
          }
        },
        "responses": {
          "204": {
            "$ref": "#/components/responses/204"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          }
        }
      }
    },
    "/organization/{organizationId}/currentCost": {
      "get": {
        "summary": "Get organization current cost",
        "operationId": "getOrganizationCurrentCost",
        "parameters": [
          {
            "$ref": "#/components/parameters/organizationId"
          }
        ],
        "tags": [
          "Billing"
        ],
        "responses": {
          "200": {
            "description": "Get Cost",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrganizationCurrentCostResponse"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          }
        }
      }
    },
    "/organization/{organizationId}/creditCode": {
      "post": {
        "summary": "Add credit code",
        "operationId": "addCreditCode",
        "parameters": [
          {
            "$ref": "#/components/parameters/organizationId"
          }
        ],
        "tags": [
          "Billing"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/OrganizationCreditCodeRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "add credit code"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          }
        }
      }
    },
    "/organization/{organizationId}/cluster/{clusterId}/currentCost": {
      "get": {
        "summary": "Get cluster current cost",
        "operationId": "getClusterCurrentCost",
        "description": "Get your cluster cost range. We are unable to give a precise cost of your infrastructure at the moment.\nBut Qovery guarantees that the cost of your cluster will not exceed the max range.\n",
        "parameters": [
          {
            "$ref": "#/components/parameters/organizationId"
          },
          {
            "$ref": "#/components/parameters/clusterId"
          }
        ],
        "tags": [
          "Billing"
        ],
        "responses": {
          "200": {
            "description": "Get cluster cost",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CostRangeResponse"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          }
        }
      }
    },
    "/organization/{organizationId}/billingInfo": {
      "get": {
        "summary": "Get organization billing info",
        "operationId": "getOrganizationBillingInfo",
        "parameters": [
          {
            "$ref": "#/components/parameters/organizationId"
          }
        ],
        "tags": [
          "Billing"
        ],
        "responses": {
          "200": {
            "description": "Get Billing Info",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BillingInfoResponse"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          }
        }
      },
      "put": {
        "summary": "Edit Organization Billing Info",
        "operationId": "editOrganizationBillingInfo",
        "parameters": [
          {
            "$ref": "#/components/parameters/organizationId"
          }
        ],
        "tags": [
          "Billing"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BillingInfoRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Edit billing info",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BillingInfoResponse"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          }
        }
      }
    },
    "/organization/{organizationId}/billingStatus": {
      "get": {
        "summary": "Get organization billing status",
        "description": "This endpoint returns a \"is_valid\" boolean field reflecting the billing status of the organization:\n- If true, the organization billing is valid\n- For Startup organization, it returns false if there is at least 1 invoice unpaid since 1 week\n- For Community organization, it returns false if there is no credit left\n",
        "operationId": "getOrganizationBillingStatus",
        "parameters": [
          {
            "$ref": "#/components/parameters/organizationId"
          }
        ],
        "tags": [
          "Billing"
        ],
        "responses": {
          "200": {
            "description": "Get Billing Status",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BillingStatus"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          }
        }
      }
    },
    "/organization/{organizationId}/invoice": {
      "get": {
        "summary": "List organization invoices",
        "operationId": "listOrganizationInvoice",
        "parameters": [
          {
            "$ref": "#/components/parameters/organizationId"
          }
        ],
        "tags": [
          "Billing"
        ],
        "responses": {
          "200": {
            "description": "List Invoices",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InvoiceResponseList"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          }
        }
      }
    },
    "/organization/{organizationId}/invoice/{invoiceId}": {
      "get": {
        "summary": "Get organization invoice",
        "operationId": "getOrganizationInvoice",
        "parameters": [
          {
            "$ref": "#/components/parameters/organizationId"
          },
          {
            "$ref": "#/components/parameters/invoiceId"
          }
        ],
        "tags": [
          "Billing"
        ],
        "responses": {
          "200": {
            "description": "Get Invoice",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InvoiceResponse"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          }
        }
      }
    },
    "/organization/{organizationId}/invoice/{invoiceId}/download": {
      "get": {
        "summary": "Get invoice link",
        "description": "This will return URL of the invoice PDF",
        "operationId": "getOrganizationInvoicePDF",
        "parameters": [
          {
            "$ref": "#/components/parameters/organizationId"
          },
          {
            "$ref": "#/components/parameters/invoiceId"
          }
        ],
        "tags": [
          "Billing"
        ],
        "responses": {
          "200": {
            "description": "Get invoice PDF",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LinkResponse"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          }
        }
      }
    },
    "/organization/{organizationId}/downloadInvoices": {
      "post": {
        "summary": "Download all invoices",
        "operationId": "organizationDownloadAllInvoices",
        "parameters": [
          {
            "$ref": "#/components/parameters/organizationId"
          }
        ],
        "tags": [
          "Billing"
        ],
        "responses": {
          "202": {
            "description": "You will receive an email containing your invoices"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          }
        }
      }
    },
    "/organization/{organizationId}/creditCard": {
      "get": {
        "summary": "List organization credit cards",
        "operationId": "listOrganizationCreditCards",
        "parameters": [
          {
            "$ref": "#/components/parameters/organizationId"
          }
        ],
        "tags": [
          "Billing"
        ],
        "responses": {
          "200": {
            "description": "List cfredit cards",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreditCardResponseList"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          }
        }
      },
      "post": {
        "summary": "Add credit card",
        "operationId": "addCreditCard",
        "parameters": [
          {
            "$ref": "#/components/parameters/organizationId"
          }
        ],
        "tags": [
          "Billing"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreditCardRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Add credit card",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreditCardResponse"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          }
        }
      }
    },
    "/organization/{organizationId}/creditCard/{creditCardId}": {
      "delete": {
        "summary": "Delete credit card",
        "parameters": [
          {
            "$ref": "#/components/parameters/organizationId"
          },
          {
            "$ref": "#/components/parameters/creditCardId"
          }
        ],
        "tags": [
          "Billing"
        ],
        "responses": {
          "204": {
            "$ref": "#/components/responses/204-deletion"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          }
        }
      }
    },
    "/organization/{organizationId}/project": {
      "get": {
        "summary": "List projects",
        "operationId": "listProject",
        "parameters": [
          {
            "$ref": "#/components/parameters/organizationId"
          }
        ],
        "tags": [
          "Projects"
        ],
        "responses": {
          "200": {
            "description": "List projects",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProjectResponseList"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          }
        }
      },
      "post": {
        "summary": "Create a project",
        "operationId": "createProject",
        "parameters": [
          {
            "$ref": "#/components/parameters/organizationId"
          }
        ],
        "tags": [
          "Projects"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ProjectRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Create project",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProjectResponse"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "description": "Project name within the organization is already taken"
          }
        }
      }
    },
    "/organization/{organizationId}/project/stats": {
      "get": {
        "summary": "List total number of services and environments for each project of the organization",
        "description": "Returns a list of project ids, and for each its total numberof services and environments",
        "operationId": "getOrganizationProjectStats",
        "parameters": [
          {
            "$ref": "#/components/parameters/organizationId"
          }
        ],
        "tags": [
          "Projects"
        ],
        "responses": {
          "200": {
            "description": "Get number of services",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProjectStatsResponseList"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          }
        }
      }
    },
    "/organization/{organizationId}/cluster": {
      "get": {
        "summary": "List organization clusters",
        "operationId": "listOrganizationCluster",
        "parameters": [
          {
            "$ref": "#/components/parameters/organizationId"
          }
        ],
        "tags": [
          "Clusters"
        ],
        "responses": {
          "200": {
            "description": "List clusters",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ClusterResponseList"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          }
        }
      },
      "post": {
        "summary": "Create a cluster",
        "operationId": "createCluster",
        "parameters": [
          {
            "$ref": "#/components/parameters/organizationId"
          }
        ],
        "tags": [
          "Clusters"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ClusterRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Create cluster",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ClusterResponse"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          }
        }
      }
    },
    "/organization/{organizationId}/cluster/status": {
      "get": {
        "summary": "List all clusters statuses",
        "description": "Returns a list of clusters with only their id and status.",
        "operationId": "getOrganizationClusterStatus",
        "parameters": [
          {
            "$ref": "#/components/parameters/organizationId"
          }
        ],
        "tags": [
          "Clusters"
        ],
        "responses": {
          "200": {
            "description": "Get statuses",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ClusterStatusResponseList"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          }
        }
      }
    },
    "/organization/{organizationId}/cluster/{clusterId}": {
      "delete": {
        "summary": "Delete a cluster",
        "operationId": "deleteCluster",
        "parameters": [
          {
            "$ref": "#/components/parameters/organizationId"
          },
          {
            "$ref": "#/components/parameters/clusterId"
          }
        ],
        "tags": [
          "Clusters"
        ],
        "responses": {
          "204": {
            "$ref": "#/components/responses/204-deletion"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          }
        }
      },
      "put": {
        "summary": "Edit a cluster",
        "operationId": "editCluster",
        "parameters": [
          {
            "$ref": "#/components/parameters/organizationId"
          },
          {
            "$ref": "#/components/parameters/clusterId"
          }
        ],
        "tags": [
          "Clusters"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ClusterRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Edited the cluster",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ClusterResponse"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          }
        }
      }
    },
    "/organization/{organizationId}/cluster/{clusterId}/status": {
      "get": {
        "summary": "Get cluster status",
        "operationId": "getClusterStatus",
        "parameters": [
          {
            "$ref": "#/components/parameters/organizationId"
          },
          {
            "$ref": "#/components/parameters/clusterId"
          }
        ],
        "tags": [
          "Clusters"
        ],
        "responses": {
          "200": {
            "description": "Get status",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ClusterStatusResponse"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          }
        }
      }
    },
    "/organization/{organizationId}/cluster/{clusterId}/routingTable": {
      "get": {
        "summary": "Get routing table",
        "description": "Retrieve network routing table where each line corresponds to a route between a destination and a target.",
        "operationId": "getRoutingTable",
        "parameters": [
          {
            "$ref": "#/components/parameters/organizationId"
          },
          {
            "$ref": "#/components/parameters/clusterId"
          }
        ],
        "tags": [
          "Clusters"
        ],
        "responses": {
          "200": {
            "description": "Routing table",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ClusterRoutingTableResponse"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          }
        }
      },
      "put": {
        "summary": "Edit routing table",
        "description": "Edit routing table by returning updated table.",
        "operationId": "editRoutingTable",
        "parameters": [
          {
            "$ref": "#/components/parameters/organizationId"
          },
          {
            "$ref": "#/components/parameters/clusterId"
          }
        ],
        "tags": [
          "Clusters"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ClusterRoutingTableRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Updated routing table",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ClusterRoutingTableResponse"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          }
        }
      }
    },
    "/organization/{organizationId}/aws/credentials": {
      "get": {
        "summary": "List AWS credentials",
        "operationId": "listAWSCredentials",
        "parameters": [
          {
            "$ref": "#/components/parameters/organizationId"
          }
        ],
        "tags": [
          "Cloud Provider Credentials"
        ],
        "responses": {
          "200": {
            "description": "list credentials",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ClusterCredentialsResponseList"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          }
        }
      },
      "post": {
        "summary": "Create AWS credentials set",
        "operationId": "createAWSCredentials",
        "parameters": [
          {
            "$ref": "#/components/parameters/organizationId"
          }
        ],
        "tags": [
          "Cloud Provider Credentials"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AwsCredentialsRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Credentials created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ClusterCredentialsResponse"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          }
        }
      }
    },
    "/organization/{organizationId}/aws/credentials/{credentialsId}": {
      "put": {
        "summary": "Edit a set of AWS credentials",
        "operationId": "editAWSCredentials",
        "parameters": [
          {
            "$ref": "#/components/parameters/organizationId"
          },
          {
            "$ref": "#/components/parameters/credentialsId"
          }
        ],
        "tags": [
          "Cloud Provider Credentials"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AwsCredentialsRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Edit a CustomDomain",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ClusterCredentialsResponse"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          }
        }
      },
      "delete": {
        "summary": "Delete a set of AWS credentials",
        "operationId": "deleteAWSCredentials",
        "parameters": [
          {
            "$ref": "#/components/parameters/credentialsId"
          },
          {
            "$ref": "#/components/parameters/organizationId"
          }
        ],
        "tags": [
          "Cloud Provider Credentials"
        ],
        "responses": {
          "204": {
            "$ref": "#/components/responses/204-deletion"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          }
        }
      }
    },
    "/organization/{organizationId}/digitalOcean/credentials": {
      "get": {
        "summary": "List DO credentials",
        "operationId": "listDOCredentials",
        "parameters": [
          {
            "$ref": "#/components/parameters/organizationId"
          }
        ],
        "tags": [
          "Cloud Provider Credentials"
        ],
        "responses": {
          "200": {
            "description": "list credentials",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ClusterCredentialsResponseList"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          }
        }
      },
      "post": {
        "summary": "Create Digital Ocean credentials set",
        "operationId": "createDOCredentials",
        "parameters": [
          {
            "$ref": "#/components/parameters/organizationId"
          }
        ],
        "tags": [
          "Cloud Provider Credentials"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DoCredentialsRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Credentials created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ClusterCredentialsResponse"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          }
        }
      }
    },
    "/organization/{organizationId}/digitalOcean/credentials/{credentialsId}": {
      "put": {
        "summary": "Edit a set of Digital Ocean credentials",
        "operationId": "editDOCredentials",
        "parameters": [
          {
            "$ref": "#/components/parameters/organizationId"
          },
          {
            "$ref": "#/components/parameters/credentialsId"
          }
        ],
        "tags": [
          "Cloud Provider Credentials"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DoCredentialsRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Edit a CustomDomain",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ClusterCredentialsResponse"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          }
        }
      },
      "delete": {
        "summary": "Delete a set of Digital Ocean credentials",
        "operationId": "deleteDOCredentials",
        "parameters": [
          {
            "$ref": "#/components/parameters/credentialsId"
          },
          {
            "$ref": "#/components/parameters/organizationId"
          }
        ],
        "tags": [
          "Cloud Provider Credentials"
        ],
        "responses": {
          "204": {
            "$ref": "#/components/responses/204-deletion"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          }
        }
      }
    },
    "/organization/{organizationId}/scaleway/credentials": {
      "get": {
        "summary": "List Scaleway credentials",
        "operationId": "listScalewayCredentials",
        "parameters": [
          {
            "$ref": "#/components/parameters/organizationId"
          }
        ],
        "tags": [
          "Cloud Provider Credentials"
        ],
        "responses": {
          "200": {
            "description": "list credentials",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ClusterCredentialsResponseList"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          }
        }
      },
      "post": {
        "summary": "Create Scaleway credentials set",
        "operationId": "createScalewayCredentials",
        "parameters": [
          {
            "$ref": "#/components/parameters/organizationId"
          }
        ],
        "tags": [
          "Cloud Provider Credentials"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ScalewayCredentialsRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Credentials created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ClusterCredentialsResponse"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          }
        }
      }
    },
    "/organization/{organizationId}/scaleway/credentials/{credentialsId}": {
      "put": {
        "summary": "Edit a set of Scaleway credentials",
        "operationId": "editScalewayCredentials",
        "parameters": [
          {
            "$ref": "#/components/parameters/organizationId"
          },
          {
            "$ref": "#/components/parameters/credentialsId"
          }
        ],
        "tags": [
          "Cloud Provider Credentials"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ScalewayCredentialsRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Edit a CustomDomain",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ClusterCredentialsResponse"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          }
        }
      },
      "delete": {
        "summary": "Delete a set of Scaleway credentials",
        "operationId": "deleteScalewayCredentials",
        "parameters": [
          {
            "$ref": "#/components/parameters/credentialsId"
          },
          {
            "$ref": "#/components/parameters/organizationId"
          }
        ],
        "tags": [
          "Cloud Provider Credentials"
        ],
        "responses": {
          "204": {
            "$ref": "#/components/responses/204-deletion"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          }
        }
      }
    },
    "/cloudProvider": {
      "get": {
        "summary": "List Cloud providers available",
        "operationId": "listCloudProvider",
        "tags": [
          "Cloud Provider"
        ],
        "responses": {
          "200": {
            "description": "list cloud providers",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CloudProviderResponseList"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          }
        }
      }
    },
    "/aws/region": {
      "get": {
        "summary": "List AWS regions",
        "operationId": "listAWSRegions",
        "tags": [
          "Cloud Provider"
        ],
        "responses": {
          "200": {
            "description": "list regions",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ClusterRegionResponseList"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          }
        }
      }
    },
    "/aws/clusterFeature": {
      "get": {
        "summary": "List AWS features available",
        "operationId": "listAWSFeatures",
        "tags": [
          "Cloud Provider"
        ],
        "responses": {
          "200": {
            "description": "list features available for AWS cloud provider",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ClusterFeatureResponseList"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          }
        }
      }
    },
    "/digitalOcean/region": {
      "get": {
        "summary": "List DO regions",
        "operationId": "listDORegions",
        "tags": [
          "Cloud Provider"
        ],
        "responses": {
          "200": {
            "description": "list regions",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ClusterRegionResponseList"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          }
        }
      }
    },
    "/digitalOcean/clusterFeature": {
      "get": {
        "summary": "List DO features available",
        "operationId": "listDOFeatures",
        "tags": [
          "Cloud Provider"
        ],
        "responses": {
          "200": {
            "description": "list features available for Digital Ocean cloud provider",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ClusterFeatureResponseList"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          }
        }
      }
    },
    "/scaleway/region": {
      "get": {
        "summary": "List Scaleway regions",
        "operationId": "listScalewayRegions",
        "tags": [
          "Cloud Provider"
        ],
        "responses": {
          "200": {
            "description": "list regions",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ClusterRegionResponseList"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          }
        }
      }
    },
    "/scaleway/clusterFeature": {
      "get": {
        "summary": "List Scaleway features available",
        "operationId": "listScalewayFeatures",
        "tags": [
          "Cloud Provider"
        ],
        "responses": {
          "200": {
            "description": "list features available for Scaleway cloud provider",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ClusterFeatureResponseList"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          }
        }
      }
    },
    "/organization/{organizationId}/cluster/{clusterId}/cloudProviderInfo": {
      "get": {
        "summary": "Get cluster cloud provider info and credentials",
        "operationId": "getOrganizationCloudProviderInfo",
        "parameters": [
          {
            "$ref": "#/components/parameters/organizationId"
          },
          {
            "$ref": "#/components/parameters/clusterId"
          }
        ],
        "tags": [
          "Clusters"
        ],
        "responses": {
          "200": {
            "description": "get cloud provider info and credentials",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ClusterCloudProviderInfoResponse"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          }
        }
      },
      "post": {
        "summary": "Specify cluster cloud provider info and credentials",
        "operationId": "specifyClusterCloudProviderInfo",
        "parameters": [
          {
            "$ref": "#/components/parameters/organizationId"
          },
          {
            "$ref": "#/components/parameters/clusterId"
          }
        ],
        "tags": [
          "Clusters"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ClusterCloudProviderInfoRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Create cluster",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ClusterCloudProviderInfoResponse"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          }
        }
      }
    },
    "/organization/{organizationId}/cluster/{clusterId}/isReady": {
      "get": {
        "summary": "Know if a cluster is ready to be deployed or not",
        "operationId": "getClusterReadinessStatus",
        "parameters": [
          {
            "$ref": "#/components/parameters/organizationId"
          },
          {
            "$ref": "#/components/parameters/clusterId"
          }
        ],
        "tags": [
          "Clusters"
        ],
        "responses": {
          "200": {
            "description": "Get Cluster Readiness Status",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ClusterReadinessStatus"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          }
        }
      }
    },
    "/organization/{organizationId}/cluster/{clusterId}/deploy": {
      "post": {
        "summary": "Deploy a cluster",
        "description": "allows to deploy a cluster",
        "operationId": "deployCluster",
        "parameters": [
          {
            "$ref": "#/components/parameters/organizationId"
          },
          {
            "$ref": "#/components/parameters/clusterId"
          }
        ],
        "tags": [
          "Clusters"
        ],
        "responses": {
          "201": {
            "description": "Deploy cluster",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ClusterStatusResponse"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          }
        }
      }
    },
    "/organization/{organizationId}/cluster/{clusterId}/update": {
      "post": {
        "summary": "Update a cluster Version",
        "description": "allows to update cluster version",
        "operationId": "UpdateCluster",
        "parameters": [
          {
            "$ref": "#/components/parameters/organizationId"
          },
          {
            "$ref": "#/components/parameters/clusterId"
          }
        ],
        "tags": [
          "Clusters"
        ],
        "responses": {
          "201": {
            "description": "Update cluster",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ClusterStatusResponse"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          }
        }
      }
    },
    "/organization/{organizationId}/cluster/{clusterId}/stop": {
      "post": {
        "summary": "Stop cluster",
        "description": "Cluster stop has been requester.",
        "operationId": "StopCluster",
        "parameters": [
          {
            "$ref": "#/components/parameters/organizationId"
          },
          {
            "$ref": "#/components/parameters/clusterId"
          }
        ],
        "tags": [
          "Clusters"
        ],
        "responses": {
          "202": {
            "description": "Update cluster",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ClusterStatusResponse"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "description": "Cluster is already stopped or an operation is in progress"
          }
        }
      }
    },
    "/project/{projectId}": {
      "get": {
        "summary": "Get project by ID",
        "operationId": "getProject",
        "parameters": [
          {
            "$ref": "#/components/parameters/projectId"
          }
        ],
        "tags": [
          "Project Main Calls"
        ],
        "responses": {
          "200": {
            "description": "Get project by ID",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProjectResponse"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          }
        }
      },
      "put": {
        "summary": "Edit a project",
        "description": "To edit a project you must have the admin permission",
        "operationId": "editProject",
        "parameters": [
          {
            "$ref": "#/components/parameters/projectId"
          }
        ],
        "tags": [
          "Project Main Calls"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ProjectRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Edit a project",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProjectResponse"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "description": "Project name within the organization is already taken"
          }
        }
      },
      "delete": {
        "summary": "Delete a project",
        "description": "To delete a project you must have the admin permission",
        "operationId": "deleteProject",
        "parameters": [
          {
            "$ref": "#/components/parameters/projectId"
          }
        ],
        "tags": [
          "Project Main Calls"
        ],
        "responses": {
          "204": {
            "$ref": "#/components/responses/204-deletion"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          }
        }
      }
    },
    "/project/{projectId}/deploymentRule": {
      "get": {
        "summary": "List project deployment rules",
        "operationId": "listProjectDeploymentRule",
        "parameters": [
          {
            "$ref": "#/components/parameters/projectId"
          }
        ],
        "tags": [
          "Project Deployment Rule"
        ],
        "responses": {
          "200": {
            "description": "Get deployment rules",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProjectDeploymentRuleResponseList"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          }
        }
      },
      "post": {
        "summary": "Create a deployment rule",
        "operationId": "createDeploymentRule",
        "parameters": [
          {
            "$ref": "#/components/parameters/projectId"
          }
        ],
        "tags": [
          "Project Deployment Rule"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ProjectDeploymentRuleRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Create deployment rule",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProjectDeploymentRuleResponse"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          }
        }
      }
    },
    "/project/{projectId}/deploymentRule/{deploymentRuleId}": {
      "get": {
        "summary": "Get project deployment rule",
        "operationId": "getProjectDeploymentRule",
        "parameters": [
          {
            "$ref": "#/components/parameters/projectId"
          },
          {
            "$ref": "#/components/parameters/deploymentRuleId"
          }
        ],
        "tags": [
          "Project Deployment Rule"
        ],
        "responses": {
          "200": {
            "description": "Get deployment rule",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProjectDeploymentRuleResponse"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          }
        }
      },
      "put": {
        "summary": "Edit a project deployment rule",
        "operationId": "editProjectDeployemtnRule",
        "parameters": [
          {
            "$ref": "#/components/parameters/projectId"
          },
          {
            "$ref": "#/components/parameters/deploymentRuleId"
          }
        ],
        "tags": [
          "Project Deployment Rule"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ProjectDeploymentRuleRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Edit a project deployment rule",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProjectDeploymentRuleResponse"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "description": "Project name within the organization is already taken"
          }
        }
      },
      "delete": {
        "summary": "Delete a project deployment rule",
        "operationId": "deleteProjectDeploymentRule",
        "parameters": [
          {
            "$ref": "#/components/parameters/projectId"
          },
          {
            "$ref": "#/components/parameters/deploymentRuleId"
          }
        ],
        "tags": [
          "Project Deployment Rule"
        ],
        "responses": {
          "204": {
            "$ref": "#/components/responses/204-deletion"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          }
        }
      }
    },
    "/project/{projectId}/environment": {
      "get": {
        "summary": "List environments",
        "operationId": "listEnvironment",
        "parameters": [
          {
            "$ref": "#/components/parameters/projectId"
          }
        ],
        "tags": [
          "Environments"
        ],
        "responses": {
          "200": {
            "description": "List environments",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EnvironmentResponseList"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          }
        }
      },
      "post": {
        "summary": "Create an environment",
        "operationId": "createEnvironment",
        "parameters": [
          {
            "$ref": "#/components/parameters/projectId"
          }
        ],
        "tags": [
          "Environments"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EnvironmentRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Create environment",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EnvironmentResponse"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "description": "Environment name within the project is already taken"
          }
        }
      }
    },
    "/project/{projectId}/environmentVariable": {
      "get": {
        "summary": "List project environment variables",
        "operationId": "listProjectEnvironmentVariable",
        "parameters": [
          {
            "$ref": "#/components/parameters/projectId"
          }
        ],
        "tags": [
          "Project Environment Variable"
        ],
        "responses": {
          "200": {
            "description": "List project environment variables",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EnvironmentVariableResponseList"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          }
        }
      },
      "post": {
        "summary": "Add an environment variable to the project",
        "description": "- Add an environment variable to the project.\n  - If the environment variable key already exists, then it will be replaced by the new one.\n  - If the environment variable value points toward an existing environment variable key, it will be considered as an alias.\n",
        "operationId": "createProjectEnvironmentVariable",
        "parameters": [
          {
            "$ref": "#/components/parameters/projectId"
          }
        ],
        "tags": [
          "Project Environment Variable"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EnvironmentVariableRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Added an environment variable",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EnvironmentVariableResponse"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          }
        }
      }
    },
    "/project/{projectId}/environmentVariable/{environmentVariableId}": {
      "delete": {
        "summary": "Delete an environment variable from a project",
        "description": "- To delete an environment variable you must have the project user permission\n- You can't delete a BUILT_IN variable\n- If you delete a variable having override or alias, the associated override/alias will be deleted as well\n",
        "operationId": "deleteProjectEnvironmentVariable",
        "parameters": [
          {
            "$ref": "#/components/parameters/projectId"
          },
          {
            "$ref": "#/components/parameters/environmentVariableId"
          }
        ],
        "tags": [
          "Project Environment Variable"
        ],
        "responses": {
          "204": {
            "$ref": "#/components/responses/204-deletion"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          }
        }
      },
      "put": {
        "summary": "Edit an environment variable belonging to the project",
        "description": "- You can't edit a BUILT_IN variable\n- For an override, you can't edit the key\n- For an alias, you can't edit the value\n- An override can only have a scope lower to the variable it is overriding (hierarchy is BUILT_IN > PROJECT > ENVIRONMENT > APPLICATION)\n",
        "operationId": "editProjectEnvironmentVariable",
        "parameters": [
          {
            "$ref": "#/components/parameters/projectId"
          },
          {
            "$ref": "#/components/parameters/environmentVariableId"
          }
        ],
        "tags": [
          "Project Environment Variable"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EnvironmentVariableEditRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Edited the environment variable value",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EnvironmentVariableResponse"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          }
        }
      }
    },
    "/project/{projectId}/environmentVariable/{environmentVariableId}/override": {
      "post": {
        "summary": "Create an environment variable override at the project level",
        "description": "- Allows you to override at project level an environment variable that has a higher scope.\n- You only have to specify a value in the request body\n- The system will create a new environment variable at project level with the same key as the one corresponding to the variable id in the path\n- The response body will contain the newly created variable\n- Information regarding the overridden_variable will be exposed in the \"overridden_variable\" field of the newly created variable\n",
        "operationId": "createProjectEnvironmentVariableOverride",
        "parameters": [
          {
            "$ref": "#/components/parameters/projectId"
          },
          {
            "$ref": "#/components/parameters/environmentVariableId"
          }
        ],
        "tags": [
          "Project Environment Variable"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Value"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Create variable override",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EnvironmentVariableResponse"
                }
              }
            }
          },
          "400": {
            "description": "Can't create an override on a higher scope. Overrides can only be created from one scope to a lower scope. Scope hierarchy is BUILT_IN > PROJECT > ENVIRONMENT > APPLICATION"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          }
        }
      }
    },
    "/project/{projectId}/environmentVariable/{environmentVariableId}/alias": {
      "post": {
        "summary": "Create an environment variable alias at the project level",
        "description": "- Allows you to add an alias at project level on an existing environment variable having higher scope, in order to customize its key.\n- You only have to specify a key in the request body\n- The system will create a new environment variable at project level with the same value as the one corresponding to the variable id in the path\n- The response body will contain the newly created variable\n- Information regarding the aliased_variable will be exposed in the \"aliased_variable\" field of the newly created variable\n- Only 1 alias level is allowed. You can't create an alias on an alias\n",
        "operationId": "createProjectEnvironmentVariableAlias",
        "parameters": [
          {
            "$ref": "#/components/parameters/projectId"
          },
          {
            "$ref": "#/components/parameters/environmentVariableId"
          }
        ],
        "tags": [
          "Project Environment Variable"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Key"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Create variable alias",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EnvironmentVariableResponse"
                }
              }
            }
          },
          "400": {
            "description": "Can't create an alias on a higher scope. Aliases can only be created from one scope to a lower scope. Scope hierarchy is BUILT_IN > PROJECT > ENVIRONMENT > APPLICATION"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          }
        }
      }
    },
    "/project/{projectId}/secret": {
      "get": {
        "summary": "List project secrets",
        "operationId": "listProjectSecrets",
        "parameters": [
          {
            "$ref": "#/components/parameters/projectId"
          }
        ],
        "tags": [
          "Project Secret"
        ],
        "responses": {
          "200": {
            "description": "List project secrets",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SecretResponseList"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          }
        }
      },
      "post": {
        "summary": "Add a secret to the project",
        "description": "- Add a secret to the project.\n  - If the secret key already exists, then it will be replaced by the new one.\n  - If the secret value points toward an existing secret key, it will be considered as an alias.\n",
        "operationId": "createProjectSecret",
        "parameters": [
          {
            "$ref": "#/components/parameters/projectId"
          }
        ],
        "tags": [
          "Project Secret"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SecretRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Added a secret",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SecretResponse"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          }
        }
      }
    },
    "/project/{projectId}/secret/{secretId}": {
      "delete": {
        "summary": "Delete a secret from a project",
        "description": "- To delete a secret you must have the project user permission\n- You can't delete a BUILT_IN secret\n- If you delete a secret having override or alias, the associated override/alias will be deleted as well  operationId: deleteProjectSecret\n",
        "parameters": [
          {
            "$ref": "#/components/parameters/projectId"
          },
          {
            "$ref": "#/components/parameters/secretId"
          }
        ],
        "tags": [
          "Project Secret"
        ],
        "responses": {
          "204": {
            "$ref": "#/components/responses/204-deletion"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          }
        }
      },
      "put": {
        "summary": "Edit a secret belonging to the project",
        "description": "- You can't edit a BUILT_IN secret\n- For an override, you can't edit the key\n- For an alias, you can't edit the value\n- An override can only have a scope lower to the secret it is overriding (hierarchy is BUILT_IN > PROJECT > ENVIRONMENT > APPLICATION)\n",
        "operationId": "editProjectSecret",
        "parameters": [
          {
            "$ref": "#/components/parameters/projectId"
          },
          {
            "$ref": "#/components/parameters/secretId"
          }
        ],
        "tags": [
          "Project Secret"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SecretEditRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Edited the secret value",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SecretResponse"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          }
        }
      }
    },
    "/project/{projectId}/secret/{secretId}/override": {
      "post": {
        "summary": "Create a secret override at the project level",
        "description": "- Allows you to override at project level a secret that has a higher scope.\n- You only have to specify a value in the request body\n- The system will create a new secret at project level with the same key as the one corresponding to the secret id in the path\n- The response body will contain the newly created secret\n- Information regarding the overridden_secret will be exposed in the \"overridden_secret\" field of the newly created secret\n",
        "operationId": "createProjectSecretOverride",
        "parameters": [
          {
            "$ref": "#/components/parameters/projectId"
          },
          {
            "$ref": "#/components/parameters/secretId"
          }
        ],
        "tags": [
          "Project Secret"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Value"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Create secret override",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SecretResponse"
                }
              }
            }
          },
          "400": {
            "description": "Can't create an override on a higher scope. Overrides can only be created from one scope to a lower scope. Scope hierarchy is BUILT_IN > PROJECT > ENVIRONMENT > APPLICATION"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          }
        }
      }
    },
    "/project/{projectId}/secret/{secretId}/alias": {
      "post": {
        "summary": "Create a secret alias at the project level",
        "description": "- Allows you to add an alias at project level on an existing secret having higher scope, in order to customize its key.\n- You only have to specify a key in the request body\n- The system will create a new secret at project level with the same value as the one corresponding to the secret id in the path\n- The response body will contain the newly created secret\n- Information regarding the aliased_secret will be exposed in the \"aliased_secret\" field of the newly created secret\n- Only 1 alias level is allowed. You can't create an alias on an alias\n",
        "operationId": "createProjectSecretAlias",
        "parameters": [
          {
            "$ref": "#/components/parameters/projectId"
          },
          {
            "$ref": "#/components/parameters/secretId"
          }
        ],
        "tags": [
          "Project Secret"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Key"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Create secret alias",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SecretResponse"
                }
              }
            }
          },
          "400": {
            "description": "Can't create an alias on a higher scope. Aliases can only be created from one scope to a lower scope. Scope hierarchy is BUILT_IN > PROJECT > ENVIRONMENT > APPLICATION"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          }
        }
      }
    },
    "/project/{projectId}/environment/status": {
      "get": {
        "summary": "List environments statuses",
        "description": "Returns a list of environments with only their id and status.",
        "operationId": "getProjectEnvironmentStatus",
        "parameters": [
          {
            "$ref": "#/components/parameters/projectId"
          }
        ],
        "tags": [
          "Environments"
        ],
        "responses": {
          "200": {
            "description": "Get status",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Status"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          }
        }
      }
    },
    "/project/{projectId}/environment/stats": {
      "get": {
        "summary": "List total number of services for each environment of the project",
        "description": "Returns a list of environment ids, and for each its total numberof services",
        "operationId": "getProjectEnvironmentServiceNumber",
        "parameters": [
          {
            "$ref": "#/components/parameters/projectId"
          }
        ],
        "tags": [
          "Environments"
        ],
        "responses": {
          "200": {
            "description": "Get number of services",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EnvironmentStatsResponseList"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          }
        }
      }
    },
    "/environment/{environmentId}": {
      "get": {
        "summary": "Get environment by ID",
        "operationId": "getEnvironment",
        "parameters": [
          {
            "$ref": "#/components/parameters/environmentId"
          }
        ],
        "tags": [
          "Environment Main Calls"
        ],
        "responses": {
          "200": {
            "description": "Get environment by ID",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EnvironmentResponse"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          }
        }
      },
      "put": {
        "summary": "Edit an environment",
        "description": "To edit an environment you must have the admin permission",
        "operationId": "editEnvironment",
        "parameters": [
          {
            "$ref": "#/components/parameters/environmentId"
          }
        ],
        "tags": [
          "Environment Main Calls"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EnvironmentEditRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Edit an environment",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EnvironmentResponse"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "description": "Environment name within the project is already taken"
          }
        }
      },
      "delete": {
        "summary": "Delete an environment",
        "description": "To delete an environment you must have the admin permission",
        "operationId": "deleteEnvironment",
        "parameters": [
          {
            "$ref": "#/components/parameters/environmentId"
          }
        ],
        "tags": [
          "Environment Main Calls"
        ],
        "responses": {
          "204": {
            "$ref": "#/components/responses/204-deletion"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          }
        }
      }
    },
    "/environment/{environmentId}/status": {
      "get": {
        "summary": "Get environment status",
        "operationId": "getEnvironmentStatus",
        "parameters": [
          {
            "$ref": "#/components/parameters/environmentId"
          }
        ],
        "tags": [
          "Environment Main Calls"
        ],
        "responses": {
          "200": {
            "description": "Get status",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Status"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          }
        }
      }
    },
    "/environment/{environmentId}/deploymentRule": {
      "get": {
        "summary": "Get environment deployment rule",
        "operationId": "getEnvironmentDeploymentRule",
        "parameters": [
          {
            "$ref": "#/components/parameters/environmentId"
          }
        ],
        "tags": [
          "Environment Deployment Rule"
        ],
        "responses": {
          "200": {
            "description": "Get deployment rule",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EnvironmentDeploymentRuleResponse"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          }
        }
      }
    },
    "/environment/{environmentId}/deploymentRule/{deploymentRuleId}": {
      "put": {
        "summary": "Edit an environment deployment rule",
        "operationId": "editEnvironmentDeploymentRule",
        "parameters": [
          {
            "$ref": "#/components/parameters/environmentId"
          },
          {
            "$ref": "#/components/parameters/deploymentRuleId"
          }
        ],
        "tags": [
          "Environment Deployment Rule"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EnvironmentDeploymentRuleEditRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Edit environment deployment rule",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EnvironmentDeploymentRuleResponse"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          }
        }
      }
    },
    "/environment/{environmentId}/deploy": {
      "post": {
        "summary": "Deploy environment",
        "description": "This will deploy all the services of this environment to their latest version.",
        "operationId": "deployEnvironment",
        "parameters": [
          {
            "$ref": "#/components/parameters/environmentId"
          }
        ],
        "tags": [
          "Environment Actions"
        ],
        "responses": {
          "202": {
            "description": "Deploy environment",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Status"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "description": "Operation is in progress"
          }
        }
      }
    },
    "/environment/{environmentId}/stop": {
      "post": {
        "summary": "Stop environment",
        "operationId": "stopEnvironment",
        "parameters": [
          {
            "$ref": "#/components/parameters/environmentId"
          }
        ],
        "tags": [
          "Environment Actions"
        ],
        "responses": {
          "202": {
            "description": "Environment stop has been requested",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Status"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "description": "Environment is already stopped or an operation is in progress"
          }
        }
      }
    },
    "/environment/{environmentId}/restart": {
      "post": {
        "summary": "Restart environment",
        "operationId": "restartEnvironment",
        "parameters": [
          {
            "$ref": "#/components/parameters/environmentId"
          }
        ],
        "tags": [
          "Environment Actions"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EnvironmentRestartRequest"
              }
            }
          }
        },
        "responses": {
          "202": {
            "description": "Environment restart has been requested",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Status"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "description": "Operation is in progress"
          }
        }
      }
    },
    "/environment/{environmentId}/clone": {
      "post": {
        "summary": "Clone environment",
        "description": "You must provide a name. This will create a new environment, with the same configuration, and same applications and databases. Database data is not cloned.",
        "operationId": "cloneEnvironment",
        "parameters": [
          {
            "$ref": "#/components/parameters/environmentId"
          }
        ],
        "tags": [
          "Environment Actions"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CloneRequest"
              }
            }
          }
        },
        "responses": {
          "202": {
            "description": "Environment clone has been requested",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EnvironmentResponse"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "description": "Operation is in progress"
          }
        }
      }
    },
    "/environment/{environmentId}/application": {
      "get": {
        "summary": "List applications",
        "operationId": "listApplication",
        "parameters": [
          {
            "$ref": "#/components/parameters/environmentId"
          },
          {
            "name": "toUpdate",
            "in": "query",
            "description": "return (or not) results that must be updated",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": null
            }
          }
        ],
        "tags": [
          "Applications"
        ],
        "responses": {
          "200": {
            "description": "List applications",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApplicationResponseList"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          }
        }
      },
      "post": {
        "summary": "Create an application",
        "operationId": "createApplication",
        "parameters": [
          {
            "$ref": "#/components/parameters/environmentId"
          }
        ],
        "tags": [
          "Applications"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ApplicationRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Create application",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApplicationResponse"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "description": "Application name within the environment is already taken"
          }
        }
      }
    },
    "/environment/{environmentId}/application/status": {
      "get": {
        "summary": "List all environment applications statuses",
        "description": "Returns a list of applications with only their id and status.",
        "operationId": "getEnvironmentApplicationStatus",
        "parameters": [
          {
            "$ref": "#/components/parameters/environmentId"
          }
        ],
        "tags": [
          "Applications"
        ],
        "responses": {
          "200": {
            "description": "Get status",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReferenceObjectStatusResponseList"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          }
        }
      }
    },
    "/environment/{environmentId}/application/instance": {
      "get": {
        "summary": "List running instances with CPU and RAM usage for each application",
        "operationId": "getEnvironmentApplicationCurrentInstance",
        "parameters": [
          {
            "$ref": "#/components/parameters/environmentId"
          }
        ],
        "tags": [
          "Applications"
        ],
        "responses": {
          "200": {
            "description": "Know current resource consumption for each application of the environment",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EnvironmentApplicationsInstanceResponseList"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          }
        }
      }
    },
    "/environment/{environmentId}/application/currentStorage": {
      "get": {
        "summary": "List current storage disk usage for each application",
        "operationId": "getEnvironmentApplicationCurrentStorage",
        "parameters": [
          {
            "$ref": "#/components/parameters/environmentId"
          }
        ],
        "tags": [
          "Applications"
        ],
        "responses": {
          "200": {
            "description": "Current storage disk usage",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EnvironmentApplicationsStorageResponseList"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          }
        }
      }
    },
    "/environment/{environmentId}/application/currentScale": {
      "get": {
        "summary": "List current scaling information for each application",
        "description": "Returns min, max, and running number of instances for each application",
        "operationId": "getEnvironmentApplicationCurrentScale",
        "parameters": [
          {
            "$ref": "#/components/parameters/environmentId"
          }
        ],
        "tags": [
          "Applications"
        ],
        "responses": {
          "200": {
            "description": "list applications with current scaling",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EnvironmentApplicationsCurrentScaleResponseList"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          }
        }
      }
    },
    "/environment/{environmentId}/application/supportedLanguage": {
      "get": {
        "summary": "List supported languages",
        "description": "Returns list of languages supported by Buildpacks.",
        "operationId": "getEnvironmentApplicationSupportedLanguages",
        "parameters": [
          {
            "$ref": "#/components/parameters/environmentId"
          }
        ],
        "tags": [
          "Applications"
        ],
        "responses": {
          "200": {
            "description": "Supported languages list.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EnvironmentApplicationsSupportedLanguageList"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          }
        }
      }
    },
    "/environment/{environmentId}/log": {
      "get": {
        "summary": "List environment deployment logs",
        "operationId": "listEnvironmentLog",
        "description": "This returns the last 1000 environment deployment logs.",
        "parameters": [
          {
            "$ref": "#/components/parameters/environmentId"
          }
        ],
        "tags": [
          "Environment Logs"
        ],
        "responses": {
          "200": {
            "description": "List logs",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EnvironmentLogResponseList"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          }
        }
      }
    },
    "/environment/{environmentId}/deploymentHistory": {
      "get": {
        "summary": "List environment deployments",
        "description": "List previous and current environment deployments with the status deployment and the related services. By default it returns the 20 last results. The response is paginated. In order to request the next page, you can use the startId query parameter",
        "operationId": "listEnvironmentDeploymentHistory",
        "parameters": [
          {
            "$ref": "#/components/parameters/environmentId"
          },
          {
            "$ref": "#/components/parameters/startId"
          }
        ],
        "tags": [
          "Environment Deployment History"
        ],
        "responses": {
          "200": {
            "description": "List deployment history",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeploymentHistoryEnvironmentPaginatedResponseList"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          }
        }
      }
    },
    "/environment/{environmentId}/environmentVariable": {
      "get": {
        "summary": "List environment variables",
        "operationId": "listEnvironmentEnvironmentVariable",
        "parameters": [
          {
            "$ref": "#/components/parameters/environmentId"
          }
        ],
        "tags": [
          "Environment Variable"
        ],
        "responses": {
          "200": {
            "description": "List environment variables",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EnvironmentVariableResponseList"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          }
        }
      },
      "post": {
        "summary": "Add an environment variable to the environment",
        "description": "- Add an environment variable to the environment.\n  - If the environment variable key already exists, then it will be replaced by the new one.\n  - If the environment variable value points toward an existing environment variable key, it will be considered as an alias.\n",
        "operationId": "createEnvironmentEnvironmentVariable",
        "parameters": [
          {
            "$ref": "#/components/parameters/environmentId"
          }
        ],
        "tags": [
          "Environment Variable"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EnvironmentVariableRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Added an environment variable",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EnvironmentVariableResponse"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          }
        }
      }
    },
    "/environment/{environmentId}/environmentVariable/{environmentVariableId}": {
      "delete": {
        "summary": "Delete an environment variable from an environment",
        "description": "- To delete an environment variable you must have the project user permission\n- You can't delete a BUILT_IN variable\n- If you delete a variable having override or alias, the associated override/alias will be deleted as well\n",
        "operationId": "deleteEnvironmentEnvironmentVariable",
        "parameters": [
          {
            "$ref": "#/components/parameters/environmentId"
          },
          {
            "$ref": "#/components/parameters/environmentVariableId"
          }
        ],
        "tags": [
          "Environment Variable"
        ],
        "responses": {
          "204": {
            "$ref": "#/components/responses/204-deletion"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          }
        }
      },
      "put": {
        "summary": "Edit an environment variable belonging to the environment",
        "description": "- You can't edit a BUILT_IN variable\n- For an override, you can't edit the key\n- For an alias, you can't edit the value\n- An override can only have a scope lower to the variable it is overriding (hierarchy is BUILT_IN > PROJECT > ENVIRONMENT > APPLICATION)\n",
        "operationId": "editEnvironmentEnvironmentVariable",
        "parameters": [
          {
            "$ref": "#/components/parameters/environmentId"
          },
          {
            "$ref": "#/components/parameters/environmentVariableId"
          }
        ],
        "tags": [
          "Environment Variable"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EnvironmentVariableEditRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Edited the environment variable value",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EnvironmentVariableResponse"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          }
        }
      }
    },
    "/environment/{environmentId}/environmentVariable/{environmentVariableId}/override": {
      "post": {
        "summary": "Create an environment variable override at the environment level",
        "description": "- Allows you to override at environment level an environment variable that has a higher scope.\n- You only have to specify a value in the request body\n- The system will create a new environment variable at environment level with the same key as the one corresponding to the variable id in the path\n- The response body will contain the newly created variable\n- Information regarding the overridden_variable will be exposed in the \"overridden_variable\" field of the newly created variable\n",
        "operationId": "createEnvironmentEnvironmentVariableOverride",
        "parameters": [
          {
            "$ref": "#/components/parameters/environmentId"
          },
          {
            "$ref": "#/components/parameters/environmentVariableId"
          }
        ],
        "tags": [
          "Environment Variable"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Value"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Create variable override",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EnvironmentVariableResponse"
                }
              }
            }
          },
          "400": {
            "description": "Can't create an override on a higher scope. Overrides can only be created from one scope to a lower scope. Scope hierarchy is BUILT_IN > PROJECT > ENVIRONMENT > APPLICATION"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          }
        }
      }
    },
    "/environment/{environmentId}/environmentVariable/{environmentVariableId}/alias": {
      "post": {
        "summary": "Create an environment variable alias at the environment level",
        "description": "- Allows you to add an alias at environment level on an existing environment variable having higher scope, in order to customize its key.\n- You only have to specify a key in the request body\n- The system will create a new environment variable at environment level with the same value as the one corresponding to the variable id in the path\n- The response body will contain the newly created variable\n- Information regarding the aliased_variable will be exposed in the \"aliased_variable\" field of the newly created variable\n- Only 1 alias level is allowed. You can't create an alias on an alias\n",
        "operationId": "createEnvironmentEnvironmentVariableAlias",
        "parameters": [
          {
            "$ref": "#/components/parameters/environmentId"
          },
          {
            "$ref": "#/components/parameters/environmentVariableId"
          }
        ],
        "tags": [
          "Environment Variable"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Key"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Create variable alias",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EnvironmentVariableResponse"
                }
              }
            }
          },
          "400": {
            "description": "Can't create an alias on a higher scope. Aliases can only be created from one scope to a lower scope. Scope hierarchy is BUILT_IN > PROJECT > ENVIRONMENT > APPLICATION"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          }
        }
      }
    },
    "/environment/{environmentId}/secret": {
      "get": {
        "summary": "List environment secrets",
        "operationId": "listEnvironmentSecrets",
        "parameters": [
          {
            "$ref": "#/components/parameters/environmentId"
          }
        ],
        "tags": [
          "Environment Secret"
        ],
        "responses": {
          "200": {
            "description": "List environment secrets",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SecretResponseList"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          }
        }
      },
      "post": {
        "summary": "Add a secret to the environment",
        "description": "- Add a secret to the environment.\n  - If the secret key already exists, then it will be replaced by the new one.\n  - If the secret value points toward an existing secret key, it will be considered as an alias.\n",
        "operationId": "createEnvironmentSecret",
        "parameters": [
          {
            "$ref": "#/components/parameters/environmentId"
          }
        ],
        "tags": [
          "Environment Secret"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SecretRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Added a secret",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SecretResponse"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          }
        }
      }
    },
    "/environment/{environmentId}/secret/{secretId}": {
      "delete": {
        "summary": "Delete a secret from the environment",
        "description": "- To delete a secret you must have the project user permission\n- You can't delete a BUILT_IN secret\n- If you delete a secret having override or alias, the associated override/alias will be deleted as well  operationId: deleteEnvironmentSecret\n",
        "parameters": [
          {
            "$ref": "#/components/parameters/environmentId"
          },
          {
            "$ref": "#/components/parameters/secretId"
          }
        ],
        "tags": [
          "Environment Secret"
        ],
        "responses": {
          "204": {
            "$ref": "#/components/responses/204-deletion"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          }
        }
      },
      "put": {
        "summary": "Edit a secret belonging to the environment",
        "description": "- You can't edit a BUILT_IN secret\n- For an override, you can't edit the key\n- For an alias, you can't edit the value\n- An override can only have a scope lower to the secret it is overriding (hierarchy is BUILT_IN > PROJECT > ENVIRONMENT > APPLICATION)\n",
        "operationId": "editEnvironmentSecret",
        "parameters": [
          {
            "$ref": "#/components/parameters/environmentId"
          },
          {
            "$ref": "#/components/parameters/secretId"
          }
        ],
        "tags": [
          "Environment Secret"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SecretEditRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Edited the secret value",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SecretResponse"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          }
        }
      }
    },
    "/environment/{environmentId}/secret/{secretId}/override": {
      "post": {
        "summary": "Create a secret override at the environment level",
        "description": "- Allows you to override at environment level a secret that has a higher scope.\n- You only have to specify a value in the request body\n- The system will create a new secret at environment level with the same key as the one corresponding to the secret id in the path\n- The response body will contain the newly created secret\n- Information regarding the overridden_secret will be exposed in the \"overridden_secret\" field of the newly created secret\n",
        "operationId": "createEnvironmentSecretOverride",
        "parameters": [
          {
            "$ref": "#/components/parameters/environmentId"
          },
          {
            "$ref": "#/components/parameters/secretId"
          }
        ],
        "tags": [
          "Environment Secret"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Value"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Create secret override",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SecretResponse"
                }
              }
            }
          },
          "400": {
            "description": "Can't create an override on a higher scope. Overrides can only be created from one scope to a lower scope. Scope hierarchy is BUILT_IN > PROJECT > ENVIRONMENT > APPLICATION"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          }
        }
      }
    },
    "/environment/{environmentId}/secret/{secretId}/alias": {
      "post": {
        "summary": "Create a secret alias at the environment level",
        "description": "- Allows you to add an alias at environment level on an existing secret having higher scope, in order to customize its key.\n- You only have to specify a key in the request body\n- The system will create a new secret at environment level with the same value as the one corresponding to the secret id in the path\n- The response body will contain the newly created secret\n- Information regarding the aliased_secret will be exposed in the \"aliased_secret\" field of the newly created secret\n- Only 1 alias level is allowed. You can't create an alias on an alias\n",
        "operationId": "createEnvironmentSecretAlias",
        "parameters": [
          {
            "$ref": "#/components/parameters/environmentId"
          },
          {
            "$ref": "#/components/parameters/secretId"
          }
        ],
        "tags": [
          "Environment Secret"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Key"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Create secret alias",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SecretResponse"
                }
              }
            }
          },
          "400": {
            "description": "Can't create an alias on a higher scope. Aliases can only be created from one scope to a lower scope. Scope hierarchy is BUILT_IN > PROJECT > ENVIRONMENT > APPLICATION"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          }
        }
      }
    },
    "/environment/{environmentId}/link": {
      "get": {
        "summary": "List all URLs of the environment",
        "description": "This will return all the custom domains and Qovery autogenerated domain for all the applications within this environment",
        "operationId": "listEnvironmentLinks",
        "parameters": [
          {
            "$ref": "#/components/parameters/environmentId"
          }
        ],
        "tags": [
          "Environment Main Calls"
        ],
        "responses": {
          "200": {
            "description": "List links",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LinkResponseList"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          }
        }
      }
    },
    "/environment/{environmentId}/databaseConfiguration": {
      "get": {
        "summary": "List eligible database types, versions and modes for the environment",
        "operationId": "listEnvironmentDatabaseConfig",
        "parameters": [
          {
            "$ref": "#/components/parameters/environmentId"
          }
        ],
        "tags": [
          "Databases"
        ],
        "responses": {
          "200": {
            "description": "List eligible database",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DatabaseConfigurationResponseList"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          }
        }
      }
    },
    "/application/{applicationId}": {
      "get": {
        "summary": "Get application by ID",
        "operationId": "getApplication",
        "parameters": [
          {
            "$ref": "#/components/parameters/applicationId"
          }
        ],
        "tags": [
          "Application Main Calls"
        ],
        "responses": {
          "200": {
            "description": "Get application by ID",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApplicationResponse"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          }
        }
      },
      "put": {
        "summary": "Edit application",
        "description": "- To edit the application you must have the admin permission.\n- For port edition, if you provide a port id, we will update the corresponding port. If you don't we will create a new one. If you remove a port from the payload, we will delete it.\n- For storage edition, if you provide a storage id, we will update the corresponding storage. If you don't we will create a new one. If you remove a storage from the payload, we will delete it.\n",
        "operationId": "editApplication",
        "parameters": [
          {
            "$ref": "#/components/parameters/applicationId"
          }
        ],
        "tags": [
          "Application Main Calls"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ApplicationEditRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Edit application",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApplicationResponse"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "description": "Application name within the environment is already taken"
          }
        }
      },
      "delete": {
        "summary": "Delete application",
        "description": "To delete the application you must have the admin permission",
        "operationId": "deleteApplication",
        "parameters": [
          {
            "$ref": "#/components/parameters/applicationId"
          }
        ],
        "tags": [
          "Application Main Calls"
        ],
        "responses": {
          "204": {
            "$ref": "#/components/responses/204-deletion"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          }
        }
      }
    },
    "/application/{applicationId}/status": {
      "get": {
        "summary": "Get application status",
        "operationId": "getApplicationStatus",
        "parameters": [
          {
            "$ref": "#/components/parameters/applicationId"
          }
        ],
        "tags": [
          "Application Main Calls"
        ],
        "responses": {
          "200": {
            "description": "Get status",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Status"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          }
        }
      }
    },
    "/application/{applicationId}/contributor": {
      "get": {
        "summary": "List contributors",
        "operationId": "listApplicationContributor",
        "parameters": [
          {
            "$ref": "#/components/parameters/applicationId"
          }
        ],
        "tags": [
          "Application Main Calls"
        ],
        "responses": {
          "200": {
            "description": "List application contributors",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserResponseList"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          }
        }
      }
    },
    "/application/{applicationId}/tag": {
      "get": {
        "summary": "List tags",
        "operationId": "listApplicationTag",
        "parameters": [
          {
            "$ref": "#/components/parameters/applicationId"
          }
        ],
        "tags": [
          "Application Main Calls"
        ],
        "responses": {
          "200": {
            "description": "List application tags",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TagResponseList"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          }
        }
      },
      "post": {
        "summary": "Add application tag",
        "operationId": "createApplicationTag",
        "parameters": [
          {
            "$ref": "#/components/parameters/applicationId"
          }
        ],
        "tags": [
          "Application Main Calls"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TagRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Create application",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TagResponseList"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          }
        }
      }
    },
    "/application/{applicationId}/tag/{tagId}": {
      "delete": {
        "summary": "Delete application tag",
        "operationId": "deleteApplicationTag",
        "parameters": [
          {
            "$ref": "#/components/parameters/applicationId"
          },
          {
            "$ref": "#/components/parameters/tagId"
          }
        ],
        "tags": [
          "Application Main Calls"
        ],
        "responses": {
          "204": {
            "$ref": "#/components/responses/204-deletion"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          }
        }
      }
    },
    "/application/{applicationId}/instance": {
      "get": {
        "summary": "List currently running instances of the application with their CPU and RAM metrics",
        "operationId": "getApplicationCurrentInstance",
        "parameters": [
          {
            "$ref": "#/components/parameters/applicationId"
          }
        ],
        "tags": [
          "Application Metrics"
        ],
        "responses": {
          "200": {
            "description": "Know current resource consumption of the application for each running instance",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InstanceResponseList"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          }
        }
      }
    },
    "/application/{applicationId}/currentStorage": {
      "get": {
        "summary": "List current storage disk usage",
        "operationId": "getApplicationCurrentStorageDisk",
        "parameters": [
          {
            "$ref": "#/components/parameters/applicationId"
          }
        ],
        "tags": [
          "Application Metrics"
        ],
        "responses": {
          "200": {
            "description": "Know current storage disk",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StorageDiskResponseList"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          }
        }
      }
    },
    "/application/{applicationId}/currentScale": {
      "get": {
        "summary": "Get current scaling of the application",
        "description": "Returns min, max, and running number of instances of the application",
        "operationId": "getApplicationCurrentScale",
        "parameters": [
          {
            "$ref": "#/components/parameters/applicationId"
          }
        ],
        "tags": [
          "Application Metrics"
        ],
        "responses": {
          "200": {
            "description": "Get current scaling of the application",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApplicationCurrentScaleResponse"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          }
        }
      }
    },
    "/application/{applicationId}/metric/cpu": {
      "get": {
        "summary": "Get CPU consumption metric over time for the application",
        "operationId": "getApplicationMetricCpu",
        "parameters": [
          {
            "$ref": "#/components/parameters/applicationId"
          },
          {
            "$ref": "#/components/parameters/lastSeconds"
          }
        ],
        "tags": [
          "Application Metrics"
        ],
        "responses": {
          "200": {
            "description": "CPU consumption",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MetricCPUResponseList"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          }
        }
      }
    },
    "/application/{applicationId}/metric/memory": {
      "get": {
        "summary": "Get Memory consumption metric over time for the application",
        "operationId": "getApplicationMetricMemory",
        "parameters": [
          {
            "$ref": "#/components/parameters/applicationId"
          },
          {
            "$ref": "#/components/parameters/lastSeconds"
          }
        ],
        "tags": [
          "Application Metrics"
        ],
        "responses": {
          "200": {
            "description": "Memory consumption",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MetricMemoryResponseList"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          }
        }
      }
    },
    "/application/{applicationId}/metric/healthCheck": {
      "get": {
        "summary": "Get Health Check latency  metric over time for the application",
        "description": "The value returned corresponds to the 95th centile",
        "operationId": "getApplicationMetricHealthCheck",
        "parameters": [
          {
            "$ref": "#/components/parameters/applicationId"
          },
          {
            "$ref": "#/components/parameters/lastSeconds"
          }
        ],
        "tags": [
          "Application Metrics"
        ],
        "responses": {
          "200": {
            "description": "Health Check Latency",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MetricGenericResponseList"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          }
        }
      }
    },
    "/application/{applicationId}/metric/storage": {
      "get": {
        "summary": "Get Storage consumption metric over time for the application",
        "operationId": "getApplicationMetricStorage",
        "parameters": [
          {
            "$ref": "#/components/parameters/applicationId"
          },
          {
            "$ref": "#/components/parameters/lastSeconds"
          }
        ],
        "tags": [
          "Application Metrics"
        ],
        "responses": {
          "200": {
            "description": "Storage consumption",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MetricStorageResponseList"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          }
        }
      }
    },
    "/application/{applicationId}/metric/restart": {
      "get": {
        "summary": "List application restarts",
        "description": "Get application restart message and timestamp.",
        "operationId": "getApplicationMetricRestart",
        "parameters": [
          {
            "$ref": "#/components/parameters/applicationId"
          },
          {
            "$ref": "#/components/parameters/lastSeconds"
          }
        ],
        "tags": [
          "Application Metrics"
        ],
        "responses": {
          "200": {
            "description": "Restarts",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MetricRestartResponse"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          }
        }
      }
    },
    "/application/{applicationId}/dependency": {
      "get": {
        "summary": "List application dependencies",
        "operationId": "listApplicationDependency",
        "parameters": [
          {
            "$ref": "#/components/parameters/applicationId"
          }
        ],
        "tags": [
          "Dependency"
        ],
        "responses": {
          "200": {
            "description": "List dependencies",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApplicationResponseList"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          }
        }
      }
    },
    "/application/{applicationId}/dependency/{targetApplicationId}": {
      "post": {
        "summary": "Add application dependency to this application.",
        "description": "Add application dependency to this application to prevent this application starting before the linked dependencies",
        "operationId": "createApplicationDependency",
        "parameters": [
          {
            "$ref": "#/components/parameters/applicationId"
          },
          {
            "$ref": "#/components/parameters/targetApplicationId"
          }
        ],
        "tags": [
          "Dependency"
        ],
        "responses": {
          "200": {
            "description": "Add application dependencies",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApplicationResponse"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          }
        }
      },
      "delete": {
        "summary": "Remove application dependency to this application.",
        "operationId": "removeApplicationDependency",
        "parameters": [
          {
            "$ref": "#/components/parameters/applicationId"
          },
          {
            "$ref": "#/components/parameters/targetApplicationId"
          }
        ],
        "tags": [
          "Dependency"
        ],
        "responses": {
          "204": {
            "$ref": "#/components/responses/204-deletion"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          }
        }
      }
    },
    "/application/{applicationId}/commit": {
      "get": {
        "summary": "List last commits",
        "description": "Returns list of the last 100 commits made on the repository linked to the application",
        "operationId": "listApplicationCommit",
        "parameters": [
          {
            "$ref": "#/components/parameters/applicationId"
          },
          {
            "$ref": "#/components/parameters/startId"
          },
          {
            "$ref": "#/components/parameters/gitCommitId"
          }
        ],
        "tags": [
          "Application Main Calls"
        ],
        "responses": {
          "200": {
            "description": "List commits",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CommitResponseList"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          }
        }
      }
    },
    "/application/{applicationId}/deploy": {
      "post": {
        "summary": "Deploy application",
        "description": "You must provide a git commit id",
        "operationId": "deployApplication",
        "parameters": [
          {
            "$ref": "#/components/parameters/applicationId"
          }
        ],
        "tags": [
          "Application Actions"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DeployRequest"
              }
            }
          }
        },
        "responses": {
          "202": {
            "description": "Deploy application",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Status"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "description": "Operation is in progress"
          }
        }
      }
    },
    "/application/{applicationId}/stop": {
      "post": {
        "summary": "Stop application",
        "operationId": "stopApplication",
        "parameters": [
          {
            "$ref": "#/components/parameters/applicationId"
          }
        ],
        "tags": [
          "Application Actions"
        ],
        "responses": {
          "202": {
            "description": "Application stop has been requested",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Status"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "description": "Application is already stopped or an operation is in progress"
          }
        }
      }
    },
    "/application/{applicationId}/restart": {
      "post": {
        "summary": "Restart application",
        "operationId": "restartApplication",
        "parameters": [
          {
            "$ref": "#/components/parameters/applicationId"
          }
        ],
        "tags": [
          "Application Actions"
        ],
        "responses": {
          "202": {
            "description": "Application restart has been requested",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Status"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "description": "Operation is in progress"
          }
        }
      }
    },
    "/application/{applicationId}/deploymentHistory": {
      "get": {
        "summary": "List application deploys",
        "description": "By default it returns the 20 last results. The response is paginated. In order to request the next page, you can use the startId query parameter. You can also filter by status (FAILED or SUCCESS), and git_commit_id",
        "operationId": "listApplicationDeploymentHistory",
        "parameters": [
          {
            "$ref": "#/components/parameters/applicationId"
          },
          {
            "$ref": "#/components/parameters/startId"
          }
        ],
        "tags": [
          "Application Deployment History"
        ],
        "responses": {
          "200": {
            "description": "List deployment history",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeploymentHistoryPaginatedResponseList"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          }
        }
      }
    },
    "/application/{applicationId}/event": {
      "get": {
        "summary": "List application events",
        "description": "By default it returns the 20 last results. The response is paginated. In order to request the next page, you can use the startId query parameter",
        "operationId": "listApplicationEvent",
        "parameters": [
          {
            "$ref": "#/components/parameters/applicationId"
          },
          {
            "$ref": "#/components/parameters/startId"
          }
        ],
        "tags": [
          "Application Event"
        ],
        "responses": {
          "200": {
            "description": "List events",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EventPaginatedResponseList"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          }
        }
      }
    },
    "/application/{applicationId}/environmentVariable": {
      "get": {
        "summary": "List environment variables",
        "operationId": "listApplicationEnvironmentVariable",
        "parameters": [
          {
            "$ref": "#/components/parameters/applicationId"
          }
        ],
        "tags": [
          "Application Environment Variable"
        ],
        "responses": {
          "200": {
            "description": "List environment variables",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EnvironmentVariableResponseList"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          }
        }
      },
      "post": {
        "summary": "Add an environment variable to the application",
        "description": "- Add an environment variable to the application.\n",
        "operationId": "createApplicationEnvironmentVariable",
        "parameters": [
          {
            "$ref": "#/components/parameters/applicationId"
          }
        ],
        "tags": [
          "Application Environment Variable"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EnvironmentVariableRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Added an environment variable",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EnvironmentVariableResponse"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          }
        }
      }
    },
    "/application/{applicationId}/environmentVariable/{environmentVariableId}": {
      "delete": {
        "summary": "Delete an environment variable from an application",
        "description": "- To delete an environment variable from an application you must have the project user permission\n- You can't delete a BUILT_IN variable\n- If you delete a variable having override or alias, the associated override/alias will be deleted as well\n",
        "operationId": "deleteApplicationEnvironmentVariable",
        "parameters": [
          {
            "$ref": "#/components/parameters/applicationId"
          },
          {
            "$ref": "#/components/parameters/environmentVariableId"
          }
        ],
        "tags": [
          "Application Environment Variable"
        ],
        "responses": {
          "204": {
            "$ref": "#/components/responses/204-deletion"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          }
        }
      },
      "put": {
        "summary": "Edit an environment variable belonging to the application",
        "description": "- You can't edit a BUILT_IN variable\n- For an override, you can't edit the key\n- For an alias, you can't edit the value\n- An override can only have a scope lower to the variable it is overriding (hierarchy is BUILT_IN > PROJECT > ENVIRONMENT > APPLICATION)\n",
        "operationId": "editApplicationEnvironmentVariable",
        "parameters": [
          {
            "$ref": "#/components/parameters/applicationId"
          },
          {
            "$ref": "#/components/parameters/environmentVariableId"
          }
        ],
        "tags": [
          "Application Environment Variable"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EnvironmentVariableEditRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Edited the environment variable value",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EnvironmentVariableResponse"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          }
        }
      }
    },
    "/application/{applicationId}/environmentVariable/{environmentVariableId}/override": {
      "post": {
        "summary": "Create an environment variable override at the application level",
        "description": "- Allows you to override at application level an environment variable that has a higher scope.\n- You only have to specify a value in the request body\n- The system will create a new environment variable at application level with the same key as the one corresponding to the variable id in the path\n- The response body will contain the newly created variable\n- Information regarding the overridden_variable will be exposed in the \"overridden_variable\" field of the newly created variable\n",
        "operationId": "createApplicationEnvironmentVariableOverride",
        "parameters": [
          {
            "$ref": "#/components/parameters/applicationId"
          },
          {
            "$ref": "#/components/parameters/environmentVariableId"
          }
        ],
        "tags": [
          "Application Environment Variable"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Value"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Create variable override",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EnvironmentVariableResponse"
                }
              }
            }
          },
          "400": {
            "description": "Can't create an override on a higher scope. Overrides can only be created from one scope to a lower scope. Scope hierarchy is BUILT_IN > PROJECT > ENVIRONMENT > APPLICATION"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          }
        }
      }
    },
    "/application/{applicationId}/environmentVariable/{environmentVariableId}/alias": {
      "post": {
        "summary": "Create an environment variable alias at the application level",
        "description": "- Allows you to add an alias at application level on an existing environment variable having higher scope, in order to customize its key.\n- You only have to specify a key in the request body\n- The system will create a new environment variable at application level with the same value as the one corresponding to the variable id in the path\n- The response body will contain the newly created variable\n- Information regarding the aliased_variable will be exposed in the \"aliased_variable\" field of the newly created variable\n- Only 1 alias level is allowed. You can't create an alias on an alias\n",
        "operationId": "createApplicationEnvironmentVariableAlias",
        "parameters": [
          {
            "$ref": "#/components/parameters/applicationId"
          },
          {
            "$ref": "#/components/parameters/environmentVariableId"
          }
        ],
        "tags": [
          "Application Environment Variable"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Key"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Create variable alias",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EnvironmentVariableResponse"
                }
              }
            }
          },
          "400": {
            "description": "Can't create an alias on a higher scope. Aliases can only be created from one scope to a lower scope. Scope hierarchy is BUILT_IN > PROJECT > ENVIRONMENT > APPLICATION"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          }
        }
      }
    },
    "/application/{applicationId}/secret": {
      "get": {
        "summary": "List application secrets",
        "description": "Secrets are like environment variables, but they are secured and can't be revealed.",
        "operationId": "listApplicationSecrets",
        "parameters": [
          {
            "$ref": "#/components/parameters/applicationId"
          }
        ],
        "tags": [
          "Application Secret"
        ],
        "responses": {
          "200": {
            "description": "List secrets",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SecretResponseList"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          }
        }
      },
      "post": {
        "summary": "Add a secret to the application",
        "description": "- Add a secret to the application.\n",
        "operationId": "createApplicationSecret",
        "parameters": [
          {
            "$ref": "#/components/parameters/applicationId"
          }
        ],
        "tags": [
          "Application Secret"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SecretRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Add a secret",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SecretResponse"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          }
        }
      }
    },
    "/application/{applicationId}/secret/{secretId}": {
      "delete": {
        "summary": "Delete a secret from an application",
        "description": "- To delete a secret you must have the project user permission\n- You can't delete a BUILT_IN secret\n- If you delete a secret having override or alias, the associated override/alias will be deleted as well\n",
        "operationId": "deleteApplicationSecret",
        "parameters": [
          {
            "$ref": "#/components/parameters/applicationId"
          },
          {
            "$ref": "#/components/parameters/secretId"
          }
        ],
        "tags": [
          "Application Secret"
        ],
        "responses": {
          "204": {
            "$ref": "#/components/responses/204-deletion"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          }
        }
      },
      "put": {
        "summary": "Edit a secret belonging to the application",
        "description": "- You can't edit a BUILT_IN secret\n- For an override, you can't edit the key\n- For an alias, you can't edit the value\n- An override can only have a scope lower to the secret it is overriding (hierarchy is BUILT_IN > PROJECT > ENVIRONMENT > APPLICATION)\n",
        "operationId": "editApplicationSecret",
        "parameters": [
          {
            "$ref": "#/components/parameters/applicationId"
          },
          {
            "$ref": "#/components/parameters/secretId"
          }
        ],
        "tags": [
          "Application Secret"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SecretEditRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Edited the secret value",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SecretResponse"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          }
        }
      }
    },
    "/application/{applicationId}/secret/{secretId}/override": {
      "post": {
        "summary": "Create a secret override at the application level",
        "description": "- Allows you to override at application level a secret that has a higher scope.\n- You only have to specify a value in the request body\n- The system will create a new secret at application level with the same key as the one corresponding to the secret id in the path\n- The response body will contain the newly created secret\n- Information regarding the overridden_secret will be exposed in the \"overridden_secret\" field of the newly created secret\n",
        "operationId": "createApplicationSecretOverride",
        "parameters": [
          {
            "$ref": "#/components/parameters/applicationId"
          },
          {
            "$ref": "#/components/parameters/secretId"
          }
        ],
        "tags": [
          "Application Secret"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Value"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Create secret override",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SecretResponse"
                }
              }
            }
          },
          "400": {
            "description": "Can't create an override on a higher scope. Overrides can only be created from one scope to a lower scope. Scope hierarchy is BUILT_IN > PROJECT > ENVIRONMENT > APPLICATION"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          }
        }
      }
    },
    "/application/{applicationId}/secret/{secretId}/alias": {
      "post": {
        "summary": "Create a secret alias at the application level",
        "description": "- Allows you to add an alias at application level on an existing secret having higher scope, in order to customize its key.\n- You only have to specify a key in the request body\n- The system will create a new secret at application level with the same value as the one corresponding to the secret id in the path\n- The response body will contain the newly created secret\n- Information regarding the aliased_secret will be exposed in the \"aliased_secret\" field of the newly created secret\n- Only 1 alias level is allowed. You can't create an alias on an alias\n",
        "operationId": "createApplicationSecretAlias",
        "parameters": [
          {
            "$ref": "#/components/parameters/applicationId"
          },
          {
            "$ref": "#/components/parameters/secretId"
          }
        ],
        "tags": [
          "Application Secret"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Key"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Create secret alias",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SecretResponse"
                }
              }
            }
          },
          "400": {
            "description": "Can't create an alias on a higher scope. Aliases can only be created from one scope to a lower scope. Scope hierarchy is BUILT_IN > PROJECT > ENVIRONMENT > APPLICATION"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          }
        }
      }
    },
    "/application/{applicationId}/customDomain": {
      "get": {
        "summary": "List application custom domains",
        "operationId": "listApplicationCustomDomain",
        "parameters": [
          {
            "$ref": "#/components/parameters/applicationId"
          }
        ],
        "tags": [
          "Custom Domain"
        ],
        "responses": {
          "200": {
            "description": "List custom domains",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomDomainResponseList"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          }
        }
      },
      "post": {
        "summary": "Add custom domain to the application.",
        "description": "Add a custom domain to this application in order not to use qovery autogenerated domain",
        "operationId": "createApplicationCustomDomain",
        "parameters": [
          {
            "$ref": "#/components/parameters/applicationId"
          }
        ],
        "tags": [
          "Custom Domain"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CustomDomainRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Added application custom domain",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomDomainResponse"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          }
        }
      }
    },
    "/application/{applicationId}/customDomain/{customDomainId}": {
      "put": {
        "summary": "Edit a Custom Domain",
        "description": "To edit a Custom Domain  you must have the project user permission",
        "operationId": "editCustomDomain",
        "parameters": [
          {
            "$ref": "#/components/parameters/applicationId"
          },
          {
            "$ref": "#/components/parameters/customDomainId"
          }
        ],
        "tags": [
          "Custom Domain"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CustomDomainRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Edit a CustomDomain",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomDomainResponse"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          }
        }
      },
      "delete": {
        "summary": "Delete a Custom Domain",
        "description": "To delete an CustomDomain you must have the project user permission",
        "operationId": "deleteCustomDomain",
        "parameters": [
          {
            "$ref": "#/components/parameters/applicationId"
          },
          {
            "$ref": "#/components/parameters/customDomainId"
          }
        ],
        "tags": [
          "Custom Domain"
        ],
        "responses": {
          "204": {
            "$ref": "#/components/responses/204-deletion"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          }
        }
      }
    },
    "/application/{applicationId}/customDomain/{customDomainId}/status": {
      "get": {
        "summary": "Get Custom Domain status",
        "operationId": "getCustomDomainStatus",
        "parameters": [
          {
            "$ref": "#/components/parameters/applicationId"
          },
          {
            "$ref": "#/components/parameters/customDomainId"
          }
        ],
        "tags": [
          "Custom Domain"
        ],
        "responses": {
          "200": {
            "description": "Get status",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomDomainResponse"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          }
        }
      }
    },
    "/application/{applicationId}/log": {
      "get": {
        "summary": "List logs",
        "operationId": "listApplicationLog",
        "description": "This will list the last 1000 logs of the application",
        "parameters": [
          {
            "$ref": "#/components/parameters/applicationId"
          }
        ],
        "tags": [
          "Application Logs"
        ],
        "responses": {
          "200": {
            "description": "List logs",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LogResponseList"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          }
        }
      }
    },
    "/application/{applicationId}/network": {
      "get": {
        "summary": "Get Application Network information",
        "description": "Get status of the application network settings.",
        "operationId": "getApplicationNetwork",
        "parameters": [
          {
            "$ref": "#/components/parameters/applicationId"
          }
        ],
        "tags": [
          "Application Configuration"
        ],
        "responses": {
          "200": {
            "description": "Network information",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApplicationNetworkResponse"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          }
        }
      },
      "put": {
        "summary": "Edit Application Network",
        "description": "Edit the Network settings of the application.",
        "operationId": "editApplicationNetwork",
        "parameters": [
          {
            "$ref": "#/components/parameters/applicationId"
          }
        ],
        "tags": [
          "Application Configuration"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ApplicationNetworkRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Updated application network setting",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApplicationNetworkResponse"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          }
        }
      }
    },
    "/application/{applicationId}/database": {
      "get": {
        "summary": "List linked databases",
        "operationId": "listApplicationDatabase",
        "parameters": [
          {
            "$ref": "#/components/parameters/applicationId"
          }
        ],
        "tags": [
          "Application Database"
        ],
        "responses": {
          "200": {
            "description": "List linked databases",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DatabaseResponseList"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          }
        }
      }
    },
    "/application/{applicationId}/database/{targetDatabaseId}": {
      "post": {
        "summary": "Link a database to the application",
        "operationId": "attachDatabasetoApplication",
        "parameters": [
          {
            "$ref": "#/components/parameters/applicationId"
          },
          {
            "$ref": "#/components/parameters/targetDatabaseId"
          }
        ],
        "tags": [
          "Application Database"
        ],
        "responses": {
          "201": {
            "description": "Linked the database to the application",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DatabaseResponse"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "description": "This database is already linked to the application"
          }
        }
      },
      "delete": {
        "summary": "Remove database link to this application.",
        "operationId": "removeDatabaseFromApplication",
        "parameters": [
          {
            "$ref": "#/components/parameters/applicationId"
          },
          {
            "$ref": "#/components/parameters/targetDatabaseId"
          }
        ],
        "tags": [
          "Application Database"
        ],
        "responses": {
          "204": {
            "$ref": "#/components/responses/204"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          }
        }
      }
    },
    "/application/{applicationId}/logicalDatabase": {
      "get": {
        "summary": "List linked logical databases",
        "operationId": "listApplicationLogicalDatabase",
        "parameters": [
          {
            "$ref": "#/components/parameters/applicationId"
          }
        ],
        "tags": [
          "Application Database"
        ],
        "responses": {
          "200": {
            "description": "List linked databases",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LogicalDatabaseResponseList"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          }
        }
      }
    },
    "/application/{applicationId}/logicalDatabase/{targetLogicalDatabaseId}": {
      "post": {
        "summary": "Link a logical database to the application",
        "operationId": "attachLogicalDatabasetoApplication",
        "parameters": [
          {
            "$ref": "#/components/parameters/applicationId"
          },
          {
            "$ref": "#/components/parameters/targetLogicalDatabaseId"
          }
        ],
        "tags": [
          "Application Database"
        ],
        "responses": {
          "201": {
            "description": "Linked the Logical database to the application",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LogicalDatabaseResponse"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "description": "This logical database is already linked to the application"
          }
        }
      },
      "delete": {
        "summary": "Remove logical database link to this application.",
        "operationId": "removeLogicalDatabaseFromApplication",
        "parameters": [
          {
            "$ref": "#/components/parameters/applicationId"
          },
          {
            "$ref": "#/components/parameters/targetLogicalDatabaseId"
          }
        ],
        "tags": [
          "Application Database"
        ],
        "responses": {
          "204": {
            "$ref": "#/components/responses/204"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          }
        }
      }
    },
    "/application/{applicationId}/link": {
      "get": {
        "summary": "List all URLs of the application",
        "description": "This will return all the custom domains and Qovery autogenerated domain for the given application",
        "operationId": "listApplicationLinks",
        "parameters": [
          {
            "$ref": "#/components/parameters/applicationId"
          }
        ],
        "tags": [
          "Application Main Calls"
        ],
        "responses": {
          "200": {
            "description": "List links",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LinkResponseList"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          }
        }
      }
    },
    "/environment/{environmentId}/database": {
      "get": {
        "summary": "List environment databases",
        "operationId": "listDatabase",
        "parameters": [
          {
            "$ref": "#/components/parameters/environmentId"
          }
        ],
        "tags": [
          "Databases"
        ],
        "responses": {
          "200": {
            "description": "List databases",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DatabaseResponseList"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          }
        }
      },
      "post": {
        "summary": "Create a database",
        "operationId": "createDatabase",
        "parameters": [
          {
            "$ref": "#/components/parameters/environmentId"
          }
        ],
        "tags": [
          "Databases"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DatabaseRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Create database ",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DatabaseResponse"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "description": "Database name within the environment is already taken"
          }
        }
      }
    },
    "/environment/{environmentId}/database/status": {
      "get": {
        "summary": "List all environment databases statuses",
        "description": "Returns a list of databases with only their id and status.",
        "operationId": "getEnvironmentDatabaseStatus",
        "parameters": [
          {
            "$ref": "#/components/parameters/environmentId"
          }
        ],
        "tags": [
          "Databases"
        ],
        "responses": {
          "200": {
            "description": "Get status",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReferenceObjectStatusResponseList"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          }
        }
      }
    },
    "/environment/{environmentId}/database/currentMetric": {
      "get": {
        "summary": "List current metric consumption for each database",
        "operationId": "listEnvironmentDatabaseCurrentMetric",
        "parameters": [
          {
            "$ref": "#/components/parameters/environmentId"
          }
        ],
        "tags": [
          "Databases"
        ],
        "responses": {
          "200": {
            "description": "List current metric for each database",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EnvironmentDatabasesCurrentMetricResponseList"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          }
        }
      }
    },
    "/database/{databaseId}": {
      "get": {
        "summary": "Get database by ID",
        "operationId": "getDatabase",
        "parameters": [
          {
            "$ref": "#/components/parameters/databaseId"
          }
        ],
        "tags": [
          "Database Main Calls"
        ],
        "responses": {
          "200": {
            "description": "Get database  by ID",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DatabaseResponse"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          }
        }
      },
      "put": {
        "summary": "Edit a database ",
        "description": "To edit a database  you must have the admin permission",
        "operationId": "editDatabase",
        "parameters": [
          {
            "$ref": "#/components/parameters/databaseId"
          }
        ],
        "tags": [
          "Database Main Calls"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DatabaseEditRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Edit a database ",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DatabaseResponse"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "description": "Database  name within the environment is already taken"
          }
        }
      },
      "delete": {
        "summary": "Delete a database ",
        "description": "To delete a database you must have the admin permission",
        "operationId": "deleteDatabase",
        "parameters": [
          {
            "$ref": "#/components/parameters/databaseId"
          }
        ],
        "tags": [
          "Database Main Calls"
        ],
        "responses": {
          "204": {
            "$ref": "#/components/responses/204-deletion"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          }
        }
      }
    },
    "/database/{databaseId}/status": {
      "get": {
        "summary": "Get database status",
        "operationId": "getDatabaseStatus",
        "parameters": [
          {
            "$ref": "#/components/parameters/databaseId"
          }
        ],
        "tags": [
          "Database Main Calls"
        ],
        "responses": {
          "200": {
            "description": "Get status",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Status"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          }
        }
      }
    },
    "/database/{databaseId}/version": {
      "get": {
        "summary": "List eligible versions for the database",
        "operationId": "listDatabaseVersion",
        "parameters": [
          {
            "$ref": "#/components/parameters/databaseId"
          }
        ],
        "tags": [
          "Database Main Calls"
        ],
        "responses": {
          "200": {
            "description": "List eligible versions",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VersionResponseList"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          }
        }
      }
    },
    "/database/{databaseId}/masterCredentials": {
      "get": {
        "summary": "Get master credentials of the database",
        "operationId": "getDatabaseMasterCredentials",
        "parameters": [
          {
            "$ref": "#/components/parameters/databaseId"
          }
        ],
        "tags": [
          "Database Main Calls"
        ],
        "responses": {
          "200": {
            "description": "get credentials",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CredentialsResponse"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          }
        }
      },
      "put": {
        "summary": "Edit database  master credentials",
        "operationId": "editDatabaseCredentials",
        "parameters": [
          {
            "$ref": "#/components/parameters/databaseId"
          }
        ],
        "tags": [
          "Database Main Calls"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CredentialsRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Edit database credentials",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CredentialsResponse"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          }
        }
      }
    },
    "/database/{databaseId}/logicalDatabase": {
      "get": {
        "summary": "List logical databases of a database",
        "description": "A logical database exists inside a database. The database is a service that exists within an environment, that you can deploy, and that has allocated resources. A database can have several logical databases",
        "operationId": "listLogicalDatabaseDatabase",
        "parameters": [
          {
            "$ref": "#/components/parameters/databaseId"
          }
        ],
        "tags": [
          "Logical Database"
        ],
        "responses": {
          "200": {
            "description": "List logical databases",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LogicalDatabaseResponseList"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          }
        }
      },
      "post": {
        "summary": "Create a logical database on the database",
        "description": "If you don't specify credentials, Qovery will autogenerate them.",
        "operationId": "createLogicalDatabaseOnDatabase",
        "parameters": [
          {
            "$ref": "#/components/parameters/databaseId"
          }
        ],
        "tags": [
          "database"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LogicalDatabaseRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created database on the database",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LogicalDatabaseResponse"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "description": "Logical Database with this name already exists on the database"
          }
        }
      }
    },
    "/database/{databaseId}/application": {
      "get": {
        "summary": "List applications using the database",
        "operationId": "listDatabaseApplication",
        "parameters": [
          {
            "$ref": "#/components/parameters/databaseId"
          }
        ],
        "tags": [
          "Database Application"
        ],
        "responses": {
          "200": {
            "description": "List linked applications",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApplicationResponseList"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          }
        }
      }
    },
    "/database/{databaseId}/application/{targetApplicationId}": {
      "delete": {
        "summary": "Remove an application from this database ",
        "operationId": "removeApplicationFromDatabase",
        "parameters": [
          {
            "$ref": "#/components/parameters/databaseId"
          },
          {
            "$ref": "#/components/parameters/targetApplicationId"
          }
        ],
        "tags": [
          "Database Application"
        ],
        "responses": {
          "204": {
            "$ref": "#/components/responses/204"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          }
        }
      }
    },
    "/database/{databaseId}/restart": {
      "post": {
        "summary": "Retart database",
        "operationId": "restartDatabase",
        "parameters": [
          {
            "$ref": "#/components/parameters/databaseId"
          }
        ],
        "tags": [
          "Database Actions"
        ],
        "responses": {
          "202": {
            "description": "Database  restart has been requested",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Status"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "description": "Operation is in progress"
          }
        }
      }
    },
    "/database/{databaseId}/stop": {
      "post": {
        "summary": "Stop database",
        "operationId": "stopDatabase",
        "parameters": [
          {
            "$ref": "#/components/parameters/databaseId"
          }
        ],
        "tags": [
          "Database Actions"
        ],
        "responses": {
          "202": {
            "description": "Database  stop has been requested",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Status"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "description": "Operation is in progress"
          }
        }
      }
    },
    "/database/{databaseId}/deploy": {
      "post": {
        "summary": "Deploy database ",
        "operationId": "deployDatabase",
        "parameters": [
          {
            "$ref": "#/components/parameters/databaseId"
          }
        ],
        "tags": [
          "Database Actions"
        ],
        "responses": {
          "202": {
            "description": "Deploy database ",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Status"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "description": "Operation is in progress"
          }
        }
      }
    },
    "/database/{databaseId}/currentMetric": {
      "get": {
        "summary": "Get current metric consumption of the database ",
        "operationId": "getDatabaseCurrentMetric",
        "parameters": [
          {
            "$ref": "#/components/parameters/databaseId"
          }
        ],
        "tags": [
          "Database Metrics"
        ],
        "responses": {
          "200": {
            "description": "Get database  current metric",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DatabaseCurrentMetricResponse"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          }
        }
      }
    },
    "/database/{databaseId}/metric/cpu": {
      "get": {
        "summary": "Get CPU consumption metric over time for the database",
        "operationId": "getDatabaseMetricCpu",
        "parameters": [
          {
            "$ref": "#/components/parameters/databaseId"
          },
          {
            "$ref": "#/components/parameters/lastSeconds"
          }
        ],
        "tags": [
          "Database Metrics"
        ],
        "responses": {
          "200": {
            "description": "CPU consumption",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MetricCPUDatapointResponseList"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          }
        }
      }
    },
    "/database/{databaseId}/metric/memory": {
      "get": {
        "summary": "Get Memory consumption metric over time for the database",
        "operationId": "getDatabaseMetricMemory",
        "parameters": [
          {
            "$ref": "#/components/parameters/databaseId"
          },
          {
            "$ref": "#/components/parameters/lastSeconds"
          }
        ],
        "tags": [
          "Database Metrics"
        ],
        "responses": {
          "200": {
            "description": "Memory consumption",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MetricMemoryDatapointResponseList"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          }
        }
      }
    },
    "/database/{databaseId}/metric/storage": {
      "get": {
        "summary": "Get Storage consumption metric over time for the database",
        "operationId": "getDatabaseMetricStorage",
        "parameters": [
          {
            "$ref": "#/components/parameters/databaseId"
          },
          {
            "$ref": "#/components/parameters/lastSeconds"
          }
        ],
        "tags": [
          "Database Metrics"
        ],
        "responses": {
          "200": {
            "description": "Storage consumption",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MetricStorageDatapointResponseList"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          }
        }
      }
    },
    "/database/{databaseId}/metric/healthCheck": {
      "get": {
        "summary": "Get Health Check latency  metric over time for the database",
        "description": "The value returned corresponds to the 95th centile",
        "operationId": "getDatabaseMetricHealthCheck",
        "parameters": [
          {
            "$ref": "#/components/parameters/databaseId"
          },
          {
            "$ref": "#/components/parameters/lastSeconds"
          }
        ],
        "tags": [
          "Database Metrics"
        ],
        "responses": {
          "200": {
            "description": "Health Check Latency",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MetricGenericResponseList"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          }
        }
      }
    },
    "/database/{databaseId}/metric/restart": {
      "get": {
        "summary": "List database restarts",
        "description": "Get database restart message and timestamp.",
        "operationId": "getDatabaseMetricRestart",
        "parameters": [
          {
            "$ref": "#/components/parameters/applicationId"
          },
          {
            "$ref": "#/components/parameters/lastSeconds"
          }
        ],
        "tags": [
          "Database Metrics"
        ],
        "responses": {
          "200": {
            "description": "Restarts",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MetricRestartResponse"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          }
        }
      }
    },
    "/database/{databaseId}/backup": {
      "get": {
        "summary": "List database  backups",
        "description": "By default it returns the 20 last results. The response is paginated. In order to request the next page, you can use the startId query parameter",
        "operationId": "listDatabaseBackup",
        "parameters": [
          {
            "$ref": "#/components/parameters/databaseId"
          },
          {
            "$ref": "#/components/parameters/startId"
          }
        ],
        "tags": [
          "Backups"
        ],
        "responses": {
          "200": {
            "description": "List backups",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BackupPaginatedResponseList"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          }
        }
      },
      "post": {
        "summary": "Add a backup to the Database ",
        "operationId": "addBackupDatabase",
        "parameters": [
          {
            "$ref": "#/components/parameters/databaseId"
          }
        ],
        "tags": [
          "Backups"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BackupRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Added backup",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BackupResponse"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          }
        }
      }
    },
    "/database/{databaseId}/backup/{backupId}": {
      "delete": {
        "summary": "Remove database  backup",
        "operationId": "removeDatabaseBackup",
        "parameters": [
          {
            "$ref": "#/components/parameters/databaseId"
          },
          {
            "$ref": "#/components/parameters/backupId"
          }
        ],
        "tags": [
          "Backups"
        ],
        "responses": {
          "204": {
            "$ref": "#/components/responses/204"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          }
        }
      }
    },
    "/database/{databaseId}/event": {
      "get": {
        "summary": "List database  events",
        "description": "By default it returns the 20 last results. The response is paginated. In order to request the next page, you can use the startId query parameter",
        "operationId": "listDatabaseEvent",
        "parameters": [
          {
            "$ref": "#/components/parameters/databaseId"
          },
          {
            "$ref": "#/components/parameters/startId"
          }
        ],
        "tags": [
          "Database Event"
        ],
        "responses": {
          "200": {
            "description": "List events",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EventPaginatedResponseList"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          }
        }
      }
    },
    "/logicalDatabase/{logicalDatabaseId}": {
      "get": {
        "summary": "Get logical database by ID",
        "description": "A logical database exists inside a database. The database is a service that exists within an environment, that you can deploy, and that has allocated resources. A database can have several logical databases",
        "operationId": "getLogicalDatabase",
        "parameters": [
          {
            "$ref": "#/components/parameters/logicalDatabaseId"
          }
        ],
        "tags": [
          "Logical Database"
        ],
        "responses": {
          "200": {
            "description": "Get logical database by ID",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LogicalDatabaseResponse"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          }
        }
      },
      "put": {
        "summary": "Edit a logical database",
        "operationId": "editLogicalDatabase",
        "parameters": [
          {
            "$ref": "#/components/parameters/logicalDatabaseId"
          }
        ],
        "tags": [
          "Logical Database"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LogicalDatabaseRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Edit a Logical Database",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LogicalDatabaseResponse"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          }
        }
      },
      "delete": {
        "summary": "Delete a Logical database",
        "description": "To delete a logical database you must have the project user permission",
        "operationId": "deleteLogicalDatabase",
        "parameters": [
          {
            "$ref": "#/components/parameters/logicalDatabaseId"
          }
        ],
        "tags": [
          "Logical Database"
        ],
        "responses": {
          "204": {
            "$ref": "#/components/responses/204-deletion"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          }
        }
      }
    },
    "/logicalDatabase/{logicalDatabaseId}/credentials": {
      "get": {
        "summary": "Get  credentials of the logical database",
        "operationId": "getLogicalDatabaseCredentials",
        "parameters": [
          {
            "$ref": "#/components/parameters/logicalDatabaseId"
          }
        ],
        "tags": [
          "Logical Database"
        ],
        "responses": {
          "200": {
            "description": "get credentials",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CredentialsResponse"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          }
        }
      },
      "put": {
        "summary": "Edit logical database credentials",
        "operationId": "editLogicalDatabaseCredentials",
        "parameters": [
          {
            "$ref": "#/components/parameters/logicalDatabaseId"
          }
        ],
        "tags": [
          "logicalDatabase"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CredentialsRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Edit logical database credentials",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CredentialsResponse"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          }
        }
      }
    },
    "/logicalDatabase/{logicalDatabaseId}/application": {
      "get": {
        "summary": "List linked applications",
        "operationId": "listLogicalDatabaseApplication",
        "parameters": [
          {
            "$ref": "#/components/parameters/logicalDatabaseId"
          }
        ],
        "tags": [
          "Logical Database"
        ],
        "responses": {
          "200": {
            "description": "List linked applications",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApplicationResponseList"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          }
        }
      }
    },
    "/account": {
      "get": {
        "summary": "Get Account information",
        "operationId": "getAccountInformation",
        "tags": [
          "Account Info"
        ],
        "responses": {
          "200": {
            "description": "Get account info",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AccountInfoResponse"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/401"
          }
        }
      }
    },
    "/account/gitAuthProvider": {
      "get": {
        "summary": "Get git provider accounts",
        "operationId": "getGitProviderAccount",
        "tags": [
          "Git repositories"
        ],
        "responses": {
          "200": {
            "description": "Get account",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GitAuthProviderResponseList"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/401"
          }
        }
      }
    },
    "/account/github/repository": {
      "get": {
        "summary": "Get github repositories of the connected user",
        "operationId": "getGithubRepositories",
        "tags": [
          "Git repositories"
        ],
        "responses": {
          "200": {
            "description": "Get github repositories",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GitRepositoryResponseList"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/401"
          }
        }
      }
    },
    "/account/github/repository/branch": {
      "get": {
        "summary": "Get github branches of the specified repository",
        "operationId": "getGithubRepositoryBranches",
        "tags": [
          "Git repositories"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "name",
            "schema": {
              "type": "string"
            },
            "description": "The name of the repository where to retrieve the branches"
          }
        ],
        "responses": {
          "200": {
            "description": "Get github repository branches",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "results": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "required": [
                          "name"
                        ],
                        "properties": {
                          "name": {
                            "type": "string",
                            "example": "main"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/401"
          }
        }
      }
    },
    "/account/gitlab/repository": {
      "get": {
        "summary": "Get gitlab repositories of the connected user",
        "operationId": "getGitlabRepositories",
        "tags": [
          "Git repositories"
        ],
        "responses": {
          "200": {
            "description": "Get gitlab repositories",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GitRepositoryResponseList"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/401"
          }
        }
      }
    },
    "/account/gitlab/repository/branch": {
      "get": {
        "summary": "Get gitlab branches of the specified repository",
        "operationId": "getGitlabRepositoryBranches",
        "tags": [
          "Git repositories"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "name",
            "schema": {
              "type": "string"
            },
            "description": "The name of the repository to retrieve the branches"
          }
        ],
        "responses": {
          "200": {
            "description": "Get gitlab repository branches",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/paths/~1account~1github~1repository~1branch/get/responses/200/content/application~1json/schema"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/401"
          }
        }
      }
    },
    "/account/bitbucket/repository": {
      "get": {
        "summary": "Get bitbucket repositories of the connected user",
        "operationId": "getBitbucketRepositories",
        "tags": [
          "Git repositories"
        ],
        "responses": {
          "200": {
            "description": "Get bitbucket repositories",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GitRepositoryResponseList"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/401"
          }
        }
      }
    },
    "/account/bitbucket/repository/branch": {
      "get": {
        "summary": "Get bitbucket branches of the specified repository",
        "operationId": "getBitbucketRepositoryBranches",
        "tags": [
          "Git repositories"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "name",
            "schema": {
              "type": "string"
            },
            "description": "The name of the repository where to retrieve the branches"
          }
        ],
        "responses": {
          "200": {
            "description": "Get bitbucket repository branches",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/paths/~1account~1github~1repository~1branch/get/responses/200/content/application~1json/schema"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/401"
          }
        }
      }
    },
    "/account/referral": {
      "get": {
        "summary": "Get your referral information",
        "operationId": "getAccountReferral",
        "tags": [
          "Referral & Rewards"
        ],
        "responses": {
          "200": {
            "description": "Get referral info",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReferralResponse"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/401"
          }
        }
      }
    },
    "/account/rewardClaim": {
      "post": {
        "summary": "Claim a reward",
        "description": "A same code can be claimed only 3 times at max",
        "operationId": "postAccountRewardClaim",
        "tags": [
          "Referral & Rewards"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RewardClaimResponse"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Claim reward"
          }
        }
      }
    }
  },
  "components": {
    "parameters": {
      "targetLogicalDatabaseId": {
        "name": "targetLogicalDatabaseId",
        "in": "path",
        "description": "Target database ID",
        "required": true,
        "schema": {
          "type": "string",
          "format": "uuid"
        }
      },
      "targetDatabaseId": {
        "name": "targetDatabaseId",
        "in": "path",
        "description": "Target database ID",
        "required": true,
        "schema": {
          "type": "string",
          "format": "uuid"
        }
      },
      "creditCardId": {
        "name": "creditCardId",
        "in": "path",
        "description": "Credit Card ID",
        "required": true,
        "schema": {
          "type": "string",
          "format": "uuid"
        }
      },
      "secretId": {
        "name": "secretId",
        "in": "path",
        "description": "Secret ID",
        "required": true,
        "schema": {
          "type": "string",
          "format": "uuid"
        }
      },
      "projectId": {
        "name": "projectId",
        "in": "path",
        "description": "Project ID",
        "required": true,
        "schema": {
          "type": "string",
          "format": "uuid"
        }
      },
      "organizationId": {
        "name": "organizationId",
        "in": "path",
        "description": "Organization ID",
        "required": true,
        "schema": {
          "type": "string",
          "format": "uuid"
        }
      },
      "environmentVariableId": {
        "name": "environmentVariableId",
        "in": "path",
        "description": "Environment Variable ID",
        "required": true,
        "schema": {
          "type": "string",
          "format": "uuid"
        }
      },
      "clusterId": {
        "name": "clusterId",
        "in": "path",
        "description": "Cluster ID",
        "required": true,
        "schema": {
          "type": "string",
          "format": "uuid"
        }
      },
      "eventId": {
        "name": "eventId",
        "in": "path",
        "description": "Event ID",
        "required": true,
        "schema": {
          "type": "string",
          "format": "uuid"
        }
      },
      "tagId": {
        "name": "tagId",
        "in": "path",
        "description": "Tag ID",
        "required": true,
        "schema": {
          "type": "string",
          "format": "uuid"
        }
      },
      "targetApplicationId": {
        "name": "targetApplicationId",
        "in": "path",
        "description": "Target application ID",
        "required": true,
        "schema": {
          "type": "string",
          "format": "uuid"
        }
      },
      "invoiceId": {
        "name": "invoiceId",
        "in": "path",
        "description": "Invoice ID",
        "required": true,
        "schema": {
          "type": "string",
          "format": "uuid"
        }
      },
      "applicationId": {
        "name": "applicationId",
        "in": "path",
        "description": "Application ID",
        "required": true,
        "schema": {
          "type": "string",
          "format": "uuid"
        }
      },
      "deploymentRuleId": {
        "name": "deploymentRuleId",
        "in": "path",
        "description": "Deployment Rule ID",
        "required": true,
        "schema": {
          "type": "string",
          "format": "uuid"
        }
      },
      "credentialsId": {
        "name": "credentialsId",
        "in": "path",
        "description": "Credentials ID",
        "required": true,
        "schema": {
          "type": "string",
          "format": "uuid"
        }
      },
      "backupId": {
        "name": "backupId",
        "in": "path",
        "description": "Database Backup ID",
        "required": true,
        "schema": {
          "type": "string",
          "format": "uuid"
        }
      },
      "logicalDatabaseId": {
        "name": "logicalDatabaseId",
        "in": "path",
        "description": "Logical Database ID",
        "required": true,
        "schema": {
          "type": "string",
          "format": "uuid"
        }
      },
      "databaseId": {
        "name": "databaseId",
        "in": "path",
        "description": "Database ID",
        "required": true,
        "schema": {
          "type": "string",
          "format": "uuid"
        }
      },
      "customDomainId": {
        "name": "customDomainId",
        "in": "path",
        "description": "Custom Domain ID",
        "required": true,
        "schema": {
          "type": "string",
          "format": "uuid"
        }
      },
      "instanceId": {
        "name": "instanceId",
        "in": "path",
        "description": "Instance ID",
        "required": true,
        "schema": {
          "type": "string",
          "format": "uuid"
        }
      },
      "environmentId": {
        "name": "environmentId",
        "in": "path",
        "description": "Environment ID",
        "required": true,
        "schema": {
          "type": "string",
          "format": "uuid"
        }
      },
      "gitCommitId": {
        "name": "gitCommitId",
        "in": "query",
        "description": "Git Commit ID",
        "schema": {
          "type": "string",
          "format": "uuid"
        }
      },
      "startId": {
        "name": "startId",
        "in": "query",
        "description": "Starting point after which to return results",
        "required": false,
        "schema": {
          "type": "string",
          "format": "uuid"
        }
      },
      "tail": {
        "name": "tail",
        "in": "query",
        "description": "Number of last results to return",
        "required": true,
        "schema": {
          "type": "integer",
          "format": "int32"
        }
      },
      "limit": {
        "name": "limit",
        "in": "query",
        "description": "How many items to return at one time (max 100)",
        "required": false,
        "schema": {
          "type": "integer",
          "format": "int32"
        }
      },
      "lastId": {
        "name": "lastId",
        "in": "query",
        "description": "ID of the last object after which to return all results",
        "required": true,
        "schema": {
          "type": "string",
          "format": "uuid"
        }
      },
      "status": {
        "name": "status",
        "in": "query",
        "description": "status",
        "schema": {
          "type": "string"
        }
      },
      "lastSeconds": {
        "name": "lastSeconds",
        "in": "query",
        "description": "Up to how many seconds in the past to ask analytics results",
        "required": true,
        "schema": {
          "type": "number"
        }
      }
    },
    "schemas": {
      "ApplicationGitRepositoryRequest": {
        "type": "object",
        "required": [
          "provider",
          "owner",
          "name",
          "url",
          "root_path"
        ],
        "properties": {
          "url": {
            "type": "string",
            "description": "application git repository URL",
            "example": "https://github.com/Qovery/simple-node-app"
          },
          "branch": {
            "type": "string",
            "description": "Name of the branch to use. This is optional\nIf not specified, then the branch used is the `main` or `master` one\n",
            "example": "feat/text_xxx"
          },
          "root_path": {
            "type": "string",
            "default": "/",
            "description": "indicates the root path of the application."
          }
        }
      },
      "OrganizationRequest": {
        "type": "object",
        "required": [
          "name",
          "plan"
        ],
        "properties": {
          "name": {
            "type": "string",
            "description": "name is case insensitive"
          },
          "description": {
            "type": "string"
          },
          "plan": {
            "type": "string",
            "enum": [
              "COMMUNITY",
              "FREE",
              "PROFESSIONAL",
              "BUSINESS"
            ]
          },
          "website_url": {
            "type": "string",
            "nullable": true
          },
          "repository": {
            "type": "string",
            "nullable": true
          },
          "logo_url": {
            "type": "string",
            "nullable": true
          },
          "icon_url": {
            "type": "string",
            "nullable": true
          }
        }
      },
      "MetricCPUResponse": {
        "type": "object",
        "required": [
          "instance_name",
          "data"
        ],
        "properties": {
          "instance_name": {
            "type": "string",
            "example": "instance 1"
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MetricCPUDatapointResponse"
            }
          }
        }
      },
      "ApplicationStorageRequest": {
        "type": "object",
        "properties": {
          "storage": {
            "type": "array",
            "items": {
              "type": "object",
              "required": [
                "type",
                "size",
                "mount_point"
              ],
              "properties": {
                "type": {
                  "type": "string",
                  "enum": [
                    "SLOW_HDD",
                    "HDD",
                    "SSD",
                    "FAST_SSD"
                  ]
                },
                "size": {
                  "type": "number",
                  "description": "unit is GB",
                  "example": 16
                },
                "mount_point": {
                  "type": "string",
                  "example": "/mnt/images"
                }
              }
            }
          }
        }
      },
      "ClusterStatusResponseList": {
        "type": "object",
        "properties": {
          "results": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ClusterStatusResponse"
            }
          }
        }
      },
      "MetricGenericResponse": {
        "type": "object",
        "required": [
          "instance_name",
          "data"
        ],
        "properties": {
          "instance_name": {
            "type": "string",
            "example": "instance 1"
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MetricGenericDatapointResponse"
            }
          }
        }
      },
      "ApplicationStorageResponse": {
        "type": "object",
        "properties": {
          "storage": {
            "type": "array",
            "items": {
              "type": "object",
              "required": [
                "type",
                "size",
                "mount_point"
              ],
              "properties": {
                "id": {
                  "type": "string",
                  "format": "uuid"
                },
                "type": {
                  "type": "string",
                  "enum": [
                    "SLOW_HDD",
                    "HDD",
                    "SSD",
                    "FAST_SSD"
                  ]
                },
                "size": {
                  "type": "number",
                  "description": "unit is GB",
                  "example": 16
                },
                "mount_point": {
                  "type": "string",
                  "example": "/mnt/images"
                }
              }
            }
          }
        }
      },
      "ApplicationDependencyRequest": {
        "type": "object",
        "required": [
          "id"
        ],
        "properties": {
          "id": {
            "type": "string",
            "description": "Set application ID",
            "format": "uuid"
          }
        }
      },
      "OrganizationResponse": {
        "type": "object",
        "properties": {
          "owner": {
            "type": "string",
            "format": "uuid",
            "description": "uuid of the user owning the organization"
          }
        },
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseResponse"
          },
          {
            "$ref": "#/components/schemas/OrganizationRequest"
          }
        ]
      },
      "MetricStorageDatapointResponse": {
        "type": "object",
        "required": [
          "created_at",
          "requested_in_mb",
          "consumed_in_mb",
          "consumed_in_percent"
        ],
        "properties": {
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "requested_in_gb": {
            "type": "integer"
          },
          "consumed_in_gb": {
            "type": "number"
          },
          "consumed_in_percent": {
            "type": "number"
          }
        }
      },
      "ProjectRequest": {
        "type": "object",
        "required": [
          "name"
        ],
        "properties": {
          "name": {
            "type": "string",
            "description": "name is case insensitive"
          },
          "description": {
            "type": "string"
          }
        }
      },
      "BillingInfoRequest": {
        "type": "object",
        "required": [
          "first_name",
          "last_name",
          "email",
          "address",
          "zip",
          "country_code",
          "city"
        ],
        "properties": {
          "first_name": {
            "type": "string",
            "example": "Forrest"
          },
          "last_name": {
            "type": "string",
            "example": "Gump"
          },
          "email": {
            "type": "string",
            "format": "email",
            "example": "forrest@gump.com",
            "description": "email used for billing, and to receive all invoices by email"
          },
          "address": {
            "type": "string",
            "example": "21 Jenny Street"
          },
          "city": {
            "type": "string",
            "example": "Greenbow"
          },
          "zip": {
            "type": "string",
            "example": "36744"
          },
          "state": {
            "type": "string",
            "example": "Alabama",
            "description": "only for US"
          },
          "country_code": {
            "type": "string",
            "description": "ISO code of the country",
            "example": "US"
          },
          "company": {
            "type": "string",
            "description": "name of the company to bill"
          },
          "vat_number": {
            "type": "string"
          }
        }
      },
      "ProjectDeploymentRuleResponse": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseResponse"
          },
          {
            "$ref": "#/components/schemas/ProjectDeploymentRuleRequest"
          }
        ]
      },
      "ProjectResponseList": {
        "type": "object",
        "properties": {
          "results": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ProjectResponse"
            }
          }
        }
      },
      "ProjectStatsResponseList": {
        "type": "object",
        "properties": {
          "results": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ProjectStatsResponse"
            }
          }
        }
      },
      "Value": {
        "type": "object",
        "required": [
          "value"
        ],
        "properties": {
          "value": {
            "type": "string"
          }
        }
      },
      "DatabaseResponse": {
        "type": "object",
        "properties": {
          "environment": {
            "$ref": "#/components/schemas/ReferenceObject"
          },
          "host": {
            "type": "string"
          },
          "port": {
            "type": "integer",
            "example": 5432
          },
          "maximum_cpu": {
            "type": "number",
            "description": "Maximum cpu that can be allocated to the database based on organization cluster configuration. unit is millicores (m). 1000m = 1 cpu",
            "default": 250,
            "example": 1250
          },
          "maximum_memory": {
            "type": "number",
            "description": "Maximum memory that can be allocated to the database based on organization cluster configuration. unit is MB. 1024 MB = 1GB",
            "default": 256,
            "example": 1024
          },
          "disk_encrypted": {
            "type": "boolean",
            "description": "indicates if the database disk is encrypted or not"
          }
        },
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseResponse"
          },
          {
            "$ref": "#/components/schemas/DatabaseRequest"
          }
        ]
      },
      "SecretRequest": {
        "type": "object",
        "required": [
          "key",
          "value"
        ],
        "properties": {
          "key": {
            "type": "string",
            "description": "key is case sensitive"
          },
          "value": {
            "type": "string",
            "description": "value of the secret. Clear value will never be returned"
          }
        }
      },
      "Key": {
        "type": "object",
        "required": [
          "key"
        ],
        "properties": {
          "key": {
            "type": "string"
          }
        }
      },
      "EnvironmentApplicationsCurrentScaleResponseList": {
        "type": "object",
        "properties": {
          "results": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EnvironmentApplicationsCurrentScaleResponse"
            }
          }
        }
      },
      "MemberResponseList": {
        "type": "object",
        "properties": {
          "results": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MemberResponse"
            }
          }
        }
      },
      "DatabaseRequest": {
        "type": "object",
        "required": [
          "name",
          "type",
          "version",
          "mode"
        ],
        "properties": {
          "name": {
            "type": "string",
            "description": "name is case insensitive"
          },
          "type": {
            "type": "string",
            "enum": [
              "POSTGRESQL",
              "MYSQL",
              "MONGODB",
              "REDIS"
            ]
          },
          "version": {
            "type": "string",
            "example": "10.1"
          },
          "mode": {
            "type": "string",
            "enum": [
              "MANAGED",
              "CONTAINER"
            ]
          },
          "accessibility": {
            "type": "string",
            "default": "PRIVATE",
            "enum": [
              "PUBLIC",
              "PRIVATE"
            ]
          },
          "cpu": {
            "type": "number",
            "description": "unit is millicores (m). 1000m = 1 cpu",
            "default": 250,
            "example": 1250
          },
          "memory": {
            "type": "number",
            "description": "unit is MB. 1024 MB = 1GB",
            "default": 256,
            "example": 1024
          },
          "storage": {
            "type": "number",
            "description": "unit is MB",
            "default": 10240
          }
        }
      },
      "PaginationDataResponse": {
        "type": "object",
        "required": [
          "page",
          "page_size"
        ],
        "properties": {
          "page": {
            "type": "number",
            "example": 1
          },
          "page_size": {
            "type": "number",
            "example": 20
          }
        }
      },
      "DatabaseResponseList": {
        "type": "object",
        "properties": {
          "results": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DatabaseResponse"
            }
          }
        }
      },
      "LinkResponse": {
        "type": "object",
        "properties": {
          "url": {
            "type": "string"
          }
        }
      },
      "MetricStorageDatapointResponseList": {
        "type": "object",
        "properties": {
          "results": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MetricStorageDatapointResponse"
            }
          }
        }
      },
      "DeploymentHistoryEnvironmentResponse": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "enum": [
              "READY",
              "BUILDING",
              "BUILD_ERROR",
              "BUILT",
              "DEPLOYMENT_QUEUED",
              "DEPLOYING",
              "DEPLOYMENT_ERROR",
              "DEPLOYED",
              "STOP_QUEUED",
              "STOPPING",
              "STOP_ERROR",
              "STOPPED",
              "DELETE_QUEUED",
              "DELETING",
              "DELETE_ERROR",
              "DELETED",
              "RUNNING",
              "RUNNING_ERROR"
            ]
          },
          "applications": {
            "type": "array",
            "items": [
              {
                "$ref": "#/components/schemas/DeploymentHistoryApplicationResponse"
              }
            ]
          },
          "databases": {
            "type": "array",
            "items": [
              {
                "$ref": "#/components/schemas/DeploymentHistoryDatabaseResponse"
              }
            ]
          }
        },
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseResponse"
          }
        ]
      },
      "LogResponse": {
        "type": "object",
        "required": [
          "id",
          "created_at",
          "status",
          "message"
        ],
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "message": {
            "type": "string"
          }
        }
      },
      "MetricMemoryResponse": {
        "type": "object",
        "required": [
          "instance_name",
          "data"
        ],
        "properties": {
          "instance_name": {
            "type": "string",
            "example": "instance 1"
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MetricMemoryDatapointResponse"
            }
          }
        }
      },
      "EnvironmentTotalNumber": {
        "type": "object",
        "required": [
          "number"
        ],
        "properties": {
          "environment_total_number": {
            "type": "number"
          }
        }
      },
      "EnvironmentApplicationsStorageResponse": {
        "type": "object",
        "required": [
          "application",
          "instances"
        ],
        "properties": {
          "application": {
            "type": "string",
            "format": "uuid"
          },
          "disks": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/StorageDiskResponse"
            }
          }
        }
      },
      "MetricCPUDatapointResponse": {
        "type": "object",
        "required": [
          "created_at",
          "requested_in_float",
          "consumed_in_number",
          "consumed_in_percent"
        ],
        "properties": {
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "requested_in_number": {
            "type": "number"
          },
          "consumed_in_number": {
            "type": "number"
          },
          "consumed_in_percent": {
            "type": "number"
          }
        }
      },
      "VersionResponse": {
        "type": "object",
        "required": [
          "name"
        ],
        "properties": {
          "name": {
            "type": "string",
            "example": "10.1"
          }
        }
      },
      "DatabaseEditRequest": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "name is case-insensitive"
          },
          "version": {
            "type": "string",
            "example": "10.1"
          },
          "accessibility": {
            "type": "string",
            "enum": [
              "PUBLIC",
              "PRIVATE"
            ]
          },
          "cpu": {
            "type": "number",
            "description": "unit is millicores (m). 1000m = 1 cpu",
            "default": 250,
            "example": 1250
          },
          "memory": {
            "type": "number",
            "description": "unit is MB. 1024 MB = 1GB",
            "default": 256,
            "example": 1024
          },
          "storage": {
            "type": "number",
            "description": "unit is GB",
            "example": 4
          }
        }
      },
      "DeploymentHistoryPaginatedResponseList": {
        "type": "object",
        "properties": {
          "results": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DeploymentHistoryResponse"
            }
          }
        },
        "allOf": [
          {
            "$ref": "#/components/schemas/PaginationDataResponse"
          }
        ]
      },
      "ClusterCredentialsRequest": {
        "type": "object",
        "required": [
          "name"
        ],
        "properties": {
          "name": {
            "type": "string"
          },
          "access_key_id": {
            "type": "string"
          },
          "secret_access_key": {
            "type": "string"
          }
        }
      },
      "MemberResponse": {
        "type": "object",
        "required": [
          "email"
        ],
        "properties": {
          "name": {
            "type": "string"
          },
          "nickname": {
            "type": "string"
          },
          "email": {
            "type": "string",
            "format": "email"
          },
          "profile_picture_url": {
            "type": "string",
            "format": "uri"
          },
          "last_activity_at": {
            "type": "string",
            "format": "date-time",
            "description": "last time the user was connected"
          },
          "role": {
            "type": "string",
            "enum": [
              "OWNER",
              "ADMIN",
              "DEVELOPER",
              "VIEWER"
            ]
          }
        },
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseResponse"
          }
        ]
      },
      "ClusterStatusResponse": {
        "type": "object",
        "properties": {
          "cluster_id": {
            "type": "string",
            "format": "uuid"
          },
          "status": {
            "type": "string",
            "enum": [
              "READY",
              "DEPLOYMENT_QUEUED",
              "DEPLOYING",
              "DEPLOYMENT_ERROR",
              "DEPLOYED",
              "STOP_QUEUED",
              "STOPPING",
              "STOP_ERROR",
              "STOPPED",
              "DELETE_QUEUED",
              "DELETING",
              "DELETE_ERROR",
              "DELETED",
              "RUNNING",
              "RUNNING_ERROR"
            ]
          },
          "is_deployed": {
            "type": "boolean"
          }
        }
      },
      "InvoiceResponseList": {
        "type": "object",
        "properties": {
          "results": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/InvoiceResponse"
            }
          }
        }
      },
      "EnvironmentApplicationsInstanceResponseList": {
        "type": "object",
        "properties": {
          "results": {
            "type": "array",
            "items": {
              "type": "object",
              "required": [
                "application",
                "instances"
              ],
              "properties": {
                "application": {
                  "type": "string",
                  "format": "uuid"
                },
                "instances": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/InstanceResponse"
                  }
                }
              }
            }
          }
        }
      },
      "InvoiceResponse": {
        "type": "object",
        "required": [
          "id",
          "created_at",
          "status",
          "total_in_cents",
          "total",
          "currency_code"
        ],
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "status": {
            "type": "string",
            "enum": [
              "PAID",
              "POSTED",
              "PAYMENT_DUE",
              "NOT_PAID",
              "VOIDED",
              "PENDING",
              "UNKNOWN"
            ]
          }
        },
        "allOf": [
          {
            "$ref": "#/components/schemas/CostResponse"
          }
        ]
      },
      "EnvironmentLogResponse": {
        "type": "object",
        "required": [
          "id",
          "created_at",
          "service",
          "status",
          "message"
        ],
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "scope": {
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "enum": [
                  "APPLICATION",
                  "DATABASE",
                  "ENVIRONMENT"
                ]
              },
              "name": {
                "type": "string"
              },
              "id": {
                "type": "string",
                "format": "uuid"
              }
            }
          },
          "state": {
            "type": "string",
            "description": "Status is a state machine. It starts with `BUILDING` or `DEPLOYING` state (or `INITIALIZED`if auto-deploy is deactivated). Then finish with `*_ERROR` or any termination state.\n",
            "enum": [
              "INITIALIZED",
              "QUEUED",
              "BUILDING",
              "BUILD_ERROR",
              "BUILT",
              "DEPLOYING",
              "DEPLOYMENT_ERROR",
              "DEPLOYED",
              "STOPPING",
              "STOP_ERROR",
              "STOPPED",
              "DELETING",
              "DELETE_ERROR",
              "DELETED",
              "RUNNING",
              "RUNNING_ERROR"
            ]
          },
          "message": {
            "type": "string",
            "nullable": true,
            "description": "Log message"
          },
          "execution_id": {
            "type": "string",
            "description": "Only for errors. Helps Qovery team to investigate."
          },
          "hint": {
            "type": "string",
            "example": "only for errors. it gives a possible action to the user -- Markdown can be injected"
          }
        }
      },
      "GitAuthProviderResponse": {
        "type": "object",
        "required": [
          "name",
          "owner"
        ],
        "properties": {
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string",
            "example": "GITHUB"
          },
          "owner": {
            "type": "string",
            "example": "John Doe"
          }
        }
      },
      "OrganizationEditRequest": {
        "type": "object",
        "required": [
          "name",
          "plan"
        ],
        "properties": {
          "name": {
            "type": "string",
            "description": "name is case insensitive"
          },
          "description": {
            "type": "string"
          },
          "website_url": {
            "type": "string",
            "nullable": true
          },
          "repository": {
            "type": "string",
            "nullable": true
          },
          "logo_url": {
            "type": "string",
            "nullable": true
          },
          "icon_url": {
            "type": "string",
            "nullable": true
          }
        }
      },
      "ClusterCloudProviderInfoRequest": {
        "type": "object",
        "properties": {
          "cloud_provider": {
            "type": "string",
            "enum": [
              "AWS",
              "DIGITAL_OCEAN",
              "SCALEWAY"
            ]
          },
          "credentials": {
            "type": "object",
            "properties": {
              "id": {
                "type": "string",
                "format": "uuid"
              },
              "name": {
                "type": "string"
              }
            }
          },
          "region": {
            "type": "string"
          }
        }
      },
      "MetricGenericDatapointResponse": {
        "type": "object",
        "required": [
          "created_at",
          "value"
        ],
        "properties": {
          "created_at": {
            "type": "string",
            "readOnly": true,
            "format": "date-time"
          },
          "value": {
            "type": "number"
          }
        }
      },
      "ServiceTotalNumber": {
        "type": "object",
        "required": [
          "number"
        ],
        "properties": {
          "service_total_number": {
            "type": "number"
          }
        }
      },
      "BackupRequest": {
        "type": "object",
        "required": [
          "name",
          "message"
        ],
        "properties": {
          "name": {
            "type": "string"
          },
          "message": {
            "type": "string"
          }
        }
      },
      "DeployRequest": {
        "type": "object",
        "required": [
          "git_commit_id"
        ],
        "properties": {
          "git_commit_id": {
            "type": "string",
            "description": "Commit ID to deploy"
          }
        }
      },
      "AccountInfoEditRequest": {
        "type": "object",
        "properties": {
          "first_name": {
            "type": "string"
          },
          "last_name": {
            "type": "string"
          },
          "profile_picture_url": {
            "type": "string"
          }
        }
      },
      "BackupResponseList": {
        "type": "object",
        "properties": {
          "results": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/BackupResponse"
            }
          }
        }
      },
      "ProjectCurrentCostResponseList": {
        "type": "object",
        "properties": {
          "projects": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ProjectCurrentCostResponse"
            }
          }
        }
      },
      "Healthcheck": {
        "type": "object",
        "properties": {
          "protocol": {
            "type": "string",
            "enum": [
              "TCP",
              "HTTP",
              "None"
            ]
          },
          "value": {
            "type": "string"
          }
        }
      },
      "CommitResponse": {
        "type": "object",
        "required": [
          "git_commit_id",
          "created_at",
          "author_name",
          "message",
          "tag"
        ],
        "properties": {
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "git_commit_id": {
            "type": "string"
          },
          "tag": {
            "type": "string",
            "example": "v2.1.1"
          },
          "message": {
            "type": "string"
          },
          "author_name": {
            "type": "string"
          },
          "author_avatar_url": {
            "type": "string"
          },
          "commit_page_url": {
            "type": "string"
          }
        }
      },
      "GenericObjectCurrentCostResponse": {
        "type": "object",
        "required": [
          "id",
          "name",
          "consumed_time_in_seconds",
          "cost"
        ],
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "name": {
            "type": "string"
          },
          "consumed_time_in_seconds": {
            "type": "integer",
            "example": 3600
          },
          "cost": {
            "$ref": "#/components/schemas/CostResponse"
          }
        }
      },
      "ApplicationRequest": {
        "type": "object",
        "required": [
          "name",
          "git_repository"
        ],
        "properties": {
          "name": {
            "type": "string",
            "description": "name is case insensitive"
          },
          "description": {
            "type": "string",
            "description": "give a description to this application"
          },
          "git_repository": {
            "$ref": "#/components/schemas/ApplicationGitRepositoryRequest"
          },
          "build_mode": {
            "type": "string",
            "enum": [
              "DOCKER",
              "BUILDPACKS"
            ],
            "default": "BUILDPACKS",
            "description": "`DOCKER` requires `dockerfile_path`\n`BUILDPACKS` does not require any `dockerfile_path`\n"
          },
          "dockerfile_path": {
            "type": "string",
            "description": "The path of the associated Dockerfile. Only if you are using build_mode = DOCKER"
          },
          "buildpack_language": {
            "type": "string",
            "description": "Development language of the application",
            "enum": [
              "GO",
              "NODE_JS",
              "CLOJURE",
              "PYTHON",
              "JAVA",
              "GRADLE",
              "JVM",
              "GRAILS",
              "SCALA",
              "PLAY",
              "PHP",
              "GO"
            ]
          },
          "cpu": {
            "type": "number",
            "description": "unit is millicores (m). 1000m = 1 cpu",
            "default": 250,
            "example": 1250
          },
          "memory": {
            "type": "number",
            "description": "unit is MB. 1024 MB = 1GB",
            "default": 256,
            "example": 1024
          },
          "min_running_instances": {
            "type": "integer",
            "minimum": 0,
            "description": "Minimum number of instances running. This resource auto-scale based on the CPU and Memory consumption.\nNote: 0 means that there is no application running.\n",
            "default": 1
          },
          "max_running_instances": {
            "type": "integer",
            "maximum": -1,
            "description": "Maximum number of instances running. This resource auto-scale based on the CPU and Memory consumption.\nNote: -1 means that there is no limit.\n",
            "default": 1
          },
          "healthcheck": {
            "$ref": "#/components/schemas/Healthcheck"
          },
          "env_preview": {
            "type": "boolean",
            "description": "Specify if the environment preview option is activated or not for this application.\nIf activated, a preview environment will be automatically cloned at each pull request. \n",
            "default": true
          }
        },
        "allOf": [
          {
            "$ref": "#/components/schemas/ApplicationStorageRequest"
          },
          {
            "$ref": "#/components/schemas/ApplicationPortRequest"
          }
        ]
      },
      "BaseResponse": {
        "type": "object",
        "required": [
          "id",
          "created_at"
        ],
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "readOnly": true
          },
          "created_at": {
            "type": "string",
            "readOnly": true,
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "readOnly": true,
            "format": "date-time"
          }
        }
      },
      "ApplicationEditRequest": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "name is case insensitive"
          },
          "description": {
            "type": "string",
            "description": "give a description to this application"
          },
          "git_repository": {
            "$ref": "#/components/schemas/ApplicationGitRepositoryRequest"
          },
          "build_mode": {
            "type": "string",
            "enum": [
              "DOCKER",
              "BUILDPACKS"
            ],
            "description": "`DOCKER` requires `dockerfile_path`\n`BUILDPACKS` does not require any `dockerfile_path`\n"
          },
          "dockerfile_path": {
            "type": "string",
            "description": "The path of the associated Dockerfile"
          },
          "buildpack_language": {
            "type": "string",
            "description": "Development language of the application",
            "enum": [
              "GO",
              "NODE_JS",
              "CLOJURE",
              "PYTHON",
              "JAVA",
              "GRADLE",
              "JVM",
              "GRAILS",
              "SCALA",
              "PLAY",
              "PHP",
              "GO"
            ]
          },
          "cpu": {
            "type": "number",
            "description": "unit is millicores (m). 1000m = 1 cpu",
            "default": 250,
            "example": 1250
          },
          "memory": {
            "type": "number",
            "description": "unit is MB. 1024 MB = 1GB",
            "default": 256,
            "example": 1024
          },
          "min_running_instances": {
            "type": "integer",
            "minimum": 0,
            "description": "Minimum number of instances running. This resource auto-scale based on the CPU and Memory consumption.\nNote: 0 means that there is no application running.\n",
            "default": 1
          },
          "max_running_instances": {
            "type": "integer",
            "maximum": -1,
            "description": "Maximum number of instances running. This resource auto-scale based on the CPU and Memory consumption.\nNote: -1 means that there is no limit.\n",
            "default": 1
          },
          "healthcheck": {
            "$ref": "#/components/schemas/Healthcheck"
          },
          "env_preview": {
            "type": "boolean",
            "description": "Specify if the environment preview option is activated or not for this application.\nIf activated, a preview environment will be automatically cloned at each pull request. \n",
            "default": true
          },
          "sticky-session": {
            "type": "boolean",
            "description": "Specify if the sticky session option (also called persistant session) is activated or not for this application.\nIf activated, user will be redirected by the load balancer to the same instance each time he access to the application. \n",
            "default": false
          }
        },
        "allOf": [
          {
            "$ref": "#/components/schemas/ApplicationStorageResponse"
          },
          {
            "$ref": "#/components/schemas/ApplicationPortResponse"
          }
        ]
      },
      "DeploymentHistoryResponseList": {
        "type": "object",
        "properties": {
          "results": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DeploymentHistoryResponse"
            }
          }
        }
      },
      "BudgetThreshold": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BudgetResponse"
          }
        ]
      },
      "EventResponseList": {
        "type": "object",
        "properties": {
          "results": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EventResponse"
            }
          }
        }
      },
      "DeploymentHistoryResponse": {
        "type": "object",
        "properties": {
          "commit": {
            "$ref": "#/components/schemas/CommitResponse"
          },
          "status": {
            "type": "string",
            "enum": [
              "SUCCESS",
              "FAILED"
            ]
          }
        },
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseResponse"
          }
        ]
      },
      "DeploymentHistoryApplicationResponse": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "commit": {
            "$ref": "#/components/schemas/CommitResponse"
          },
          "status": {
            "type": "string",
            "enum": [
              "READY",
              "BUILDING",
              "BUILD_ERROR",
              "BUILT",
              "DEPLOYMENT_QUEUED",
              "DEPLOYING",
              "DEPLOYMENT_ERROR",
              "DEPLOYED",
              "STOP_QUEUED",
              "STOPPING",
              "STOP_ERROR",
              "STOPPED",
              "DELETE_QUEUED",
              "DELETING",
              "DELETE_ERROR",
              "DELETED",
              "RUNNING",
              "RUNNING_ERROR"
            ]
          }
        },
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseResponse"
          }
        ]
      },
      "DeploymentHistoryDatabaseResponse": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "status": {
            "type": "string",
            "enum": [
              "READY",
              "BUILDING",
              "BUILD_ERROR",
              "BUILT",
              "DEPLOYMENT_QUEUED",
              "DEPLOYING",
              "DEPLOYMENT_ERROR",
              "DEPLOYED",
              "STOP_QUEUED",
              "STOPPING",
              "STOP_ERROR",
              "STOPPED",
              "DELETE_QUEUED",
              "DELETING",
              "DELETE_ERROR",
              "DELETED",
              "RUNNING",
              "RUNNING_ERROR"
            ]
          }
        },
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseResponse"
          }
        ]
      },
      "OrganizationResponseList": {
        "type": "object",
        "properties": {
          "results": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OrganizationResponse"
            }
          }
        }
      },
      "ClusterRequest": {
        "type": "object",
        "required": [
          "name",
          "cloud_provider",
          "region"
        ],
        "allOf": [
          {
            "$ref": "#/components/schemas/Cluster"
          },
          {
            "$ref": "#/components/schemas/ClusterFeatureRequest"
          }
        ]
      },
      "ClusterCloudProviderInfoResponse": {
        "type": "object",
        "properties": {
          "cloud_provider": {
            "type": "string",
            "enum": [
              "AWS",
              "DIGITAL_OCEAN",
              "SCALEWAY"
            ]
          },
          "credentials": {
            "type": "object",
            "properties": {
              "id": {
                "type": "string",
                "format": "uuid"
              },
              "name": {
                "type": "string"
              }
            }
          },
          "region": {
            "type": "string"
          }
        }
      },
      "ApplicationResponse": {
        "type": "object",
        "properties": {
          "environment": {
            "$ref": "#/components/schemas/ReferenceObject"
          },
          "git_repository": {
            "$ref": "#/components/schemas/ApplicationGitRepositoryResponse"
          },
          "maximum_cpu": {
            "type": "number",
            "description": "Maximum cpu that can be allocated to the application based on organization cluster configuration. unit is millicores (m). 1000m = 1 cpu",
            "default": 250,
            "example": 1250
          },
          "maximum_memory": {
            "type": "number",
            "description": "Maximum memory that can be allocated to the application based on organization cluster configuration. unit is MB. 1024 MB = 1GB",
            "default": 256,
            "example": 1024
          },
          "name": {
            "type": "string",
            "description": "name is case insensitive"
          },
          "description": {
            "type": "string",
            "description": "give a description to this application"
          },
          "build_mode": {
            "type": "string",
            "enum": [
              "DOCKER",
              "BUILDPACKS"
            ],
            "default": "BUILDPACKS",
            "description": "`DOCKER` requires `dockerfile_path`\n`BUILDPACKS` does not require any `dockerfile_path`\n"
          },
          "dockerfile_path": {
            "type": "string",
            "description": "The path of the associated Dockerfile. Only if you are using build_mode = DOCKER"
          },
          "buildpack_language": {
            "type": "string",
            "description": "Development language of the application",
            "enum": [
              "GO",
              "NODE_JS",
              "CLOJURE",
              "PYTHON",
              "JAVA",
              "GRADLE",
              "JVM",
              "GRAILS",
              "SCALA",
              "PLAY",
              "PHP",
              "GO"
            ]
          },
          "cpu": {
            "type": "number",
            "description": "unit is millicores (m). 1000m = 1 cpu",
            "default": 250,
            "example": 1250
          },
          "memory": {
            "type": "number",
            "description": "unit is MB. 1024 MB = 1GB",
            "default": 256,
            "example": 1024
          },
          "min_running_instances": {
            "type": "integer",
            "minimum": 0,
            "description": "Minimum number of instances running. This resource auto-scale based on the CPU and Memory consumption.\nNote: 0 means that there is no application running.\n",
            "default": 1
          },
          "max_running_instances": {
            "type": "integer",
            "maximum": -1,
            "description": "Maximum number of instances running. This resource auto-scale based on the CPU and Memory consumption.\nNote: -1 means that there is no limit.\n",
            "default": 1
          },
          "healthcheck": {
            "$ref": "#/components/schemas/Healthcheck"
          },
          "env_preview": {
            "type": "boolean",
            "description": "Specify if the environment preview option is activated or not for this application.\nIf activated, a preview environment will be automatically cloned at each pull request. \n",
            "default": true
          }
        },
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseResponse"
          },
          {
            "$ref": "#/components/schemas/ApplicationStorageResponse"
          },
          {
            "$ref": "#/components/schemas/ApplicationPortResponse"
          }
        ]
      },
      "CustomDomainRequest": {
        "type": "object",
        "required": [
          "domain"
        ],
        "properties": {
          "domain": {
            "type": "string",
            "description": "your custom domain",
            "example": "my.domain.tld"
          }
        }
      },
      "EnvironmentLogPaginatedResponseList": {
        "type": "object",
        "properties": {
          "results": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EnvironmentLogResponse"
            }
          }
        },
        "allOf": [
          {
            "$ref": "#/components/schemas/PaginationDataResponse"
          }
        ]
      },
      "ProjectDeploymentRuleRequest": {
        "type": "object",
        "required": [
          "environment_target"
        ],
        "properties": {
          "environment_target": {
            "type": "string",
            "description": "specify here a regex based on environment name that will target new environments after their creation",
            "example": "^feat"
          }
        },
        "allOf": [
          {
            "$ref": "#/components/schemas/DeploymentRuleRequest"
          }
        ]
      },
      "EnvironmentStatsResponse": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ReferenceObject"
          },
          {
            "$ref": "#/components/schemas/ServiceTotalNumber"
          }
        ]
      },
      "Name": {
        "type": "object",
        "required": [
          "name"
        ],
        "properties": {
          "name": {
            "type": "string"
          }
        }
      },
      "UnexpectedError": {
        "type": "object",
        "required": [
          "message"
        ],
        "properties": {
          "message": {
            "type": "string"
          }
        }
      },
      "InstanceResponseList": {
        "type": "object",
        "properties": {
          "results": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/InstanceResponse"
            }
          }
        }
      },
      "ClusterReadinessStatus": {
        "type": "object",
        "properties": {
          "is_ready": {
            "type": "boolean"
          }
        }
      },
      "CustomDomainResponse": {
        "type": "object",
        "properties": {
          "validation_domain": {
            "type": "string",
            "description": "URL provided by Qovery. You must create a CNAME on your DNS provider using that URL"
          },
          "status": {
            "type": "string",
            "enum": [
              "deploying",
              "checking",
              "ready",
              "error"
            ]
          }
        },
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseResponse"
          },
          {
            "$ref": "#/components/schemas/CustomDomainRequest"
          }
        ]
      },
      "AccountInfoResponse": {
        "type": "object",
        "required": [
          "username"
        ],
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "nickname": {
            "type": "string"
          },
          "first_name": {
            "type": "string"
          },
          "last_name": {
            "type": "string"
          },
          "profile_picture_url": {
            "type": "string"
          }
        }
      },
      "LogicalDatabaseRequest": {
        "type": "object",
        "required": [
          "name"
        ],
        "properties": {
          "name": {
            "type": "string",
            "description": "name is case insensitive"
          },
          "description": {
            "type": "string"
          }
        }
      },
      "ServiceResponse": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "description": "type of the service (application, database, job, gateway...)",
            "enum": [
              "APPLICATION",
              "DATABASE"
            ]
          },
          "name": {
            "type": "string",
            "description": "name of the service"
          },
          "id": {
            "type": "string",
            "description": "uuid of the associated service (application, database, job, gateway...)",
            "format": "uuid"
          },
          "deployed_commit_id": {
            "type": "string",
            "description": "Git commit ID corresponding to the deployed version of the application"
          },
          "last_updated_by": {
            "type": "string",
            "format": "uuid",
            "description": "uuid of the user that made the last update"
          },
          "consumed_resources_in_percent": {
            "type": "number",
            "description": "global overview of resources consumption of the service"
          },
          "service_typology": {
            "type": "string",
            "example": "container",
            "description": "describes the typology of service (container, postgresl, redis...)"
          },
          "service_version": {
            "type": "string",
            "description": "for databases this field exposes the database version",
            "example": "v12"
          },
          "to_update": {
            "type": "boolean"
          }
        },
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseResponse"
          }
        ]
      },
      "ApplicationResponseList": {
        "type": "object",
        "properties": {
          "results": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ApplicationResponse"
            }
          }
        }
      },
      "ApplicationNetworkResponse": {
        "type": "object",
        "properties": {
          "sticky-session": {
            "type": "boolean",
            "description": "Specify if the sticky session option (also called persistant session) is activated or not for this application.\nIf activated, user will be redirected by the load balancer to the same instance each time he access to the application. \n",
            "default": false
          }
        }
      },
      "ApplicationNetworkRequest": {
        "type": "object",
        "properties": {
          "sticky-session": {
            "type": "boolean",
            "description": "Specify if the sticky session option (also called persistant session) is activated or not for this application.\nIf activated, user will be redirected by the load balancer to the same instance each time he access to the application. \n",
            "default": false
          }
        }
      },
      "RemainingCredits": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/CostResponse"
          }
        ]
      },
      "BillingStatus": {
        "type": "object",
        "properties": {
          "is_valid": {
            "type": "boolean"
          },
          "message": {
            "type": "string"
          }
        }
      },
      "Cost": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/CostResponse"
          }
        ]
      },
      "ServiceResponseList": {
        "type": "object",
        "properties": {
          "results": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ServiceResponse"
            }
          }
        }
      },
      "EnvironmentDeploymentRuleResponse": {
        "type": "object",
        "properties": {
          "auto_deploy": {
            "type": "boolean",
            "default": true
          },
          "auto_stop": {
            "type": "boolean",
            "default": false
          },
          "timezone": {
            "type": "string",
            "nullable": false,
            "default": "Europe/London",
            "description": "specify value only if auto_stop = false"
          },
          "start_time": {
            "type": "string",
            "format": "date-time",
            "nullable": true,
            "description": "specify value only if auto_stop = false"
          },
          "stop_time": {
            "type": "string",
            "format": "date-time",
            "nullable": true,
            "description": "specify value only if auto_stop = false"
          },
          "weekdays": {
            "type": "array",
            "nullable": true,
            "description": "specify value only if auto_stop = false",
            "items": {
              "type": "string",
              "enum": [
                "MONDAY",
                "TUESDAY",
                "WEDNESDAY",
                "THURSDAY",
                "FRIDAY",
                "SATURDAY",
                "SUNDAY"
              ],
              "example": "MONDAY"
            }
          }
        },
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseResponse"
          }
        ]
      },
      "MetricMemoryDatapointResponse": {
        "type": "object",
        "required": [
          "created_at",
          "requested_in_mb",
          "consumed_in_mb",
          "consumed_in_percent"
        ],
        "properties": {
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "requested_in_mb": {
            "type": "integer"
          },
          "consumed_in_mb": {
            "type": "integer"
          },
          "consumed_in_percent": {
            "type": "number"
          }
        }
      },
      "EnvironmentResponseList": {
        "type": "object",
        "properties": {
          "results": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EnvironmentResponse"
            }
          }
        }
      },
      "LogicalDatabaseResponse": {
        "type": "object",
        "properties": {
          "database": {
            "$ref": "#/components/schemas/ReferenceObject"
          }
        },
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseResponse"
          },
          {
            "$ref": "#/components/schemas/LogicalDatabaseRequest"
          }
        ]
      },
      "CurrentCost": {
        "type": "object",
        "properties": {
          "plan": {
            "type": "string",
            "enum": [
              "COMMUNITY",
              "FREE",
              "PROFESSIONAL",
              "BUSINESS"
            ]
          },
          "remaining_trial_day": {
            "type": "integer",
            "description": "number of days remaining before the end of the trial period"
          },
          "remaining_credits": {
            "$ref": "#/components/schemas/RemainingCredits"
          },
          "cost": {
            "$ref": "#/components/schemas/Cost"
          }
        }
      },
      "PaidUsage": {
        "type": "object",
        "properties": {
          "paid_usage": {
            "$ref": "#/components/schemas/PaidUsageResponse"
          }
        }
      },
      "PaidUsageResponse": {
        "type": "object",
        "properties": {
          "max_deployments_per_month": {
            "type": "integer"
          },
          "consumed_deployments": {
            "type": "integer"
          },
          "monthly_plan_cost": {
            "type": "number"
          },
          "monthly_plan_cost_in_cents": {
            "type": "integer"
          },
          "remaining_deployments": {
            "type": "integer"
          },
          "deployments_exceeded": {
            "type": "boolean"
          },
          "renewal_at": {
            "type": "string",
            "readOnly": true,
            "format": "date-time",
            "required": false
          }
        }
      },
      "CommunityUsage": {
        "type": "object",
        "properties": {
          "community_usage": {
            "$ref": "#/components/schemas/CommunityUsageResponse"
          }
        }
      },
      "CommunityUsageResponse": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ProjectCurrentCostResponseList"
          }
        ]
      },
      "DatabaseVersionMode": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "example": "10.1"
          },
          "supported_mode": {
            "type": "string",
            "enum": [
              "CONTAINER",
              "MANAGED"
            ],
            "example": "CONTAINER"
          }
        }
      },
      "ProjectResponse": {
        "type": "object",
        "required": [
          "name"
        ],
        "properties": {
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "organization": {
            "$ref": "#/components/schemas/ReferenceObject"
          }
        },
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseResponse"
          }
        ]
      },
      "GitAuthProviderResponseList": {
        "type": "object",
        "properties": {
          "results": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GitAuthProviderResponse"
            }
          }
        }
      },
      "LinkResponseList": {
        "type": "object",
        "properties": {
          "results": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/LinkResponse"
            }
          }
        }
      },
      "ClusterRegionResponse": {
        "type": "object",
        "required": [
          "name",
          "country_code",
          "country",
          "city"
        ],
        "properties": {
          "name": {
            "type": "string"
          },
          "country_code": {
            "type": "string"
          },
          "country": {
            "type": "string"
          },
          "city": {
            "type": "string"
          }
        }
      },
      "CredentialsRequest": {
        "type": "object",
        "required": [
          "login",
          "password"
        ],
        "properties": {
          "login": {
            "type": "string"
          },
          "password": {
            "type": "string"
          }
        }
      },
      "BudgetResponse": {
        "type": "object",
        "properties": {
          "total_in_cents": {
            "type": "integer",
            "example": 30000
          },
          "total": {
            "type": "number",
            "example": 300
          },
          "currency_code": {
            "type": "string",
            "example": "USD"
          }
        }
      },
      "CreditCardResponse": {
        "type": "object",
        "required": [
          "id",
          "created_at",
          "expiry_month",
          "expiry_year",
          "last_digit",
          "is_expired"
        ],
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "expiry_month": {
            "type": "integer",
            "example": 6
          },
          "expiry_year": {
            "type": "integer",
            "example": 2025
          },
          "last_digit": {
            "type": "string",
            "example": "7890"
          },
          "is_expired": {
            "type": "boolean"
          }
        }
      },
      "BillingPeriod": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BillingStart"
          },
          {
            "$ref": "#/components/schemas/BillingEnd"
          }
        ]
      },
      "MetricStorageResponse": {
        "type": "object",
        "required": [
          "instance_name",
          "data"
        ],
        "properties": {
          "storage_id": {
            "type": "string"
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MetricStorageDatapointResponse"
            }
          }
        }
      },
      "EnvironmentVariableEditRequest": {
        "type": "object",
        "required": [
          "key",
          "value"
        ],
        "properties": {
          "key": {
            "type": "string",
            "description": "key is case sensitive"
          },
          "value": {
            "type": "string",
            "description": "value of the env variable."
          }
        }
      },
      "EnvironmentLogResponseList": {
        "type": "object",
        "properties": {
          "results": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EnvironmentLogResponse"
            }
          }
        }
      },
      "DeploymentHistoryEnvironmentPaginatedResponseList": {
        "type": "object",
        "properties": {
          "results": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DeploymentHistoryEnvironmentResponse"
            }
          }
        },
        "allOf": [
          {
            "$ref": "#/components/schemas/PaginationDataResponse"
          }
        ]
      },
      "AliasedSecret": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "key": {
            "type": "string",
            "example": "QOVERY_DATABASE_PSQL_NAME"
          },
          "scope": {
            "type": "string",
            "enum": [
              "BUILT_IN",
              "ENVIRONMENT",
              "PROJECT",
              "APPLICATION"
            ]
          }
        }
      },
      "EnvironmentVariableResponseList": {
        "type": "object",
        "properties": {
          "results": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EnvironmentVariableResponse"
            }
          }
        }
      },
      "ReferenceObject": {
        "type": "object",
        "required": [
          "id"
        ],
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "readOnly": true
          }
        }
      },
      "LogResponseList": {
        "type": "object",
        "properties": {
          "results": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/LogResponse"
            }
          }
        }
      },
      "MetricCPUDatapointResponseList": {
        "type": "object",
        "properties": {
          "results": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MetricCPUDatapointResponse"
            }
          }
        }
      },
      "MetricGenericResponseList": {
        "type": "object",
        "properties": {
          "results": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MetricGenericResponse"
            }
          }
        }
      },
      "EnvironmentRequest": {
        "type": "object",
        "required": [
          "name"
        ],
        "properties": {
          "name": {
            "type": "string",
            "description": "name is case insensitive"
          },
          "cluster": {
            "type": "string",
            "format": "uuid"
          },
          "mode": {
            "type": "string",
            "enum": [
              "PRODUCTION",
              "DEVELOPMENT"
            ]
          }
        }
      },
      "CloneRequest": {
        "type": "object",
        "required": [
          "name",
          "cluster"
        ],
        "properties": {
          "name": {
            "type": "string",
            "description": "name is case insensitive"
          },
          "cluster": {
            "type": "string",
            "format": "uuid"
          }
        }
      },
      "MetricMemoryDatapointResponseList": {
        "type": "object",
        "properties": {
          "results": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MetricMemoryDatapointResponse"
            }
          }
        }
      },
      "ClusterResponse": {
        "type": "object",
        "properties": {
          "estimated_cloud_provider_cost": {
            "type": "number",
            "description": "This is an estimation of the cost this cluster will represent on your cloud proider bill, based on your current configuration"
          },
          "status": {
            "type": "string",
            "enum": [
              "READY",
              "RUNNING",
              "WARNING"
            ]
          },
          "has_access": {
            "type": "boolean"
          },
          "version": {
            "type": "string"
          }
        },
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseResponse"
          },
          {
            "$ref": "#/components/schemas/Cluster"
          },
          {
            "$ref": "#/components/schemas/ClusterFeatureResponse"
          }
        ]
      },
      "BackupPaginatedResponseList": {
        "allOf": [
          {
            "$ref": "#/components/schemas/PaginationDataResponse"
          },
          {
            "$ref": "#/components/schemas/BackupResponseList"
          }
        ]
      },
      "TagRequest": {
        "type": "object",
        "required": [
          "name"
        ],
        "properties": {
          "name": {
            "type": "string"
          }
        }
      },
      "RewardClaimResponse": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "INVITATION"
            ]
          },
          "code": {
            "type": "string",
            "example": "xDowkWEl"
          }
        }
      },
      "ClusterRegionResponseList": {
        "type": "object",
        "properties": {
          "results": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ClusterRegionResponse"
            }
          }
        }
      },
      "CredentialsResponse": {
        "type": "object",
        "required": [
          "login",
          "password"
        ],
        "properties": {
          "login": {
            "type": "string"
          },
          "password": {
            "type": "string"
          }
        }
      },
      "LogicalDatabaseResponseList": {
        "type": "object",
        "properties": {
          "results": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/LogicalDatabaseResponse"
            }
          }
        }
      },
      "EnvironmentVariableRequest": {
        "type": "object",
        "required": [
          "key",
          "value"
        ],
        "properties": {
          "key": {
            "type": "string",
            "description": "key is case sensitive"
          },
          "value": {
            "type": "string",
            "description": "value of the env variable."
          }
        }
      },
      "ClusterCredentialsResponse": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "name": {
            "type": "string"
          }
        }
      },
      "ProjectDeploymentRuleResponseList": {
        "type": "object",
        "properties": {
          "results": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ProjectDeploymentRuleResponse"
            }
          }
        }
      },
      "MetricCPUResponseList": {
        "type": "object",
        "properties": {
          "results": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MetricCPUResponse"
            }
          }
        }
      },
      "DatabaseConfigurationResponseList": {
        "type": "object",
        "properties": {
          "results": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DatabaseConfigurationResponse"
            }
          }
        }
      },
      "ProjectStatsResponse": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ReferenceObject"
          },
          {
            "$ref": "#/components/schemas/ServiceTotalNumber"
          },
          {
            "$ref": "#/components/schemas/EnvironmentTotalNumber"
          }
        ]
      },
      "EnvironmentRestartRequest": {
        "type": "object",
        "properties": {
          "restart_db": {
            "type": "boolean",
            "default": false
          }
        }
      },
      "BillingEnd": {
        "type": "object",
        "properties": {
          "billing_ended_on": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "SecretResponseList": {
        "type": "object",
        "properties": {
          "results": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SecretResponse"
            }
          }
        }
      },
      "EnvironmentResponse": {
        "type": "object",
        "required": [
          "name",
          "cloud_provider",
          "mode"
        ],
        "properties": {
          "name": {
            "type": "string",
            "description": "name is case insensitive"
          },
          "project": {
            "$ref": "#/components/schemas/ReferenceObject"
          },
          "last_updated_by": {
            "type": "string",
            "format": "uuid",
            "description": "uuid of the user that made the last update"
          },
          "cloud_provider": {
            "type": "object",
            "properties": {
              "provider": {
                "type": "string",
                "example": "aws"
              },
              "cluster": {
                "type": "string",
                "example": "us-east-2"
              }
            }
          },
          "mode": {
            "type": "string",
            "enum": [
              "PRODUCTION",
              "DEVELOPMENT"
            ]
          }
        },
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseResponse"
          }
        ]
      },
      "CostResponse": {
        "type": "object",
        "required": [
          "total_in_cents",
          "total",
          "currency_code"
        ],
        "properties": {
          "total_in_cents": {
            "type": "integer",
            "example": 30000
          },
          "total": {
            "type": "number",
            "example": 300
          },
          "currency_code": {
            "type": "string",
            "example": "USD"
          }
        }
      },
      "MetricMemoryResponseList": {
        "type": "object",
        "properties": {
          "results": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MetricMemoryResponse"
            }
          }
        }
      },
      "CreditCardRequest": {
        "type": "object",
        "required": [
          "number",
          "cvv",
          "expiry_month",
          "expiry_year"
        ],
        "properties": {
          "number": {
            "type": "string"
          },
          "cvv": {
            "type": "string"
          },
          "expiry_month": {
            "type": "integer",
            "example": 6
          },
          "expiry_year": {
            "type": "integer",
            "example": 2025
          }
        }
      },
      "CustomDomainResponseList": {
        "type": "object",
        "properties": {
          "results": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CustomDomainResponse"
            }
          }
        }
      },
      "EnvironmentEditRequest": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          }
        }
      },
      "OrganizationCurrentCostResponse": {
        "allOf": [
          {
            "$ref": "#/components/schemas/CurrentCost"
          },
          {
            "$ref": "#/components/schemas/PaidUsage"
          },
          {
            "$ref": "#/components/schemas/CommunityUsage"
          }
        ]
      },
      "GitRepositoryResponseList": {
        "type": "object",
        "properties": {
          "results": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GitRepositoryResponse"
            }
          }
        }
      },
      "ApplicationPortResponse": {
        "type": "object",
        "properties": {
          "ports": {
            "type": "array",
            "items": {
              "type": "object",
              "required": [
                "internal_port",
                "protocol"
              ],
              "properties": {
                "id": {
                  "type": "string",
                  "format": "uuid"
                },
                "name": {
                  "type": "string"
                },
                "internal_port": {
                  "type": "integer",
                  "example": 8080,
                  "description": "The listening port of your application"
                },
                "external_port": {
                  "type": "integer",
                  "example": 8080,
                  "description": "The exposed port for your application. This is optional. If not set a default port will be used."
                },
                "publicly_accessible": {
                  "type": "boolean",
                  "description": "Expose the port to the world"
                },
                "protocol": {
                  "type": "string",
                  "default": "HTTP",
                  "enum": [
                    "HTTPS",
                    "HTTP",
                    "TCP",
                    "UDP"
                  ]
                }
              }
            }
          }
        }
      },
      "OrganizationCreditCodeRequest": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string"
          }
        }
      },
      "EnvironmentStatsResponseList": {
        "type": "object",
        "properties": {
          "results": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EnvironmentStatsResponse"
            }
          }
        }
      },
      "SecretResponse": {
        "type": "object",
        "required": [
          "scope"
        ],
        "properties": {
          "key": {
            "type": "string",
            "description": "key is case sensitive"
          },
          "overridden_secret": {
            "$ref": "#/components/schemas/OverriddenSecret"
          },
          "aliased_secret": {
            "$ref": "#/components/schemas/AliasedSecret"
          },
          "scope": {
            "type": "string",
            "enum": [
              "BUILT_IN",
              "ENVIRONMENT",
              "PROJECT",
              "APPLICATION"
            ]
          }
        },
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseResponse"
          }
        ]
      },
      "Status": {
        "type": "object",
        "required": [
          "state"
        ],
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "state": {
            "type": "string",
            "description": "Status is a state machine. It starts with `BUILDING` or `DEPLOYING` state (or `INITIALIZED`if auto-deploy is deactivated). Then finish with `*_ERROR` or any termination state.\n",
            "enum": [
              "INITIALIZED",
              "QUEUED",
              "BUILDING",
              "BUILD_ERROR",
              "BUILT",
              "DEPLOYING",
              "DEPLOYMENT_ERROR",
              "DEPLOYED",
              "STOPPING",
              "STOP_ERROR",
              "STOPPED",
              "DELETING",
              "DELETE_ERROR",
              "DELETED",
              "RUNNING",
              "RUNNING_ERROR"
            ]
          },
          "message": {
            "type": "string",
            "nullable": true,
            "description": "message related to the state"
          },
          "serviceDeploymentStatus": {
            "type": "string",
            "nullable": true,
            "enum": [
              "NEVER_DEPLOYED",
              "UP_TO_DATE",
              "OUT_OF_DATE"
            ]
          }
        }
      },
      "EnvironmentDatabasesCurrentMetricResponse": {
        "type": "object",
        "properties": {
          "database": {
            "type": "string",
            "format": "uuid"
          },
          "cpu": {
            "type": "object",
            "properties": {
              "requested_in_float": {
                "type": "number"
              },
              "consumed_in_number": {
                "type": "number"
              },
              "consumed_in_percent": {
                "type": "number"
              },
              "warning_threshold_in_percent": {
                "type": "number"
              },
              "alert_threshold_in_percent": {
                "type": "number"
              },
              "status": {
                "type": "string",
                "enum": [
                  "OK",
                  "Warning",
                  "Alert"
                ]
              }
            }
          },
          "memory": {
            "type": "object",
            "properties": {
              "requested_in_mb": {
                "type": "integer"
              },
              "consumed_in_mb": {
                "type": "integer"
              },
              "consumed_in_percent": {
                "type": "number"
              },
              "warning_threshold_in_percent": {
                "type": "number"
              },
              "alert_threshold_in_percent": {
                "type": "number"
              },
              "status": {
                "type": "string",
                "enum": [
                  "OK",
                  "Warning",
                  "Alert"
                ]
              }
            }
          },
          "storage": {
            "type": "object",
            "properties": {
              "requested_in_gb": {
                "type": "integer"
              },
              "consumed_in_gb": {
                "type": "integer"
              },
              "consumed_in_percent": {
                "type": "number"
              },
              "warning_threshold_in_percent": {
                "type": "number"
              },
              "alert_threshold_in_percent": {
                "type": "number"
              },
              "status": {
                "type": "string",
                "enum": [
                  "OK",
                  "Warning",
                  "Alert"
                ]
              }
            }
          }
        }
      },
      "BackupResponse": {
        "type": "object",
        "properties": {
          "status": {
            "$ref": "#/components/schemas/Status"
          }
        },
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseResponse"
          },
          {
            "$ref": "#/components/schemas/BackupRequest"
          }
        ]
      },
      "DeploymentRuleRequest": {
        "type": "object",
        "required": [
          "name",
          "mode",
          "cluster",
          "auto_stop"
        ],
        "properties": {
          "name": {
            "type": "string",
            "description": "name is case insensitive"
          },
          "description": {
            "type": "string"
          },
          "mode": {
            "type": "string",
            "enum": [
              "PRODUCTION",
              "DEVELOPMENT"
            ]
          },
          "cluster": {
            "type": "string",
            "format": "uuid"
          },
          "auto_deploy": {
            "type": "boolean",
            "default": true
          },
          "auto_stop": {
            "type": "boolean",
            "default": false
          },
          "timezone": {
            "type": "string",
            "nullable": false,
            "default": "Europe/London",
            "description": "specify value only if auto_stop = false"
          },
          "start_time": {
            "type": "string",
            "format": "date-time",
            "nullable": true,
            "description": "specify value only if auto_stop = false"
          },
          "stop_time": {
            "type": "string",
            "format": "date-time",
            "nullable": true,
            "description": "specify value only if auto_stop = false"
          },
          "weekdays": {
            "type": "array",
            "nullable": true,
            "description": "specify value only if auto_stop = false",
            "items": {
              "type": "string",
              "enum": [
                "MONDAY",
                "TUESDAY",
                "WEDNESDAY",
                "THURSDAY",
                "FRIDAY",
                "SATURDAY",
                "SUNDAY"
              ],
              "example": "MONDAY"
            }
          }
        }
      },
      "ProjectCurrentCostResponse": {
        "type": "object",
        "properties": {
          "environments": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GenericObjectCurrentCostResponse"
            }
          }
        },
        "allOf": [
          {
            "$ref": "#/components/schemas/GenericObjectCurrentCostResponse"
          }
        ]
      },
      "EnvironmentVariableResponse": {
        "type": "object",
        "required": [
          "scope"
        ],
        "properties": {
          "overridden_variable": {
            "type": "object",
            "properties": {
              "id": {
                "type": "string",
                "format": "uuid"
              },
              "key": {
                "type": "string"
              },
              "value": {
                "type": "string"
              },
              "scope": {
                "type": "string",
                "enum": [
                  "BUILT_IN",
                  "ENVIRONMENT",
                  "PROJECT",
                  "APPLICATION"
                ]
              }
            }
          },
          "aliased_variable": {
            "type": "object",
            "properties": {
              "id": {
                "type": "string",
                "format": "uuid"
              },
              "key": {
                "type": "string",
                "example": "QOVERY_DATABASE_PSQL_NAME"
              },
              "value": {
                "type": "string"
              },
              "scope": {
                "type": "string",
                "enum": [
                  "BUILT_IN",
                  "ENVIRONMENT",
                  "PROJECT",
                  "APPLICATION"
                ]
              }
            }
          },
          "scope": {
            "type": "string",
            "enum": [
              "BUILT_IN",
              "ENVIRONMENT",
              "PROJECT",
              "APPLICATION"
            ]
          },
          "service_name": {
            "type": "string"
          }
        },
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseResponse"
          },
          {
            "$ref": "#/components/schemas/EnvironmentVariableRequest"
          }
        ]
      },
      "ReferralResponse": {
        "type": "object",
        "properties": {
          "total_invited": {
            "type": "integer",
            "example": 2
          },
          "invitation_link": {
            "type": "string",
            "example": "https://join.qovery.com/xDowkWEl"
          }
        }
      },
      "BillingStart": {
        "type": "object",
        "properties": {
          "billing_started_on": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "UserResponseList": {
        "type": "object",
        "properties": {
          "results": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UserResponse"
            }
          }
        }
      },
      "CreditCardResponseList": {
        "type": "object",
        "properties": {
          "results": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CreditCardResponse"
            }
          }
        }
      },
      "ReferenceObjectStatusResponse": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ReferenceObject"
          },
          {
            "$ref": "#/components/schemas/Status"
          }
        ]
      },
      "ApplicationPortRequest": {
        "type": "object",
        "properties": {
          "ports": {
            "type": "array",
            "items": {
              "type": "object",
              "required": [
                "internal_port",
                "protocol"
              ],
              "properties": {
                "name": {
                  "type": "string"
                },
                "internal_port": {
                  "type": "integer",
                  "example": 8080,
                  "description": "The listening port of your application"
                },
                "external_port": {
                  "type": "integer",
                  "example": 8080,
                  "description": "The exposed port for your application. This is optional. If not set a default port will be used."
                },
                "publicly_accessible": {
                  "type": "boolean",
                  "description": "Expose the port to the world"
                },
                "protocol": {
                  "type": "string",
                  "default": "HTTP",
                  "enum": [
                    "HTTPS",
                    "HTTP",
                    "TCP",
                    "UDP"
                  ]
                }
              }
            }
          }
        }
      },
      "ClusterCredentialsResponseList": {
        "type": "object",
        "properties": {
          "results": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ClusterCredentialsResponse"
            }
          }
        }
      },
      "CommitPaginatedResponseList": {
        "type": "object",
        "properties": {
          "results": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CommitResponse"
            }
          }
        },
        "allOf": [
          {
            "$ref": "#/components/schemas/PaginationDataResponse"
          }
        ]
      },
      "ClusterResponseList": {
        "type": "object",
        "properties": {
          "results": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ClusterResponse"
            }
          }
        }
      },
      "OverriddenSecret": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "key": {
            "type": "string"
          },
          "scope": {
            "type": "string",
            "enum": [
              "BUILT_IN",
              "ENVIRONMENT",
              "PROJECT",
              "APPLICATION"
            ]
          }
        }
      },
      "BillingInfoResponse": {
        "type": "object",
        "required": [
          "first_name",
          "last_name",
          "email",
          "address",
          "zip",
          "country_code",
          "city"
        ],
        "properties": {
          "first_name": {
            "type": "string",
            "example": "Forrest"
          },
          "last_name": {
            "type": "string",
            "example": "Gump"
          },
          "email": {
            "type": "string",
            "format": "email",
            "example": "forrest@gump.com",
            "description": "email used for billing, and to receive all invoices by email"
          },
          "address": {
            "type": "string",
            "example": "21 Jenny Street"
          },
          "city": {
            "type": "string",
            "example": "Greenbow"
          },
          "zip": {
            "type": "string",
            "example": "36744"
          },
          "state": {
            "type": "string",
            "example": "Alabama",
            "description": "only for US"
          },
          "country_code": {
            "type": "string",
            "description": "ISO code of the country",
            "example": "US"
          },
          "company": {
            "type": "string",
            "description": "name of the company to bill"
          },
          "vat_number": {
            "type": "string"
          }
        }
      },
      "EnvironmentDeploymentRuleEditRequest": {
        "type": "object",
        "properties": {
          "auto_deploy": {
            "type": "boolean",
            "default": true
          },
          "auto_delete": {
            "type": "boolean",
            "default": false
          },
          "auto_stop": {
            "type": "boolean",
            "default": false
          },
          "timezone": {
            "type": "string",
            "nullable": false,
            "default": "Europe/London",
            "description": "specify value only if auto_stop = false"
          },
          "start_time": {
            "type": "string",
            "format": "date-time",
            "nullable": true,
            "description": "specify value only if auto_stop = false"
          },
          "stop_time": {
            "type": "string",
            "format": "date-time",
            "nullable": true,
            "description": "specify value only if auto_stop = false"
          },
          "weekdays": {
            "type": "array",
            "nullable": true,
            "description": "specify value only if auto_stop = false",
            "items": {
              "type": "string",
              "enum": [
                "MONDAY",
                "TUESDAY",
                "WEDNESDAY",
                "THURSDAY",
                "FRIDAY",
                "SATURDAY",
                "SUNDAY"
              ],
              "example": "MONDAY"
            }
          }
        }
      },
      "ReferenceObjectStatusResponseList": {
        "type": "object",
        "properties": {
          "results": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ReferenceObjectStatusResponse"
            }
          }
        }
      },
      "UserResponse": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "readOnly": true
          },
          "created_at": {
            "type": "string",
            "readOnly": true,
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "readOnly": true,
            "format": "date-time"
          },
          "first_name": {
            "type": "string"
          },
          "last_name": {
            "type": "string"
          },
          "email": {
            "type": "string",
            "format": "email"
          },
          "profile_picture_url": {
            "type": "string",
            "format": "uri"
          }
        }
      },
      "StorageDiskResponse": {
        "type": "object",
        "properties": {
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "storage_id": {
            "type": "string"
          },
          "requested_in_gb": {
            "type": "integer"
          },
          "consumed_in_gb": {
            "type": "number"
          },
          "consumed_in_percent": {
            "type": "number"
          },
          "warning_threshold_in_percent": {
            "type": "number"
          },
          "alert_threshold_in_percent": {
            "type": "number"
          },
          "status": {
            "type": "string",
            "enum": [
              "OK",
              "Warning",
              "Alert"
            ]
          }
        }
      },
      "ApplicationGitRepositoryResponse": {
        "type": "object",
        "properties": {
          "has_access": {
            "type": "boolean"
          },
          "provider": {
            "type": "string",
            "enum": [
              "GITHUB",
              "GITLAB"
            ]
          },
          "owner": {
            "type": "string",
            "example": "John Doe"
          },
          "name": {
            "type": "string",
            "description": "repository name",
            "example": "simple-node-app"
          },
          "deployed_commit_id": {
            "type": "string",
            "description": "Git commit ID corresponding to the deployed version of the app"
          },
          "deployed_commit_date": {
            "type": "string",
            "readOnly": true,
            "format": "date-time",
            "description": "Git commit date corresponding to the deployed version of the app"
          },
          "deployed_commit_contributor": {
            "type": "string",
            "format": "uuid",
            "description": "Git commit user corresponding to the deployed version of the app"
          },
          "deployed_commit_tag": {
            "type": "string",
            "example": "v1.0.1"
          }
        }
      },
      "TagResponseList": {
        "type": "object",
        "properties": {
          "results": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TagResponse"
            }
          }
        }
      },
      "SecretEditRequest": {
        "type": "object",
        "properties": {
          "value": {
            "type": "string"
          },
          "key": {
            "type": "string"
          }
        }
      },
      "EventPaginatedResponseList": {
        "type": "object",
        "properties": {
          "results": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EventResponse"
            }
          }
        },
        "allOf": [
          {
            "$ref": "#/components/schemas/PaginationDataResponse"
          }
        ]
      },
      "InstanceResponse": {
        "type": "object",
        "properties": {
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "name": {
            "type": "string",
            "example": "instance 1"
          },
          "cpu": {
            "type": "object",
            "properties": {
              "requested_in_float": {
                "type": "number"
              },
              "consumed_in_number": {
                "type": "number"
              },
              "consumed_in_percent": {
                "type": "number"
              },
              "warning_threshold_in_percent": {
                "type": "number"
              },
              "alert_threshold_in_percent": {
                "type": "number"
              },
              "status": {
                "type": "string",
                "enum": [
                  "OK",
                  "Warning",
                  "Alert"
                ]
              }
            }
          },
          "memory": {
            "type": "object",
            "properties": {
              "requested_in_mb": {
                "type": "integer"
              },
              "consumed_in_mb": {
                "type": "integer"
              },
              "consumed_in_percent": {
                "type": "number"
              },
              "warning_threshold_in_percent": {
                "type": "number"
              },
              "alert_threshold_in_percent": {
                "type": "number"
              },
              "status": {
                "type": "string",
                "enum": [
                  "OK",
                  "Warning",
                  "Alert"
                ]
              }
            }
          }
        }
      },
      "MetricStorageResponseList": {
        "type": "object",
        "properties": {
          "results": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MetricStorageResponse"
            }
          }
        }
      },
      "MetricRestartResponse": {
        "type": "object",
        "properties": {
          "results": {
            "type": "array",
            "items": {
              "type": "object",
              "required": [
                "datetime",
                "message"
              ],
              "properties": {
                "datetime": {
                  "type": "string",
                  "format": "date-time"
                },
                "message": {
                  "type": "string"
                }
              }
            }
          }
        }
      },
      "EventResponse": {
        "type": "object",
        "properties": {
          "user": {
            "$ref": "#/components/schemas/UserResponse"
          },
          "commit": {
            "$ref": "#/components/schemas/CommitResponse"
          },
          "status": {
            "$ref": "#/components/schemas/Status"
          },
          "type": {
            "type": "string",
            "description": "DRAFT - we have to specify here all the possible events"
          },
          "log": {
            "$ref": "#/components/schemas/ReferenceObject"
          }
        },
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseResponse"
          }
        ]
      },
      "EnvironmentDatabasesCurrentMetricResponseList": {
        "type": "object",
        "properties": {
          "results": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EnvironmentDatabasesCurrentMetricResponse"
            }
          }
        }
      },
      "ApplicationCurrentScaleResponse": {
        "type": "object",
        "properties": {
          "min": {
            "type": "integer"
          },
          "max": {
            "type": "integer"
          },
          "running": {
            "type": "integer"
          },
          "running_in_percent": {
            "type": "number"
          },
          "warning_threshold_in_percent": {
            "type": "number"
          },
          "alert_threshold_in_percent": {
            "type": "number"
          },
          "status": {
            "type": "string",
            "enum": [
              "OK",
              "Warning",
              "Alert"
            ]
          },
          "updated_at": {
            "type": "string",
            "readOnly": true,
            "format": "date-time"
          }
        }
      },
      "VersionResponseList": {
        "type": "object",
        "properties": {
          "results": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/VersionResponse"
            }
          }
        }
      },
      "CommitResponseList": {
        "type": "object",
        "properties": {
          "results": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CommitResponse"
            }
          }
        }
      },
      "EnvironmentApplicationsCurrentScaleResponse": {
        "type": "object",
        "properties": {
          "application": {
            "type": "string",
            "format": "uuid"
          },
          "min": {
            "type": "integer"
          },
          "max": {
            "type": "integer"
          },
          "running": {
            "type": "integer"
          },
          "running_in_percent": {
            "type": "number"
          },
          "warning_threshold_in_percent": {
            "type": "number"
          },
          "alert_threshold_in_percent": {
            "type": "number"
          },
          "status": {
            "type": "string",
            "enum": [
              "OK",
              "Warning",
              "Alert"
            ]
          },
          "updated_at": {
            "type": "string",
            "readOnly": true,
            "format": "date-time"
          }
        }
      },
      "TagResponse": {
        "type": "object",
        "required": [
          "name"
        ],
        "properties": {
          "name": {
            "type": "string"
          },
          "id": {
            "type": "string",
            "format": "uuid"
          }
        }
      },
      "EnvironmentApplicationsStorageResponseList": {
        "type": "object",
        "properties": {
          "results": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EnvironmentApplicationsStorageResponse"
            }
          }
        }
      },
      "EnvironmentApplicationsSupportedLanguageList": {
        "type": "object",
        "properties": {
          "results": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EnvironmentApplicationsSupportedLanguage"
            }
          }
        }
      },
      "EnvironmentApplicationsSupportedLanguage": {
        "type": "object",
        "required": [
          "name"
        ],
        "properties": {
          "name": {
            "type": "string",
            "example": "Ruby"
          }
        }
      },
      "DatabaseConfigurationResponse": {
        "type": "object",
        "properties": {
          "database_type": {
            "type": "string",
            "example": "REDIS",
            "enum": [
              "POSTGRESQL",
              "MYSQL",
              "MONGODB",
              "REDIS"
            ]
          },
          "version": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DatabaseVersionMode"
            }
          }
        }
      },
      "DatabaseCurrentMetricResponse": {
        "type": "object",
        "properties": {
          "cpu": {
            "type": "object",
            "properties": {
              "requested_in_float": {
                "type": "number"
              },
              "consumed_in_number": {
                "type": "number"
              },
              "consumed_in_percent": {
                "type": "number"
              },
              "warning_threshold_in_percent": {
                "type": "number"
              },
              "alert_threshold_in_percent": {
                "type": "number"
              },
              "status": {
                "type": "string",
                "enum": [
                  "OK",
                  "Warning",
                  "Alert"
                ]
              }
            }
          },
          "memory": {
            "type": "object",
            "properties": {
              "requested_in_mb": {
                "type": "integer"
              },
              "consumed_in_mb": {
                "type": "integer"
              },
              "consumed_in_percent": {
                "type": "number"
              },
              "warning_threshold_in_percent": {
                "type": "number"
              },
              "alert_threshold_in_percent": {
                "type": "number"
              },
              "status": {
                "type": "string",
                "enum": [
                  "OK",
                  "Warning",
                  "Alert"
                ]
              }
            }
          },
          "storage": {
            "type": "object",
            "properties": {
              "requested_in_gb": {
                "type": "integer"
              },
              "consumed_in_gb": {
                "type": "integer"
              },
              "consumed_in_percent": {
                "type": "number"
              },
              "warning_threshold_in_percent": {
                "type": "number"
              },
              "alert_threshold_in_percent": {
                "type": "number"
              },
              "status": {
                "type": "string",
                "enum": [
                  "OK",
                  "Warning",
                  "Alert"
                ]
              }
            }
          }
        }
      },
      "GitRepositoryResponse": {
        "type": "object",
        "required": [
          "name",
          "url",
          "id"
        ],
        "properties": {
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string",
            "example": "simple-node-app"
          },
          "url": {
            "type": "string",
            "example": "https://github.com/Qovery/simple-node-app"
          },
          "default_branch": {
            "type": "string",
            "example": "master"
          },
          "is_private": {
            "type": "boolean"
          }
        }
      },
      "LogPaginatedResponseList": {
        "type": "object",
        "properties": {
          "results": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/LogResponse"
            }
          }
        },
        "allOf": [
          {
            "$ref": "#/components/schemas/PaginationDataResponse"
          }
        ]
      },
      "StorageDiskResponseList": {
        "type": "object",
        "properties": {
          "results": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/StorageDiskResponse"
            }
          }
        }
      },
      "CostRangeResponse": {
        "type": "object",
        "required": [
          "total_in_cents",
          "total",
          "currency_code"
        ],
        "properties": {
          "min_cost_in_cents": {
            "type": "integer",
            "example": 15000
          },
          "min_cost": {
            "type": "number",
            "example": 150
          },
          "max_cost_in_cents": {
            "type": "integer",
            "example": 30000
          },
          "max_cost": {
            "type": "number",
            "example": 300
          },
          "currency_code": {
            "type": "string",
            "example": "USD"
          }
        }
      },
      "CloudProviderResponse": {
        "type": "object",
        "properties": {
          "short_name": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "logo_url": {
            "type": "string"
          },
          "regions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ClusterRegionResponse"
            }
          }
        }
      },
      "InviteMemberResponse": {
        "type": "object",
        "required": [
          "email",
          "role",
          "invitation_link",
          "invitation_status",
          "inviter"
        ],
        "properties": {
          "email": {
            "type": "string",
            "format": "email"
          },
          "role": {
            "type": "string",
            "enum": [
              "ADMIN",
              "DEVELOPER",
              "VIEWER"
            ]
          },
          "invitation_link": {
            "type": "string",
            "format": "uri"
          },
          "invitation_status": {
            "type": "string",
            "enum": [
              "PENDING",
              "EXPIRED"
            ]
          },
          "inviter": {
            "type": "string"
          },
          "logo_url": {
            "type": "string",
            "format": "uri"
          }
        },
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseResponse"
          }
        ]
      },
      "TransferOwnershipRequest": {
        "type": "object",
        "required": [
          "user_id"
        ],
        "properties": {
          "user_id": {
            "type": "string",
            "format": "uuid"
          }
        }
      },
      "CluserCredentialsResponse": {
        "$ref": "#/components/schemas/ClusterCredentialsRequest"
      },
      "AwsCredentialsRequest": {
        "type": "object",
        "required": [
          "name"
        ],
        "properties": {
          "name": {
            "type": "string"
          },
          "access_key_id": {
            "type": "string"
          },
          "secret_access_key": {
            "type": "string"
          }
        }
      },
      "DoCredentialsRequest": {
        "type": "object",
        "required": [
          "name"
        ],
        "properties": {
          "name": {
            "type": "string"
          },
          "token": {
            "type": "string"
          },
          "spaces_access_id": {
            "type": "string"
          },
          "spaces_secret_key": {
            "type": "string"
          }
        }
      },
      "ScalewayCredentialsRequest": {
        "type": "object",
        "required": [
          "name"
        ],
        "properties": {
          "name": {
            "type": "string"
          },
          "scaleway_access_key": {
            "type": "string"
          },
          "scaleway_secret_key": {
            "type": "string"
          },
          "scaleway_project_id": {
            "type": "string"
          }
        }
      },
      "InviteMemberRequest": {
        "type": "object",
        "required": [
          "email",
          "role"
        ],
        "properties": {
          "email": {
            "type": "string"
          },
          "role": {
            "type": "string",
            "enum": [
              "ADMIN",
              "DEVELOPER",
              "VIEWER"
            ]
          }
        }
      },
      "ClusterFeatureRequest": {
        "type": "object",
        "properties": {
          "features": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "string",
                  "format": "uuid",
                  "nullable": false
                },
                "value": {
                  "type": "string",
                  "nullable": true
                }
              }
            }
          }
        }
      },
      "EnvironmentApplicationsSupportedLanguageResponse": {
        "$ref": "#/components/schemas/EnvironmentApplicationsSupportedLanguage"
      },
      "EnvironmentApplicationsSupportedLanguageResponseList": {
        "$ref": "#/components/schemas/EnvironmentApplicationsSupportedLanguageList"
      },
      "Cluster": {
        "type": "object",
        "required": [
          "name",
          "cloud_provider",
          "region"
        ],
        "properties": {
          "name": {
            "type": "string",
            "description": "name is case-insensitive"
          },
          "description": {
            "type": "string"
          },
          "cloud_provider": {
            "type": "string",
            "enum": [
              "AWS",
              "DIGITAL_OCEAN",
              "SCALEWAY"
            ]
          },
          "region": {
            "type": "string"
          },
          "auto_update": {
            "type": "boolean"
          },
          "cpu": {
            "type": "number",
            "description": "unit is millicores (m). 1000m = 1 cpu",
            "default": 250,
            "example": 1250
          },
          "memory": {
            "type": "number",
            "description": "unit is MB. 1024 MB = 1GB",
            "default": 256,
            "example": 1024
          },
          "min_running_nodes": {
            "type": "integer",
            "default": 1
          },
          "max_running_nodes": {
            "type": "integer",
            "default": 1
          }
        }
      },
      "ClusterFeatureResponse": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "title": {
            "type": "string",
            "nullable": false
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "cost_per_month_in_cents": {
            "type": "integer",
            "nullable": true,
            "example": 9900
          },
          "cost_per_month": {
            "type": "number",
            "nullable": true,
            "example": 99
          },
          "currency_code": {
            "type": "string",
            "nullable": true,
            "example": "USD"
          },
          "value_type": {
            "type": "string",
            "nullable": false,
            "enum": [
              "BOOLEAN"
            ]
          },
          "value": {
            "type": "string",
            "nullable": true
          },
          "is_value_updatable": {
            "type": "boolean",
            "default": false
          },
          "accepted_values": {
            "nullable": false,
            "type": "array"
          }
        }
      },
      "ClusterRoutingTableResponse": {
        "type": "object",
        "properties": {
          "results": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "destination": {
                  "type": "string"
                },
                "target": {
                  "type": "string"
                },
                "description": {
                  "type": "string"
                }
              }
            }
          }
        }
      },
      "ClusterRoutingTableRequest": {
        "type": "object",
        "required": [
          "routes"
        ],
        "properties": {
          "routes": {
            "type": "array",
            "items": {
              "type": "object",
              "required": [
                "destination",
                "target",
                "description"
              ],
              "properties": {
                "destination": {
                  "type": "string"
                },
                "target": {
                  "type": "string"
                },
                "description": {
                  "type": "string"
                }
              }
            }
          }
        }
      },
      "ClusterFeatureResponseList": {
        "type": "object",
        "properties": {
          "results": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ClusterFeatureResponse"
            }
          }
        }
      },
      "InviteMemberResponseList": {
        "type": "object",
        "properties": {
          "results": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/InviteMemberResponse"
            }
          }
        }
      },
      "CloudProviderResponseList": {
        "type": "object",
        "properties": {
          "results": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CloudProviderResponse"
            }
          }
        }
      }
    },
    "responses": {
      "204": {
        "description": "no content"
      },
      "400": {
        "description": "Bad request"
      },
      "401": {
        "description": "Access token is missing or invalid"
      },
      "403": {
        "description": "Access forbidden"
      },
      "404": {
        "description": "Resource not found"
      },
      "409": {
        "description": "Conflict"
      },
      "204-deletion": {
        "description": "The resource was deleted successfully"
      }
    },
    "securitySchemes": {
      "bearerAuth": {
        "type": "http",
        "scheme": "bearer",
        "bearerFormat": "JWT"
      }
    }
  },
  "security": [
    {
      "bearerAuth": []
    }
  ]
}