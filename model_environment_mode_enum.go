/*
Qovery API

- Qovery is the fastest way to deploy your full-stack apps on any Cloud provider. - ℹ️ The API is stable and still in development.

API version: 1.0.3
Contact: support+api+documentation@qovery.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package qovery

import (
	"encoding/json"
	"fmt"
)

// EnvironmentModeEnum the model 'EnvironmentModeEnum'
type EnvironmentModeEnum string

// List of EnvironmentModeEnum
const (
	ENVIRONMENTMODEENUM_PRODUCTION  EnvironmentModeEnum = "PRODUCTION"
	ENVIRONMENTMODEENUM_DEVELOPMENT EnvironmentModeEnum = "DEVELOPMENT"
	ENVIRONMENTMODEENUM_STAGING     EnvironmentModeEnum = "STAGING"
	ENVIRONMENTMODEENUM_PREVIEW     EnvironmentModeEnum = "PREVIEW"
)

// All allowed values of EnvironmentModeEnum enum
var AllowedEnvironmentModeEnumEnumValues = []EnvironmentModeEnum{
	"PRODUCTION",
	"DEVELOPMENT",
	"STAGING",
	"PREVIEW",
}

func (v *EnvironmentModeEnum) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := EnvironmentModeEnum(value)
	for _, existing := range AllowedEnvironmentModeEnumEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid EnvironmentModeEnum", value)
}

// NewEnvironmentModeEnumFromValue returns a pointer to a valid EnvironmentModeEnum
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewEnvironmentModeEnumFromValue(v string) (*EnvironmentModeEnum, error) {
	ev := EnvironmentModeEnum(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for EnvironmentModeEnum: valid values are %v", v, AllowedEnvironmentModeEnumEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v EnvironmentModeEnum) IsValid() bool {
	for _, existing := range AllowedEnvironmentModeEnumEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to EnvironmentModeEnum value
func (v EnvironmentModeEnum) Ptr() *EnvironmentModeEnum {
	return &v
}

type NullableEnvironmentModeEnum struct {
	value *EnvironmentModeEnum
	isSet bool
}

func (v NullableEnvironmentModeEnum) Get() *EnvironmentModeEnum {
	return v.value
}

func (v *NullableEnvironmentModeEnum) Set(val *EnvironmentModeEnum) {
	v.value = val
	v.isSet = true
}

func (v NullableEnvironmentModeEnum) IsSet() bool {
	return v.isSet
}

func (v *NullableEnvironmentModeEnum) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEnvironmentModeEnum(val *EnvironmentModeEnum) *NullableEnvironmentModeEnum {
	return &NullableEnvironmentModeEnum{value: val, isSet: true}
}

func (v NullableEnvironmentModeEnum) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEnvironmentModeEnum) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
