/*
Qovery API

- Qovery is the fastest way to deploy your full-stack apps on any Cloud provider. - ℹ️ The API is stable and still in development.

API version: 1.0.3
Contact: support+api+documentation@qovery.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package qovery

import (
	"encoding/json"
	"fmt"
)

// ServiceDeploymentStatusEnum the model 'ServiceDeploymentStatusEnum'
type ServiceDeploymentStatusEnum string

// List of ServiceDeploymentStatusEnum
const (
	SERVICEDEPLOYMENTSTATUSENUM_NEVER_DEPLOYED ServiceDeploymentStatusEnum = "NEVER_DEPLOYED"
	SERVICEDEPLOYMENTSTATUSENUM_OUT_OF_DATE    ServiceDeploymentStatusEnum = "OUT_OF_DATE"
	SERVICEDEPLOYMENTSTATUSENUM_UP_TO_DATE     ServiceDeploymentStatusEnum = "UP_TO_DATE"
)

// All allowed values of ServiceDeploymentStatusEnum enum
var AllowedServiceDeploymentStatusEnumEnumValues = []ServiceDeploymentStatusEnum{
	"NEVER_DEPLOYED",
	"OUT_OF_DATE",
	"UP_TO_DATE",
}

func (v *ServiceDeploymentStatusEnum) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ServiceDeploymentStatusEnum(value)
	for _, existing := range AllowedServiceDeploymentStatusEnumEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ServiceDeploymentStatusEnum", value)
}

// NewServiceDeploymentStatusEnumFromValue returns a pointer to a valid ServiceDeploymentStatusEnum
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewServiceDeploymentStatusEnumFromValue(v string) (*ServiceDeploymentStatusEnum, error) {
	ev := ServiceDeploymentStatusEnum(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ServiceDeploymentStatusEnum: valid values are %v", v, AllowedServiceDeploymentStatusEnumEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ServiceDeploymentStatusEnum) IsValid() bool {
	for _, existing := range AllowedServiceDeploymentStatusEnumEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to ServiceDeploymentStatusEnum value
func (v ServiceDeploymentStatusEnum) Ptr() *ServiceDeploymentStatusEnum {
	return &v
}

type NullableServiceDeploymentStatusEnum struct {
	value *ServiceDeploymentStatusEnum
	isSet bool
}

func (v NullableServiceDeploymentStatusEnum) Get() *ServiceDeploymentStatusEnum {
	return v.value
}

func (v *NullableServiceDeploymentStatusEnum) Set(val *ServiceDeploymentStatusEnum) {
	v.value = val
	v.isSet = true
}

func (v NullableServiceDeploymentStatusEnum) IsSet() bool {
	return v.isSet
}

func (v *NullableServiceDeploymentStatusEnum) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableServiceDeploymentStatusEnum(val *ServiceDeploymentStatusEnum) *NullableServiceDeploymentStatusEnum {
	return &NullableServiceDeploymentStatusEnum{value: val, isSet: true}
}

func (v NullableServiceDeploymentStatusEnum) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableServiceDeploymentStatusEnum) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
