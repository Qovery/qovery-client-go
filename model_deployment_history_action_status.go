/*
Qovery API

- Qovery is the fastest way to deploy your full-stack apps on any Cloud provider. - ℹ️ The API is stable and still in development.

API version: 1.0.4
Contact: support+api+documentation@qovery.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package qovery

import (
	"encoding/json"
	"fmt"
)

// DeploymentHistoryActionStatus the model 'DeploymentHistoryActionStatus'
type DeploymentHistoryActionStatus string

// List of DeploymentHistoryActionStatus
const (
	DEPLOYMENTHISTORYACTIONSTATUS_QUEUED    DeploymentHistoryActionStatus = "QUEUED"
	DEPLOYMENTHISTORYACTIONSTATUS_ONGOING   DeploymentHistoryActionStatus = "ONGOING"
	DEPLOYMENTHISTORYACTIONSTATUS_SUCCESS   DeploymentHistoryActionStatus = "SUCCESS"
	DEPLOYMENTHISTORYACTIONSTATUS_ERROR     DeploymentHistoryActionStatus = "ERROR"
	DEPLOYMENTHISTORYACTIONSTATUS_CANCELED  DeploymentHistoryActionStatus = "CANCELED"
	DEPLOYMENTHISTORYACTIONSTATUS_CANCELING DeploymentHistoryActionStatus = "CANCELING"
	DEPLOYMENTHISTORYACTIONSTATUS_NEVER     DeploymentHistoryActionStatus = "NEVER"
)

// All allowed values of DeploymentHistoryActionStatus enum
var AllowedDeploymentHistoryActionStatusEnumValues = []DeploymentHistoryActionStatus{
	"QUEUED",
	"ONGOING",
	"SUCCESS",
	"ERROR",
	"CANCELED",
	"CANCELING",
	"NEVER",
}

func (v *DeploymentHistoryActionStatus) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := DeploymentHistoryActionStatus(value)
	for _, existing := range AllowedDeploymentHistoryActionStatusEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid DeploymentHistoryActionStatus", value)
}

// NewDeploymentHistoryActionStatusFromValue returns a pointer to a valid DeploymentHistoryActionStatus
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewDeploymentHistoryActionStatusFromValue(v string) (*DeploymentHistoryActionStatus, error) {
	ev := DeploymentHistoryActionStatus(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for DeploymentHistoryActionStatus: valid values are %v", v, AllowedDeploymentHistoryActionStatusEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v DeploymentHistoryActionStatus) IsValid() bool {
	for _, existing := range AllowedDeploymentHistoryActionStatusEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to DeploymentHistoryActionStatus value
func (v DeploymentHistoryActionStatus) Ptr() *DeploymentHistoryActionStatus {
	return &v
}

type NullableDeploymentHistoryActionStatus struct {
	value *DeploymentHistoryActionStatus
	isSet bool
}

func (v NullableDeploymentHistoryActionStatus) Get() *DeploymentHistoryActionStatus {
	return v.value
}

func (v *NullableDeploymentHistoryActionStatus) Set(val *DeploymentHistoryActionStatus) {
	v.value = val
	v.isSet = true
}

func (v NullableDeploymentHistoryActionStatus) IsSet() bool {
	return v.isSet
}

func (v *NullableDeploymentHistoryActionStatus) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDeploymentHistoryActionStatus(val *DeploymentHistoryActionStatus) *NullableDeploymentHistoryActionStatus {
	return &NullableDeploymentHistoryActionStatus{value: val, isSet: true}
}

func (v NullableDeploymentHistoryActionStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDeploymentHistoryActionStatus) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
