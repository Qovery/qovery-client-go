/*
Qovery API

- Qovery is the fastest way to deploy your full-stack apps on any Cloud provider. - ℹ️ The API is stable and still in development.

API version: 1.0.3
Contact: support+api+documentation@qovery.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package qovery

import (
	"encoding/json"
)

// checks if the HelmResponseAllOfSource type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &HelmResponseAllOfSource{}

// HelmResponseAllOfSource struct for HelmResponseAllOfSource
type HelmResponseAllOfSource struct {
	Git        NullableHelmRequestAllOfSourceGit         `json:"git,omitempty"`
	Repository NullableHelmResponseAllOfSourceRepository `json:"repository,omitempty"`
}

// NewHelmResponseAllOfSource instantiates a new HelmResponseAllOfSource object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewHelmResponseAllOfSource() *HelmResponseAllOfSource {
	this := HelmResponseAllOfSource{}
	return &this
}

// NewHelmResponseAllOfSourceWithDefaults instantiates a new HelmResponseAllOfSource object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewHelmResponseAllOfSourceWithDefaults() *HelmResponseAllOfSource {
	this := HelmResponseAllOfSource{}
	return &this
}

// GetGit returns the Git field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *HelmResponseAllOfSource) GetGit() HelmRequestAllOfSourceGit {
	if o == nil || IsNil(o.Git.Get()) {
		var ret HelmRequestAllOfSourceGit
		return ret
	}
	return *o.Git.Get()
}

// GetGitOk returns a tuple with the Git field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *HelmResponseAllOfSource) GetGitOk() (*HelmRequestAllOfSourceGit, bool) {
	if o == nil {
		return nil, false
	}
	return o.Git.Get(), o.Git.IsSet()
}

// HasGit returns a boolean if a field has been set.
func (o *HelmResponseAllOfSource) HasGit() bool {
	if o != nil && o.Git.IsSet() {
		return true
	}

	return false
}

// SetGit gets a reference to the given NullableHelmRequestAllOfSourceGit and assigns it to the Git field.
func (o *HelmResponseAllOfSource) SetGit(v HelmRequestAllOfSourceGit) {
	o.Git.Set(&v)
}

// SetGitNil sets the value for Git to be an explicit nil
func (o *HelmResponseAllOfSource) SetGitNil() {
	o.Git.Set(nil)
}

// UnsetGit ensures that no value is present for Git, not even an explicit nil
func (o *HelmResponseAllOfSource) UnsetGit() {
	o.Git.Unset()
}

// GetRepository returns the Repository field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *HelmResponseAllOfSource) GetRepository() HelmResponseAllOfSourceRepository {
	if o == nil || IsNil(o.Repository.Get()) {
		var ret HelmResponseAllOfSourceRepository
		return ret
	}
	return *o.Repository.Get()
}

// GetRepositoryOk returns a tuple with the Repository field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *HelmResponseAllOfSource) GetRepositoryOk() (*HelmResponseAllOfSourceRepository, bool) {
	if o == nil {
		return nil, false
	}
	return o.Repository.Get(), o.Repository.IsSet()
}

// HasRepository returns a boolean if a field has been set.
func (o *HelmResponseAllOfSource) HasRepository() bool {
	if o != nil && o.Repository.IsSet() {
		return true
	}

	return false
}

// SetRepository gets a reference to the given NullableHelmResponseAllOfSourceRepository and assigns it to the Repository field.
func (o *HelmResponseAllOfSource) SetRepository(v HelmResponseAllOfSourceRepository) {
	o.Repository.Set(&v)
}

// SetRepositoryNil sets the value for Repository to be an explicit nil
func (o *HelmResponseAllOfSource) SetRepositoryNil() {
	o.Repository.Set(nil)
}

// UnsetRepository ensures that no value is present for Repository, not even an explicit nil
func (o *HelmResponseAllOfSource) UnsetRepository() {
	o.Repository.Unset()
}

func (o HelmResponseAllOfSource) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o HelmResponseAllOfSource) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.Git.IsSet() {
		toSerialize["git"] = o.Git.Get()
	}
	if o.Repository.IsSet() {
		toSerialize["repository"] = o.Repository.Get()
	}
	return toSerialize, nil
}

type NullableHelmResponseAllOfSource struct {
	value *HelmResponseAllOfSource
	isSet bool
}

func (v NullableHelmResponseAllOfSource) Get() *HelmResponseAllOfSource {
	return v.value
}

func (v *NullableHelmResponseAllOfSource) Set(val *HelmResponseAllOfSource) {
	v.value = val
	v.isSet = true
}

func (v NullableHelmResponseAllOfSource) IsSet() bool {
	return v.isSet
}

func (v *NullableHelmResponseAllOfSource) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableHelmResponseAllOfSource(val *HelmResponseAllOfSource) *NullableHelmResponseAllOfSource {
	return &NullableHelmResponseAllOfSource{value: val, isSet: true}
}

func (v NullableHelmResponseAllOfSource) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableHelmResponseAllOfSource) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
