/*
Qovery API

- Qovery is the fastest way to deploy your full-stack apps on any Cloud provider. - ℹ️ The API is stable and still in development.

API version: 1.0.4
Contact: support+api+documentation@qovery.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package qovery

import (
	"encoding/json"
	"fmt"
)

// HelmResponseAllOfSource - struct for HelmResponseAllOfSource
type HelmResponseAllOfSource struct {
	HelmResponseAllOfSourceOneOf  *HelmResponseAllOfSourceOneOf
	HelmResponseAllOfSourceOneOf1 *HelmResponseAllOfSourceOneOf1
}

// HelmResponseAllOfSourceOneOfAsHelmResponseAllOfSource is a convenience function that returns HelmResponseAllOfSourceOneOf wrapped in HelmResponseAllOfSource
func HelmResponseAllOfSourceOneOfAsHelmResponseAllOfSource(v *HelmResponseAllOfSourceOneOf) HelmResponseAllOfSource {
	return HelmResponseAllOfSource{
		HelmResponseAllOfSourceOneOf: v,
	}
}

// HelmResponseAllOfSourceOneOf1AsHelmResponseAllOfSource is a convenience function that returns HelmResponseAllOfSourceOneOf1 wrapped in HelmResponseAllOfSource
func HelmResponseAllOfSourceOneOf1AsHelmResponseAllOfSource(v *HelmResponseAllOfSourceOneOf1) HelmResponseAllOfSource {
	return HelmResponseAllOfSource{
		HelmResponseAllOfSourceOneOf1: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *HelmResponseAllOfSource) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into HelmResponseAllOfSourceOneOf
	err = json.Unmarshal(data, &dst.HelmResponseAllOfSourceOneOf)
	if err == nil {
		jsonHelmResponseAllOfSourceOneOf, _ := json.Marshal(dst.HelmResponseAllOfSourceOneOf)
		if string(jsonHelmResponseAllOfSourceOneOf) == "{}" { // empty struct
			dst.HelmResponseAllOfSourceOneOf = nil
		} else {
			match++
		}
	} else {
		dst.HelmResponseAllOfSourceOneOf = nil
	}

	// try to unmarshal data into HelmResponseAllOfSourceOneOf1
	err = json.Unmarshal(data, &dst.HelmResponseAllOfSourceOneOf1)
	if err == nil {
		jsonHelmResponseAllOfSourceOneOf1, _ := json.Marshal(dst.HelmResponseAllOfSourceOneOf1)
		if string(jsonHelmResponseAllOfSourceOneOf1) == "{}" { // empty struct
			dst.HelmResponseAllOfSourceOneOf1 = nil
		} else {
			match++
		}
	} else {
		dst.HelmResponseAllOfSourceOneOf1 = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.HelmResponseAllOfSourceOneOf = nil
		dst.HelmResponseAllOfSourceOneOf1 = nil

		return fmt.Errorf("data matches more than one schema in oneOf(HelmResponseAllOfSource)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(HelmResponseAllOfSource)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src HelmResponseAllOfSource) MarshalJSON() ([]byte, error) {
	if src.HelmResponseAllOfSourceOneOf != nil {
		return json.Marshal(&src.HelmResponseAllOfSourceOneOf)
	}

	if src.HelmResponseAllOfSourceOneOf1 != nil {
		return json.Marshal(&src.HelmResponseAllOfSourceOneOf1)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *HelmResponseAllOfSource) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.HelmResponseAllOfSourceOneOf != nil {
		return obj.HelmResponseAllOfSourceOneOf
	}

	if obj.HelmResponseAllOfSourceOneOf1 != nil {
		return obj.HelmResponseAllOfSourceOneOf1
	}

	// all schemas are nil
	return nil
}

type NullableHelmResponseAllOfSource struct {
	value *HelmResponseAllOfSource
	isSet bool
}

func (v NullableHelmResponseAllOfSource) Get() *HelmResponseAllOfSource {
	return v.value
}

func (v *NullableHelmResponseAllOfSource) Set(val *HelmResponseAllOfSource) {
	v.value = val
	v.isSet = true
}

func (v NullableHelmResponseAllOfSource) IsSet() bool {
	return v.isSet
}

func (v *NullableHelmResponseAllOfSource) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableHelmResponseAllOfSource(val *HelmResponseAllOfSource) *NullableHelmResponseAllOfSource {
	return &NullableHelmResponseAllOfSource{value: val, isSet: true}
}

func (v NullableHelmResponseAllOfSource) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableHelmResponseAllOfSource) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
