/*
Qovery API

- Qovery is the fastest way to deploy your full-stack apps on any Cloud provider. - ℹ️ The API is stable and still in development.

API version: 1.0.4
Contact: support+api+documentation@qovery.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package qovery

import (
	"encoding/json"
)

// checks if the EnvironmentLogsError type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &EnvironmentLogsError{}

// EnvironmentLogsError struct for EnvironmentLogsError
type EnvironmentLogsError struct {
	Tag                  *string                              `json:"tag,omitempty"`
	UserLogMessage       *string                              `json:"user_log_message,omitempty"`
	Link                 *string                              `json:"link,omitempty"`
	HintMessage          *string                              `json:"hint_message,omitempty"`
	UnderlyingError      *EnvironmentLogsErrorUnderlyingError `json:"underlying_error,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _EnvironmentLogsError EnvironmentLogsError

// NewEnvironmentLogsError instantiates a new EnvironmentLogsError object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEnvironmentLogsError() *EnvironmentLogsError {
	this := EnvironmentLogsError{}
	return &this
}

// NewEnvironmentLogsErrorWithDefaults instantiates a new EnvironmentLogsError object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEnvironmentLogsErrorWithDefaults() *EnvironmentLogsError {
	this := EnvironmentLogsError{}
	return &this
}

// GetTag returns the Tag field value if set, zero value otherwise.
func (o *EnvironmentLogsError) GetTag() string {
	if o == nil || IsNil(o.Tag) {
		var ret string
		return ret
	}
	return *o.Tag
}

// GetTagOk returns a tuple with the Tag field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EnvironmentLogsError) GetTagOk() (*string, bool) {
	if o == nil || IsNil(o.Tag) {
		return nil, false
	}
	return o.Tag, true
}

// HasTag returns a boolean if a field has been set.
func (o *EnvironmentLogsError) HasTag() bool {
	if o != nil && !IsNil(o.Tag) {
		return true
	}

	return false
}

// SetTag gets a reference to the given string and assigns it to the Tag field.
func (o *EnvironmentLogsError) SetTag(v string) {
	o.Tag = &v
}

// GetUserLogMessage returns the UserLogMessage field value if set, zero value otherwise.
func (o *EnvironmentLogsError) GetUserLogMessage() string {
	if o == nil || IsNil(o.UserLogMessage) {
		var ret string
		return ret
	}
	return *o.UserLogMessage
}

// GetUserLogMessageOk returns a tuple with the UserLogMessage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EnvironmentLogsError) GetUserLogMessageOk() (*string, bool) {
	if o == nil || IsNil(o.UserLogMessage) {
		return nil, false
	}
	return o.UserLogMessage, true
}

// HasUserLogMessage returns a boolean if a field has been set.
func (o *EnvironmentLogsError) HasUserLogMessage() bool {
	if o != nil && !IsNil(o.UserLogMessage) {
		return true
	}

	return false
}

// SetUserLogMessage gets a reference to the given string and assigns it to the UserLogMessage field.
func (o *EnvironmentLogsError) SetUserLogMessage(v string) {
	o.UserLogMessage = &v
}

// GetLink returns the Link field value if set, zero value otherwise.
func (o *EnvironmentLogsError) GetLink() string {
	if o == nil || IsNil(o.Link) {
		var ret string
		return ret
	}
	return *o.Link
}

// GetLinkOk returns a tuple with the Link field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EnvironmentLogsError) GetLinkOk() (*string, bool) {
	if o == nil || IsNil(o.Link) {
		return nil, false
	}
	return o.Link, true
}

// HasLink returns a boolean if a field has been set.
func (o *EnvironmentLogsError) HasLink() bool {
	if o != nil && !IsNil(o.Link) {
		return true
	}

	return false
}

// SetLink gets a reference to the given string and assigns it to the Link field.
func (o *EnvironmentLogsError) SetLink(v string) {
	o.Link = &v
}

// GetHintMessage returns the HintMessage field value if set, zero value otherwise.
func (o *EnvironmentLogsError) GetHintMessage() string {
	if o == nil || IsNil(o.HintMessage) {
		var ret string
		return ret
	}
	return *o.HintMessage
}

// GetHintMessageOk returns a tuple with the HintMessage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EnvironmentLogsError) GetHintMessageOk() (*string, bool) {
	if o == nil || IsNil(o.HintMessage) {
		return nil, false
	}
	return o.HintMessage, true
}

// HasHintMessage returns a boolean if a field has been set.
func (o *EnvironmentLogsError) HasHintMessage() bool {
	if o != nil && !IsNil(o.HintMessage) {
		return true
	}

	return false
}

// SetHintMessage gets a reference to the given string and assigns it to the HintMessage field.
func (o *EnvironmentLogsError) SetHintMessage(v string) {
	o.HintMessage = &v
}

// GetUnderlyingError returns the UnderlyingError field value if set, zero value otherwise.
func (o *EnvironmentLogsError) GetUnderlyingError() EnvironmentLogsErrorUnderlyingError {
	if o == nil || IsNil(o.UnderlyingError) {
		var ret EnvironmentLogsErrorUnderlyingError
		return ret
	}
	return *o.UnderlyingError
}

// GetUnderlyingErrorOk returns a tuple with the UnderlyingError field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EnvironmentLogsError) GetUnderlyingErrorOk() (*EnvironmentLogsErrorUnderlyingError, bool) {
	if o == nil || IsNil(o.UnderlyingError) {
		return nil, false
	}
	return o.UnderlyingError, true
}

// HasUnderlyingError returns a boolean if a field has been set.
func (o *EnvironmentLogsError) HasUnderlyingError() bool {
	if o != nil && !IsNil(o.UnderlyingError) {
		return true
	}

	return false
}

// SetUnderlyingError gets a reference to the given EnvironmentLogsErrorUnderlyingError and assigns it to the UnderlyingError field.
func (o *EnvironmentLogsError) SetUnderlyingError(v EnvironmentLogsErrorUnderlyingError) {
	o.UnderlyingError = &v
}

func (o EnvironmentLogsError) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o EnvironmentLogsError) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Tag) {
		toSerialize["tag"] = o.Tag
	}
	if !IsNil(o.UserLogMessage) {
		toSerialize["user_log_message"] = o.UserLogMessage
	}
	if !IsNil(o.Link) {
		toSerialize["link"] = o.Link
	}
	if !IsNil(o.HintMessage) {
		toSerialize["hint_message"] = o.HintMessage
	}
	if !IsNil(o.UnderlyingError) {
		toSerialize["underlying_error"] = o.UnderlyingError
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *EnvironmentLogsError) UnmarshalJSON(data []byte) (err error) {
	varEnvironmentLogsError := _EnvironmentLogsError{}

	err = json.Unmarshal(data, &varEnvironmentLogsError)

	if err != nil {
		return err
	}

	*o = EnvironmentLogsError(varEnvironmentLogsError)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "tag")
		delete(additionalProperties, "user_log_message")
		delete(additionalProperties, "link")
		delete(additionalProperties, "hint_message")
		delete(additionalProperties, "underlying_error")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableEnvironmentLogsError struct {
	value *EnvironmentLogsError
	isSet bool
}

func (v NullableEnvironmentLogsError) Get() *EnvironmentLogsError {
	return v.value
}

func (v *NullableEnvironmentLogsError) Set(val *EnvironmentLogsError) {
	v.value = val
	v.isSet = true
}

func (v NullableEnvironmentLogsError) IsSet() bool {
	return v.isSet
}

func (v *NullableEnvironmentLogsError) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEnvironmentLogsError(val *EnvironmentLogsError) *NullableEnvironmentLogsError {
	return &NullableEnvironmentLogsError{value: val, isSet: true}
}

func (v NullableEnvironmentLogsError) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEnvironmentLogsError) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
