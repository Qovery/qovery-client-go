/*
Qovery API

- Qovery is the fastest way to deploy your full-stack apps on any Cloud provider. - ℹ️ The API is stable and still in development.

API version: 1.0.3
Contact: support+api+documentation@qovery.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package qovery

import (
	"encoding/json"
)

// GitAuthProvider struct for GitAuthProvider
type GitAuthProvider struct {
	Id    *string `json:"id,omitempty"`
	Name  string  `json:"name"`
	Owner string  `json:"owner"`
}

// NewGitAuthProvider instantiates a new GitAuthProvider object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGitAuthProvider(name string, owner string) *GitAuthProvider {
	this := GitAuthProvider{}
	this.Name = name
	this.Owner = owner
	return &this
}

// NewGitAuthProviderWithDefaults instantiates a new GitAuthProvider object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGitAuthProviderWithDefaults() *GitAuthProvider {
	this := GitAuthProvider{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *GitAuthProvider) GetId() string {
	if o == nil || o.Id == nil {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GitAuthProvider) GetIdOk() (*string, bool) {
	if o == nil || o.Id == nil {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *GitAuthProvider) HasId() bool {
	if o != nil && o.Id != nil {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *GitAuthProvider) SetId(v string) {
	o.Id = &v
}

// GetName returns the Name field value
func (o *GitAuthProvider) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *GitAuthProvider) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *GitAuthProvider) SetName(v string) {
	o.Name = v
}

// GetOwner returns the Owner field value
func (o *GitAuthProvider) GetOwner() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Owner
}

// GetOwnerOk returns a tuple with the Owner field value
// and a boolean to check if the value has been set.
func (o *GitAuthProvider) GetOwnerOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Owner, true
}

// SetOwner sets field value
func (o *GitAuthProvider) SetOwner(v string) {
	o.Owner = v
}

func (o GitAuthProvider) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Id != nil {
		toSerialize["id"] = o.Id
	}
	if true {
		toSerialize["name"] = o.Name
	}
	if true {
		toSerialize["owner"] = o.Owner
	}
	return json.Marshal(toSerialize)
}

type NullableGitAuthProvider struct {
	value *GitAuthProvider
	isSet bool
}

func (v NullableGitAuthProvider) Get() *GitAuthProvider {
	return v.value
}

func (v *NullableGitAuthProvider) Set(val *GitAuthProvider) {
	v.value = val
	v.isSet = true
}

func (v NullableGitAuthProvider) IsSet() bool {
	return v.isSet
}

func (v *NullableGitAuthProvider) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGitAuthProvider(val *GitAuthProvider) *NullableGitAuthProvider {
	return &NullableGitAuthProvider{value: val, isSet: true}
}

func (v NullableGitAuthProvider) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGitAuthProvider) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
