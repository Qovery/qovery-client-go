/*
Qovery API

- Qovery is the fastest way to deploy your full-stack apps on any Cloud provider. - ℹ️ The API is stable and still in development.

API version: 1.0.3
Contact: support+api+documentation@qovery.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package qovery

import (
	"encoding/json"
	"fmt"
)

// checks if the HelmRepositoryAssociatedServicesResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &HelmRepositoryAssociatedServicesResponse{}

// HelmRepositoryAssociatedServicesResponse struct for HelmRepositoryAssociatedServicesResponse
type HelmRepositoryAssociatedServicesResponse struct {
	ProjectId            string                              `json:"project_id"`
	ProjectName          string                              `json:"project_name"`
	EnvironmentId        string                              `json:"environment_id"`
	EnvironmentName      string                              `json:"environment_name"`
	ServiceId            string                              `json:"service_id"`
	ServiceName          string                              `json:"service_name"`
	ServiceType          HelmRepositoryAssociatedServiceType `json:"service_type"`
	AdditionalProperties map[string]interface{}
}

type _HelmRepositoryAssociatedServicesResponse HelmRepositoryAssociatedServicesResponse

// NewHelmRepositoryAssociatedServicesResponse instantiates a new HelmRepositoryAssociatedServicesResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewHelmRepositoryAssociatedServicesResponse(projectId string, projectName string, environmentId string, environmentName string, serviceId string, serviceName string, serviceType HelmRepositoryAssociatedServiceType) *HelmRepositoryAssociatedServicesResponse {
	this := HelmRepositoryAssociatedServicesResponse{}
	this.ProjectId = projectId
	this.ProjectName = projectName
	this.EnvironmentId = environmentId
	this.EnvironmentName = environmentName
	this.ServiceId = serviceId
	this.ServiceName = serviceName
	this.ServiceType = serviceType
	return &this
}

// NewHelmRepositoryAssociatedServicesResponseWithDefaults instantiates a new HelmRepositoryAssociatedServicesResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewHelmRepositoryAssociatedServicesResponseWithDefaults() *HelmRepositoryAssociatedServicesResponse {
	this := HelmRepositoryAssociatedServicesResponse{}
	return &this
}

// GetProjectId returns the ProjectId field value
func (o *HelmRepositoryAssociatedServicesResponse) GetProjectId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ProjectId
}

// GetProjectIdOk returns a tuple with the ProjectId field value
// and a boolean to check if the value has been set.
func (o *HelmRepositoryAssociatedServicesResponse) GetProjectIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ProjectId, true
}

// SetProjectId sets field value
func (o *HelmRepositoryAssociatedServicesResponse) SetProjectId(v string) {
	o.ProjectId = v
}

// GetProjectName returns the ProjectName field value
func (o *HelmRepositoryAssociatedServicesResponse) GetProjectName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ProjectName
}

// GetProjectNameOk returns a tuple with the ProjectName field value
// and a boolean to check if the value has been set.
func (o *HelmRepositoryAssociatedServicesResponse) GetProjectNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ProjectName, true
}

// SetProjectName sets field value
func (o *HelmRepositoryAssociatedServicesResponse) SetProjectName(v string) {
	o.ProjectName = v
}

// GetEnvironmentId returns the EnvironmentId field value
func (o *HelmRepositoryAssociatedServicesResponse) GetEnvironmentId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.EnvironmentId
}

// GetEnvironmentIdOk returns a tuple with the EnvironmentId field value
// and a boolean to check if the value has been set.
func (o *HelmRepositoryAssociatedServicesResponse) GetEnvironmentIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.EnvironmentId, true
}

// SetEnvironmentId sets field value
func (o *HelmRepositoryAssociatedServicesResponse) SetEnvironmentId(v string) {
	o.EnvironmentId = v
}

// GetEnvironmentName returns the EnvironmentName field value
func (o *HelmRepositoryAssociatedServicesResponse) GetEnvironmentName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.EnvironmentName
}

// GetEnvironmentNameOk returns a tuple with the EnvironmentName field value
// and a boolean to check if the value has been set.
func (o *HelmRepositoryAssociatedServicesResponse) GetEnvironmentNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.EnvironmentName, true
}

// SetEnvironmentName sets field value
func (o *HelmRepositoryAssociatedServicesResponse) SetEnvironmentName(v string) {
	o.EnvironmentName = v
}

// GetServiceId returns the ServiceId field value
func (o *HelmRepositoryAssociatedServicesResponse) GetServiceId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ServiceId
}

// GetServiceIdOk returns a tuple with the ServiceId field value
// and a boolean to check if the value has been set.
func (o *HelmRepositoryAssociatedServicesResponse) GetServiceIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ServiceId, true
}

// SetServiceId sets field value
func (o *HelmRepositoryAssociatedServicesResponse) SetServiceId(v string) {
	o.ServiceId = v
}

// GetServiceName returns the ServiceName field value
func (o *HelmRepositoryAssociatedServicesResponse) GetServiceName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ServiceName
}

// GetServiceNameOk returns a tuple with the ServiceName field value
// and a boolean to check if the value has been set.
func (o *HelmRepositoryAssociatedServicesResponse) GetServiceNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ServiceName, true
}

// SetServiceName sets field value
func (o *HelmRepositoryAssociatedServicesResponse) SetServiceName(v string) {
	o.ServiceName = v
}

// GetServiceType returns the ServiceType field value
func (o *HelmRepositoryAssociatedServicesResponse) GetServiceType() HelmRepositoryAssociatedServiceType {
	if o == nil {
		var ret HelmRepositoryAssociatedServiceType
		return ret
	}

	return o.ServiceType
}

// GetServiceTypeOk returns a tuple with the ServiceType field value
// and a boolean to check if the value has been set.
func (o *HelmRepositoryAssociatedServicesResponse) GetServiceTypeOk() (*HelmRepositoryAssociatedServiceType, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ServiceType, true
}

// SetServiceType sets field value
func (o *HelmRepositoryAssociatedServicesResponse) SetServiceType(v HelmRepositoryAssociatedServiceType) {
	o.ServiceType = v
}

func (o HelmRepositoryAssociatedServicesResponse) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o HelmRepositoryAssociatedServicesResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["project_id"] = o.ProjectId
	toSerialize["project_name"] = o.ProjectName
	toSerialize["environment_id"] = o.EnvironmentId
	toSerialize["environment_name"] = o.EnvironmentName
	toSerialize["service_id"] = o.ServiceId
	toSerialize["service_name"] = o.ServiceName
	toSerialize["service_type"] = o.ServiceType

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *HelmRepositoryAssociatedServicesResponse) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"project_id",
		"project_name",
		"environment_id",
		"environment_name",
		"service_id",
		"service_name",
		"service_type",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varHelmRepositoryAssociatedServicesResponse := _HelmRepositoryAssociatedServicesResponse{}

	err = json.Unmarshal(data, &varHelmRepositoryAssociatedServicesResponse)

	if err != nil {
		return err
	}

	*o = HelmRepositoryAssociatedServicesResponse(varHelmRepositoryAssociatedServicesResponse)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "project_id")
		delete(additionalProperties, "project_name")
		delete(additionalProperties, "environment_id")
		delete(additionalProperties, "environment_name")
		delete(additionalProperties, "service_id")
		delete(additionalProperties, "service_name")
		delete(additionalProperties, "service_type")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableHelmRepositoryAssociatedServicesResponse struct {
	value *HelmRepositoryAssociatedServicesResponse
	isSet bool
}

func (v NullableHelmRepositoryAssociatedServicesResponse) Get() *HelmRepositoryAssociatedServicesResponse {
	return v.value
}

func (v *NullableHelmRepositoryAssociatedServicesResponse) Set(val *HelmRepositoryAssociatedServicesResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableHelmRepositoryAssociatedServicesResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableHelmRepositoryAssociatedServicesResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableHelmRepositoryAssociatedServicesResponse(val *HelmRepositoryAssociatedServicesResponse) *NullableHelmRepositoryAssociatedServicesResponse {
	return &NullableHelmRepositoryAssociatedServicesResponse{value: val, isSet: true}
}

func (v NullableHelmRepositoryAssociatedServicesResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableHelmRepositoryAssociatedServicesResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
