/*
Qovery API

- Qovery is the fastest way to deploy your full-stack apps on any Cloud provider. - ℹ️ The API is stable and still in development.

API version: 1.0.4
Contact: support+api+documentation@qovery.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package qovery

import (
	"encoding/json"
	"fmt"
)

// DeploymentHistoryTriggerAction the model 'DeploymentHistoryTriggerAction'
type DeploymentHistoryTriggerAction string

// List of DeploymentHistoryTriggerAction
const (
	DEPLOYMENTHISTORYTRIGGERACTION_DEPLOY    DeploymentHistoryTriggerAction = "DEPLOY"
	DEPLOYMENTHISTORYTRIGGERACTION_DELETE    DeploymentHistoryTriggerAction = "DELETE"
	DEPLOYMENTHISTORYTRIGGERACTION_RESTART   DeploymentHistoryTriggerAction = "RESTART"
	DEPLOYMENTHISTORYTRIGGERACTION_STOP      DeploymentHistoryTriggerAction = "STOP"
	DEPLOYMENTHISTORYTRIGGERACTION_UNKNOWN   DeploymentHistoryTriggerAction = "UNKNOWN"
	DEPLOYMENTHISTORYTRIGGERACTION_UNINSTALL DeploymentHistoryTriggerAction = "UNINSTALL"
)

// All allowed values of DeploymentHistoryTriggerAction enum
var AllowedDeploymentHistoryTriggerActionEnumValues = []DeploymentHistoryTriggerAction{
	"DEPLOY",
	"DELETE",
	"RESTART",
	"STOP",
	"UNKNOWN",
	"UNINSTALL",
}

func (v *DeploymentHistoryTriggerAction) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := DeploymentHistoryTriggerAction(value)
	for _, existing := range AllowedDeploymentHistoryTriggerActionEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid DeploymentHistoryTriggerAction", value)
}

// NewDeploymentHistoryTriggerActionFromValue returns a pointer to a valid DeploymentHistoryTriggerAction
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewDeploymentHistoryTriggerActionFromValue(v string) (*DeploymentHistoryTriggerAction, error) {
	ev := DeploymentHistoryTriggerAction(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for DeploymentHistoryTriggerAction: valid values are %v", v, AllowedDeploymentHistoryTriggerActionEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v DeploymentHistoryTriggerAction) IsValid() bool {
	for _, existing := range AllowedDeploymentHistoryTriggerActionEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to DeploymentHistoryTriggerAction value
func (v DeploymentHistoryTriggerAction) Ptr() *DeploymentHistoryTriggerAction {
	return &v
}

type NullableDeploymentHistoryTriggerAction struct {
	value *DeploymentHistoryTriggerAction
	isSet bool
}

func (v NullableDeploymentHistoryTriggerAction) Get() *DeploymentHistoryTriggerAction {
	return v.value
}

func (v *NullableDeploymentHistoryTriggerAction) Set(val *DeploymentHistoryTriggerAction) {
	v.value = val
	v.isSet = true
}

func (v NullableDeploymentHistoryTriggerAction) IsSet() bool {
	return v.isSet
}

func (v *NullableDeploymentHistoryTriggerAction) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDeploymentHistoryTriggerAction(val *DeploymentHistoryTriggerAction) *NullableDeploymentHistoryTriggerAction {
	return &NullableDeploymentHistoryTriggerAction{value: val, isSet: true}
}

func (v NullableDeploymentHistoryTriggerAction) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDeploymentHistoryTriggerAction) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
