/*
Qovery API

- Qovery is the fastest way to deploy your full-stack apps on any Cloud provider. - ℹ️ The API is stable and still in development.

API version: 1.0.3
Contact: support+api+documentation@qovery.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package qovery

import (
	"encoding/json"
)

// checks if the HelmResponseAllOfSourceOneOfGit type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &HelmResponseAllOfSourceOneOfGit{}

// HelmResponseAllOfSourceOneOfGit struct for HelmResponseAllOfSourceOneOfGit
type HelmResponseAllOfSourceOneOfGit struct {
	GitRepository        *ApplicationGitRepository `json:"git_repository,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _HelmResponseAllOfSourceOneOfGit HelmResponseAllOfSourceOneOfGit

// NewHelmResponseAllOfSourceOneOfGit instantiates a new HelmResponseAllOfSourceOneOfGit object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewHelmResponseAllOfSourceOneOfGit() *HelmResponseAllOfSourceOneOfGit {
	this := HelmResponseAllOfSourceOneOfGit{}
	return &this
}

// NewHelmResponseAllOfSourceOneOfGitWithDefaults instantiates a new HelmResponseAllOfSourceOneOfGit object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewHelmResponseAllOfSourceOneOfGitWithDefaults() *HelmResponseAllOfSourceOneOfGit {
	this := HelmResponseAllOfSourceOneOfGit{}
	return &this
}

// GetGitRepository returns the GitRepository field value if set, zero value otherwise.
func (o *HelmResponseAllOfSourceOneOfGit) GetGitRepository() ApplicationGitRepository {
	if o == nil || IsNil(o.GitRepository) {
		var ret ApplicationGitRepository
		return ret
	}
	return *o.GitRepository
}

// GetGitRepositoryOk returns a tuple with the GitRepository field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HelmResponseAllOfSourceOneOfGit) GetGitRepositoryOk() (*ApplicationGitRepository, bool) {
	if o == nil || IsNil(o.GitRepository) {
		return nil, false
	}
	return o.GitRepository, true
}

// HasGitRepository returns a boolean if a field has been set.
func (o *HelmResponseAllOfSourceOneOfGit) HasGitRepository() bool {
	if o != nil && !IsNil(o.GitRepository) {
		return true
	}

	return false
}

// SetGitRepository gets a reference to the given ApplicationGitRepository and assigns it to the GitRepository field.
func (o *HelmResponseAllOfSourceOneOfGit) SetGitRepository(v ApplicationGitRepository) {
	o.GitRepository = &v
}

func (o HelmResponseAllOfSourceOneOfGit) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o HelmResponseAllOfSourceOneOfGit) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.GitRepository) {
		toSerialize["git_repository"] = o.GitRepository
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *HelmResponseAllOfSourceOneOfGit) UnmarshalJSON(data []byte) (err error) {
	varHelmResponseAllOfSourceOneOfGit := _HelmResponseAllOfSourceOneOfGit{}

	err = json.Unmarshal(data, &varHelmResponseAllOfSourceOneOfGit)

	if err != nil {
		return err
	}

	*o = HelmResponseAllOfSourceOneOfGit(varHelmResponseAllOfSourceOneOfGit)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "git_repository")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableHelmResponseAllOfSourceOneOfGit struct {
	value *HelmResponseAllOfSourceOneOfGit
	isSet bool
}

func (v NullableHelmResponseAllOfSourceOneOfGit) Get() *HelmResponseAllOfSourceOneOfGit {
	return v.value
}

func (v *NullableHelmResponseAllOfSourceOneOfGit) Set(val *HelmResponseAllOfSourceOneOfGit) {
	v.value = val
	v.isSet = true
}

func (v NullableHelmResponseAllOfSourceOneOfGit) IsSet() bool {
	return v.isSet
}

func (v *NullableHelmResponseAllOfSourceOneOfGit) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableHelmResponseAllOfSourceOneOfGit(val *HelmResponseAllOfSourceOneOfGit) *NullableHelmResponseAllOfSourceOneOfGit {
	return &NullableHelmResponseAllOfSourceOneOfGit{value: val, isSet: true}
}

func (v NullableHelmResponseAllOfSourceOneOfGit) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableHelmResponseAllOfSourceOneOfGit) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
