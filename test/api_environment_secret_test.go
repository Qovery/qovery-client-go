/*
Qovery API

Testing EnvironmentSecretAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package qovery

import (
	"context"
	openapiclient "github.com/qovery/qovery-client-go"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
)

func Test_qovery_EnvironmentSecretAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test EnvironmentSecretAPIService CreateEnvironmentSecret", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var environmentId string

		resp, httpRes, err := apiClient.EnvironmentSecretAPI.CreateEnvironmentSecret(context.Background(), environmentId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test EnvironmentSecretAPIService CreateEnvironmentSecretAlias", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var environmentId string
		var secretId string

		resp, httpRes, err := apiClient.EnvironmentSecretAPI.CreateEnvironmentSecretAlias(context.Background(), environmentId, secretId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test EnvironmentSecretAPIService CreateEnvironmentSecretOverride", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var environmentId string
		var secretId string

		resp, httpRes, err := apiClient.EnvironmentSecretAPI.CreateEnvironmentSecretOverride(context.Background(), environmentId, secretId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test EnvironmentSecretAPIService DeleteEnvironmentSecret", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var environmentId string
		var secretId string

		httpRes, err := apiClient.EnvironmentSecretAPI.DeleteEnvironmentSecret(context.Background(), environmentId, secretId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test EnvironmentSecretAPIService EditEnvironmentSecret", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var environmentId string
		var secretId string

		resp, httpRes, err := apiClient.EnvironmentSecretAPI.EditEnvironmentSecret(context.Background(), environmentId, secretId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test EnvironmentSecretAPIService ListEnvironmentSecrets", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var environmentId string

		resp, httpRes, err := apiClient.EnvironmentSecretAPI.ListEnvironmentSecrets(context.Background(), environmentId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
