/*
Qovery API

Testing ProjectEnvironmentVariableAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package qovery

import (
	"context"
	openapiclient "github.com/qovery/qovery-client-go"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
)

func Test_qovery_ProjectEnvironmentVariableAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test ProjectEnvironmentVariableAPIService CreateProjectEnvironmentVariable", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var projectId string

		resp, httpRes, err := apiClient.ProjectEnvironmentVariableAPI.CreateProjectEnvironmentVariable(context.Background(), projectId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ProjectEnvironmentVariableAPIService CreateProjectEnvironmentVariableAlias", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var projectId string
		var environmentVariableId string

		resp, httpRes, err := apiClient.ProjectEnvironmentVariableAPI.CreateProjectEnvironmentVariableAlias(context.Background(), projectId, environmentVariableId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ProjectEnvironmentVariableAPIService CreateProjectEnvironmentVariableOverride", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var projectId string
		var environmentVariableId string

		resp, httpRes, err := apiClient.ProjectEnvironmentVariableAPI.CreateProjectEnvironmentVariableOverride(context.Background(), projectId, environmentVariableId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ProjectEnvironmentVariableAPIService DeleteProjectEnvironmentVariable", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var projectId string
		var environmentVariableId string

		httpRes, err := apiClient.ProjectEnvironmentVariableAPI.DeleteProjectEnvironmentVariable(context.Background(), projectId, environmentVariableId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ProjectEnvironmentVariableAPIService EditProjectEnvironmentVariable", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var projectId string
		var environmentVariableId string

		resp, httpRes, err := apiClient.ProjectEnvironmentVariableAPI.EditProjectEnvironmentVariable(context.Background(), projectId, environmentVariableId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ProjectEnvironmentVariableAPIService ListProjectEnvironmentVariable", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var projectId string

		resp, httpRes, err := apiClient.ProjectEnvironmentVariableAPI.ListProjectEnvironmentVariable(context.Background(), projectId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
