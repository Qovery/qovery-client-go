/*
Qovery API

Testing TerraformDeploymentRestrictionAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package qovery

import (
	"context"
	openapiclient "github.com/qovery/qovery-client-go"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
)

func Test_qovery_TerraformDeploymentRestrictionAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test TerraformDeploymentRestrictionAPIService CreateTerraformDeploymentRestriction", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var terraformId string

		resp, httpRes, err := apiClient.TerraformDeploymentRestrictionAPI.CreateTerraformDeploymentRestriction(context.Background(), terraformId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test TerraformDeploymentRestrictionAPIService DeleteTerraformDeploymentRestriction", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var terraformId string
		var deploymentRestrictionId string

		httpRes, err := apiClient.TerraformDeploymentRestrictionAPI.DeleteTerraformDeploymentRestriction(context.Background(), terraformId, deploymentRestrictionId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test TerraformDeploymentRestrictionAPIService EditTerraformDeploymentRestriction", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var terraformId string
		var deploymentRestrictionId string

		resp, httpRes, err := apiClient.TerraformDeploymentRestrictionAPI.EditTerraformDeploymentRestriction(context.Background(), terraformId, deploymentRestrictionId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test TerraformDeploymentRestrictionAPIService GetTerraformDeploymentRestrictions", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var terraformId string

		resp, httpRes, err := apiClient.TerraformDeploymentRestrictionAPI.GetTerraformDeploymentRestrictions(context.Background(), terraformId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
