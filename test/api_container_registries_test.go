/*
Qovery API

Testing ContainerRegistriesAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package qovery

import (
	"context"
	openapiclient "github.com/qovery/qovery-client-go"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
)

func Test_qovery_ContainerRegistriesAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test ContainerRegistriesAPIService CreateContainerRegistry", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var organizationId string

		resp, httpRes, err := apiClient.ContainerRegistriesAPI.CreateContainerRegistry(context.Background(), organizationId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ContainerRegistriesAPIService DeleteContainerRegistry", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var organizationId string
		var containerRegistryId string

		httpRes, err := apiClient.ContainerRegistriesAPI.DeleteContainerRegistry(context.Background(), organizationId, containerRegistryId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ContainerRegistriesAPIService EditContainerRegistry", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var organizationId string
		var containerRegistryId string

		resp, httpRes, err := apiClient.ContainerRegistriesAPI.EditContainerRegistry(context.Background(), organizationId, containerRegistryId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ContainerRegistriesAPIService GetContainerRegistry", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var organizationId string
		var containerRegistryId string

		resp, httpRes, err := apiClient.ContainerRegistriesAPI.GetContainerRegistry(context.Background(), organizationId, containerRegistryId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ContainerRegistriesAPIService ListAvailableContainerRegistry", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.ContainerRegistriesAPI.ListAvailableContainerRegistry(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ContainerRegistriesAPIService ListContainerRegistry", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var organizationId string

		resp, httpRes, err := apiClient.ContainerRegistriesAPI.ListContainerRegistry(context.Background(), organizationId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
