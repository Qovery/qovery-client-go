/*
Qovery API

Testing BillingAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package qovery

import (
	"context"
	openapiclient "github.com/qovery/qovery-client-go"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
)

func Test_qovery_BillingAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test BillingAPIService AddCreditCard", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var organizationId string

		resp, httpRes, err := apiClient.BillingAPI.AddCreditCard(context.Background(), organizationId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test BillingAPIService AddCreditCode", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var organizationId string

		httpRes, err := apiClient.BillingAPI.AddCreditCode(context.Background(), organizationId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test BillingAPIService ChangePlan", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var organizationId string

		resp, httpRes, err := apiClient.BillingAPI.ChangePlan(context.Background(), organizationId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test BillingAPIService DeleteCreditCard", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var organizationId string
		var creditCardId string

		httpRes, err := apiClient.BillingAPI.DeleteCreditCard(context.Background(), organizationId, creditCardId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test BillingAPIService EditOrganizationBillingInfo", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var organizationId string

		resp, httpRes, err := apiClient.BillingAPI.EditOrganizationBillingInfo(context.Background(), organizationId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test BillingAPIService GetClusterCurrentCost", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var organizationId string
		var clusterId string

		resp, httpRes, err := apiClient.BillingAPI.GetClusterCurrentCost(context.Background(), organizationId, clusterId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test BillingAPIService GetOrganizationBillingExternalId", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var organizationId string

		resp, httpRes, err := apiClient.BillingAPI.GetOrganizationBillingExternalId(context.Background(), organizationId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test BillingAPIService GetOrganizationBillingInfo", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var organizationId string

		resp, httpRes, err := apiClient.BillingAPI.GetOrganizationBillingInfo(context.Background(), organizationId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test BillingAPIService GetOrganizationBillingStatus", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var organizationId string

		resp, httpRes, err := apiClient.BillingAPI.GetOrganizationBillingStatus(context.Background(), organizationId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test BillingAPIService GetOrganizationCurrentCost", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var organizationId string

		resp, httpRes, err := apiClient.BillingAPI.GetOrganizationCurrentCost(context.Background(), organizationId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test BillingAPIService GetOrganizationInvoice", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var organizationId string
		var invoiceId string

		resp, httpRes, err := apiClient.BillingAPI.GetOrganizationInvoice(context.Background(), organizationId, invoiceId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test BillingAPIService GetOrganizationInvoicePDF", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var organizationId string
		var invoiceId string

		resp, httpRes, err := apiClient.BillingAPI.GetOrganizationInvoicePDF(context.Background(), organizationId, invoiceId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test BillingAPIService ListOrganizationCreditCards", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var organizationId string

		resp, httpRes, err := apiClient.BillingAPI.ListOrganizationCreditCards(context.Background(), organizationId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test BillingAPIService ListOrganizationInvoice", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var organizationId string

		resp, httpRes, err := apiClient.BillingAPI.ListOrganizationInvoice(context.Background(), organizationId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test BillingAPIService OrganizationDownloadAllInvoices", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var organizationId string

		httpRes, err := apiClient.BillingAPI.OrganizationDownloadAllInvoices(context.Background(), organizationId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
