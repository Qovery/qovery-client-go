/*
Qovery API

Testing OrganizationAccountGitRepositoriesAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package qovery

import (
	"context"
	openapiclient "github.com/qovery/qovery-client-go"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
)

func Test_qovery_OrganizationAccountGitRepositoriesAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test OrganizationAccountGitRepositoriesAPIService GetOrganizationBitbucketRepositories", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var organizationId string

		resp, httpRes, err := apiClient.OrganizationAccountGitRepositoriesAPI.GetOrganizationBitbucketRepositories(context.Background(), organizationId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test OrganizationAccountGitRepositoriesAPIService GetOrganizationBitbucketRepositoryBranches", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var organizationId string

		resp, httpRes, err := apiClient.OrganizationAccountGitRepositoriesAPI.GetOrganizationBitbucketRepositoryBranches(context.Background(), organizationId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test OrganizationAccountGitRepositoriesAPIService GetOrganizationGitProviderAccount", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var organizationId string

		resp, httpRes, err := apiClient.OrganizationAccountGitRepositoriesAPI.GetOrganizationGitProviderAccount(context.Background(), organizationId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test OrganizationAccountGitRepositoriesAPIService GetOrganizationGithubRepositories", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var organizationId string

		resp, httpRes, err := apiClient.OrganizationAccountGitRepositoriesAPI.GetOrganizationGithubRepositories(context.Background(), organizationId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test OrganizationAccountGitRepositoriesAPIService GetOrganizationGithubRepositoryBranches", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var organizationId string

		resp, httpRes, err := apiClient.OrganizationAccountGitRepositoriesAPI.GetOrganizationGithubRepositoryBranches(context.Background(), organizationId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test OrganizationAccountGitRepositoriesAPIService GetOrganizationGitlabRepositories", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var organizationId string

		resp, httpRes, err := apiClient.OrganizationAccountGitRepositoriesAPI.GetOrganizationGitlabRepositories(context.Background(), organizationId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test OrganizationAccountGitRepositoriesAPIService GetOrganizationGitlabRepositoryBranches", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var organizationId string

		resp, httpRes, err := apiClient.OrganizationAccountGitRepositoriesAPI.GetOrganizationGitlabRepositoryBranches(context.Background(), organizationId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
