/*
Qovery API

Testing CloudProviderAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package qovery

import (
	"context"
	openapiclient "github.com/qovery/qovery-client-go"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
)

func Test_qovery_CloudProviderAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test CloudProviderAPIService ListAWSEKSInstanceType", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var region string

		resp, httpRes, err := apiClient.CloudProviderAPI.ListAWSEKSInstanceType(context.Background(), region).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CloudProviderAPIService ListAWSFeatures", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.CloudProviderAPI.ListAWSFeatures(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CloudProviderAPIService ListAWSInstanceType", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.CloudProviderAPI.ListAWSInstanceType(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CloudProviderAPIService ListAWSManagedDatabaseInstanceType", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var region string
		var databaseType string

		resp, httpRes, err := apiClient.CloudProviderAPI.ListAWSManagedDatabaseInstanceType(context.Background(), region, databaseType).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CloudProviderAPIService ListAWSManagedDatabaseType", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.CloudProviderAPI.ListAWSManagedDatabaseType(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CloudProviderAPIService ListAWSRegions", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.CloudProviderAPI.ListAWSRegions(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CloudProviderAPIService ListCloudProvider", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.CloudProviderAPI.ListCloudProvider(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CloudProviderAPIService ListGcpFeatures", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.CloudProviderAPI.ListGcpFeatures(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CloudProviderAPIService ListGcpGkeInstanceType", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var region string

		resp, httpRes, err := apiClient.CloudProviderAPI.ListGcpGkeInstanceType(context.Background(), region).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CloudProviderAPIService ListGcpRegions", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.CloudProviderAPI.ListGcpRegions(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CloudProviderAPIService ListSCWManagedDatabaseInstanceType", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var databaseType string

		resp, httpRes, err := apiClient.CloudProviderAPI.ListSCWManagedDatabaseInstanceType(context.Background(), databaseType).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CloudProviderAPIService ListSCWManagedDatabaseType", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.CloudProviderAPI.ListSCWManagedDatabaseType(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CloudProviderAPIService ListScalewayFeatures", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.CloudProviderAPI.ListScalewayFeatures(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CloudProviderAPIService ListScalewayInstanceType", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.CloudProviderAPI.ListScalewayInstanceType(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CloudProviderAPIService ListScalewayKapsuleInstanceType", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var zone string

		resp, httpRes, err := apiClient.CloudProviderAPI.ListScalewayKapsuleInstanceType(context.Background(), zone).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CloudProviderAPIService ListScalewayRegions", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.CloudProviderAPI.ListScalewayRegions(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
