/*
Qovery API

Testing AlertReceiversAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package qovery

import (
	"context"
	openapiclient "github.com/qovery/qovery-client-go"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
)

func Test_qovery_AlertReceiversAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test AlertReceiversAPIService CreateAlertReceiver", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.AlertReceiversAPI.CreateAlertReceiver(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AlertReceiversAPIService DeleteAlertReceiver", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var alertReceiverId string

		httpRes, err := apiClient.AlertReceiversAPI.DeleteAlertReceiver(context.Background(), alertReceiverId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AlertReceiversAPIService EditAlertReceiver", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var alertReceiverId string

		resp, httpRes, err := apiClient.AlertReceiversAPI.EditAlertReceiver(context.Background(), alertReceiverId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AlertReceiversAPIService GetAlertReceiver", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var alertReceiverId string

		resp, httpRes, err := apiClient.AlertReceiversAPI.GetAlertReceiver(context.Background(), alertReceiverId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AlertReceiversAPIService GetAlertReceivers", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var organizationId string

		resp, httpRes, err := apiClient.AlertReceiversAPI.GetAlertReceivers(context.Background(), organizationId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
