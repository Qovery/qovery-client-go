/*
Qovery API

Testing ApplicationCustomDomainAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package qovery

import (
	"context"
	openapiclient "github.com/qovery/qovery-client-go"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
)

func Test_qovery_ApplicationCustomDomainAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test ApplicationCustomDomainAPIService CheckApplicationCustomDomain", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var applicationId string

		resp, httpRes, err := apiClient.ApplicationCustomDomainAPI.CheckApplicationCustomDomain(context.Background(), applicationId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ApplicationCustomDomainAPIService CreateApplicationCustomDomain", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var applicationId string

		resp, httpRes, err := apiClient.ApplicationCustomDomainAPI.CreateApplicationCustomDomain(context.Background(), applicationId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ApplicationCustomDomainAPIService DeleteCustomDomain", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var applicationId string
		var customDomainId string

		httpRes, err := apiClient.ApplicationCustomDomainAPI.DeleteCustomDomain(context.Background(), applicationId, customDomainId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ApplicationCustomDomainAPIService EditCustomDomain", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var applicationId string
		var customDomainId string

		resp, httpRes, err := apiClient.ApplicationCustomDomainAPI.EditCustomDomain(context.Background(), applicationId, customDomainId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ApplicationCustomDomainAPIService GetCustomDomainStatus", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var applicationId string
		var customDomainId string

		resp, httpRes, err := apiClient.ApplicationCustomDomainAPI.GetCustomDomainStatus(context.Background(), applicationId, customDomainId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ApplicationCustomDomainAPIService ListApplicationCustomDomain", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var applicationId string

		resp, httpRes, err := apiClient.ApplicationCustomDomainAPI.ListApplicationCustomDomain(context.Background(), applicationId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
