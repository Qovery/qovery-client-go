/*
Qovery API

Testing AlertRulesAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package qovery

import (
	"context"
	openapiclient "github.com/qovery/qovery-client-go"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
)

func Test_qovery_AlertRulesAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test AlertRulesAPIService CreateAlertRule", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.AlertRulesAPI.CreateAlertRule(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AlertRulesAPIService DeleteAlertRule", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var alertRuleId string

		httpRes, err := apiClient.AlertRulesAPI.DeleteAlertRule(context.Background(), alertRuleId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AlertRulesAPIService EditAlertRule", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var alertRuleId string

		resp, httpRes, err := apiClient.AlertRulesAPI.EditAlertRule(context.Background(), alertRuleId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AlertRulesAPIService GetAlertRule", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var alertRuleId string

		resp, httpRes, err := apiClient.AlertRulesAPI.GetAlertRule(context.Background(), alertRuleId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
