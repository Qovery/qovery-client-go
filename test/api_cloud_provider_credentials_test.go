/*
Qovery API

Testing CloudProviderCredentialsAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package qovery

import (
	"context"
	openapiclient "github.com/qovery/qovery-client-go"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
)

func Test_qovery_CloudProviderCredentialsAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test CloudProviderCredentialsAPIService CreateAWSCredentials", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var organizationId string

		resp, httpRes, err := apiClient.CloudProviderCredentialsAPI.CreateAWSCredentials(context.Background(), organizationId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CloudProviderCredentialsAPIService CreateGcpCredentials", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var organizationId string

		resp, httpRes, err := apiClient.CloudProviderCredentialsAPI.CreateGcpCredentials(context.Background(), organizationId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CloudProviderCredentialsAPIService CreateOnPremiseCredentials", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var organizationId string

		resp, httpRes, err := apiClient.CloudProviderCredentialsAPI.CreateOnPremiseCredentials(context.Background(), organizationId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CloudProviderCredentialsAPIService CreateScalewayCredentials", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var organizationId string

		resp, httpRes, err := apiClient.CloudProviderCredentialsAPI.CreateScalewayCredentials(context.Background(), organizationId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CloudProviderCredentialsAPIService DeleteAWSCredentials", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var credentialsId string
		var organizationId string

		httpRes, err := apiClient.CloudProviderCredentialsAPI.DeleteAWSCredentials(context.Background(), credentialsId, organizationId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CloudProviderCredentialsAPIService DeleteGcpCredentials", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var credentialsId string
		var organizationId string

		httpRes, err := apiClient.CloudProviderCredentialsAPI.DeleteGcpCredentials(context.Background(), credentialsId, organizationId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CloudProviderCredentialsAPIService DeleteOnPremiseCredentials", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var credentialsId string
		var organizationId string

		httpRes, err := apiClient.CloudProviderCredentialsAPI.DeleteOnPremiseCredentials(context.Background(), credentialsId, organizationId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CloudProviderCredentialsAPIService DeleteScalewayCredentials", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var credentialsId string
		var organizationId string

		httpRes, err := apiClient.CloudProviderCredentialsAPI.DeleteScalewayCredentials(context.Background(), credentialsId, organizationId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CloudProviderCredentialsAPIService EditAWSCredentials", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var organizationId string
		var credentialsId string

		resp, httpRes, err := apiClient.CloudProviderCredentialsAPI.EditAWSCredentials(context.Background(), organizationId, credentialsId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CloudProviderCredentialsAPIService EditGcpCredentials", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var organizationId string
		var credentialsId string

		resp, httpRes, err := apiClient.CloudProviderCredentialsAPI.EditGcpCredentials(context.Background(), organizationId, credentialsId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CloudProviderCredentialsAPIService EditOnPremiseCredentials", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var organizationId string
		var credentialsId string

		resp, httpRes, err := apiClient.CloudProviderCredentialsAPI.EditOnPremiseCredentials(context.Background(), organizationId, credentialsId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CloudProviderCredentialsAPIService EditScalewayCredentials", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var organizationId string
		var credentialsId string

		resp, httpRes, err := apiClient.CloudProviderCredentialsAPI.EditScalewayCredentials(context.Background(), organizationId, credentialsId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CloudProviderCredentialsAPIService GetAWSCredentials", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var organizationId string
		var credentialsId string

		resp, httpRes, err := apiClient.CloudProviderCredentialsAPI.GetAWSCredentials(context.Background(), organizationId, credentialsId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CloudProviderCredentialsAPIService GetGcpCredentials", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var organizationId string
		var credentialsId string

		resp, httpRes, err := apiClient.CloudProviderCredentialsAPI.GetGcpCredentials(context.Background(), organizationId, credentialsId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CloudProviderCredentialsAPIService GetOnPremiseCredentials", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var organizationId string
		var credentialsId string

		resp, httpRes, err := apiClient.CloudProviderCredentialsAPI.GetOnPremiseCredentials(context.Background(), organizationId, credentialsId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CloudProviderCredentialsAPIService GetScalewayCredentials", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var organizationId string
		var credentialsId string

		resp, httpRes, err := apiClient.CloudProviderCredentialsAPI.GetScalewayCredentials(context.Background(), organizationId, credentialsId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CloudProviderCredentialsAPIService ListAWSCredentials", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var organizationId string

		resp, httpRes, err := apiClient.CloudProviderCredentialsAPI.ListAWSCredentials(context.Background(), organizationId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CloudProviderCredentialsAPIService ListGcpCredentials", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var organizationId string

		resp, httpRes, err := apiClient.CloudProviderCredentialsAPI.ListGcpCredentials(context.Background(), organizationId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CloudProviderCredentialsAPIService ListOnPremiseCredentials", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var organizationId string

		resp, httpRes, err := apiClient.CloudProviderCredentialsAPI.ListOnPremiseCredentials(context.Background(), organizationId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CloudProviderCredentialsAPIService ListScalewayCredentials", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var organizationId string

		resp, httpRes, err := apiClient.CloudProviderCredentialsAPI.ListScalewayCredentials(context.Background(), organizationId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
