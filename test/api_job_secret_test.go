/*
Qovery API

Testing JobSecretAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package qovery

import (
	"context"
	openapiclient "github.com/qovery/qovery-client-go"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
)

func Test_qovery_JobSecretAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test JobSecretAPIService CreateJobSecret", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var jobId string

		resp, httpRes, err := apiClient.JobSecretAPI.CreateJobSecret(context.Background(), jobId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test JobSecretAPIService CreateJobSecretAlias", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var jobId string
		var secretId string

		resp, httpRes, err := apiClient.JobSecretAPI.CreateJobSecretAlias(context.Background(), jobId, secretId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test JobSecretAPIService CreateJobSecretOverride", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var jobId string
		var secretId string

		resp, httpRes, err := apiClient.JobSecretAPI.CreateJobSecretOverride(context.Background(), jobId, secretId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test JobSecretAPIService DeleteJobSecret", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var jobId string
		var secretId string

		httpRes, err := apiClient.JobSecretAPI.DeleteJobSecret(context.Background(), jobId, secretId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test JobSecretAPIService EditJobSecret", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var jobId string
		var secretId string

		resp, httpRes, err := apiClient.JobSecretAPI.EditJobSecret(context.Background(), jobId, secretId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test JobSecretAPIService ListJobSecrets", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var jobId string

		resp, httpRes, err := apiClient.JobSecretAPI.ListJobSecrets(context.Background(), jobId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
