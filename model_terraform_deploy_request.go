/*
Qovery API

- Qovery is the fastest way to deploy your full-stack apps on any Cloud provider. - ℹ️ The API is stable and still in development.

API version: 1.0.3
Contact: support+api+documentation@qovery.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package qovery

import (
	"encoding/json"
)

// checks if the TerraformDeployRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TerraformDeployRequest{}

// TerraformDeployRequest struct for TerraformDeployRequest
type TerraformDeployRequest struct {
	// Commit to deploy for chart source.
	GitCommitId          *string `json:"git_commit_id,omitempty"`
	DryRun               *bool   `json:"dry_run,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _TerraformDeployRequest TerraformDeployRequest

// NewTerraformDeployRequest instantiates a new TerraformDeployRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTerraformDeployRequest() *TerraformDeployRequest {
	this := TerraformDeployRequest{}
	return &this
}

// NewTerraformDeployRequestWithDefaults instantiates a new TerraformDeployRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTerraformDeployRequestWithDefaults() *TerraformDeployRequest {
	this := TerraformDeployRequest{}
	return &this
}

// GetGitCommitId returns the GitCommitId field value if set, zero value otherwise.
func (o *TerraformDeployRequest) GetGitCommitId() string {
	if o == nil || IsNil(o.GitCommitId) {
		var ret string
		return ret
	}
	return *o.GitCommitId
}

// GetGitCommitIdOk returns a tuple with the GitCommitId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TerraformDeployRequest) GetGitCommitIdOk() (*string, bool) {
	if o == nil || IsNil(o.GitCommitId) {
		return nil, false
	}
	return o.GitCommitId, true
}

// HasGitCommitId returns a boolean if a field has been set.
func (o *TerraformDeployRequest) HasGitCommitId() bool {
	if o != nil && !IsNil(o.GitCommitId) {
		return true
	}

	return false
}

// SetGitCommitId gets a reference to the given string and assigns it to the GitCommitId field.
func (o *TerraformDeployRequest) SetGitCommitId(v string) {
	o.GitCommitId = &v
}

// GetDryRun returns the DryRun field value if set, zero value otherwise.
func (o *TerraformDeployRequest) GetDryRun() bool {
	if o == nil || IsNil(o.DryRun) {
		var ret bool
		return ret
	}
	return *o.DryRun
}

// GetDryRunOk returns a tuple with the DryRun field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TerraformDeployRequest) GetDryRunOk() (*bool, bool) {
	if o == nil || IsNil(o.DryRun) {
		return nil, false
	}
	return o.DryRun, true
}

// HasDryRun returns a boolean if a field has been set.
func (o *TerraformDeployRequest) HasDryRun() bool {
	if o != nil && !IsNil(o.DryRun) {
		return true
	}

	return false
}

// SetDryRun gets a reference to the given bool and assigns it to the DryRun field.
func (o *TerraformDeployRequest) SetDryRun(v bool) {
	o.DryRun = &v
}

func (o TerraformDeployRequest) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TerraformDeployRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.GitCommitId) {
		toSerialize["git_commit_id"] = o.GitCommitId
	}
	if !IsNil(o.DryRun) {
		toSerialize["dry_run"] = o.DryRun
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *TerraformDeployRequest) UnmarshalJSON(data []byte) (err error) {
	varTerraformDeployRequest := _TerraformDeployRequest{}

	err = json.Unmarshal(data, &varTerraformDeployRequest)

	if err != nil {
		return err
	}

	*o = TerraformDeployRequest(varTerraformDeployRequest)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "git_commit_id")
		delete(additionalProperties, "dry_run")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableTerraformDeployRequest struct {
	value *TerraformDeployRequest
	isSet bool
}

func (v NullableTerraformDeployRequest) Get() *TerraformDeployRequest {
	return v.value
}

func (v *NullableTerraformDeployRequest) Set(val *TerraformDeployRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableTerraformDeployRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableTerraformDeployRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTerraformDeployRequest(val *TerraformDeployRequest) *NullableTerraformDeployRequest {
	return &NullableTerraformDeployRequest{value: val, isSet: true}
}

func (v NullableTerraformDeployRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTerraformDeployRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
