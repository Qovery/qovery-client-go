/*
Qovery API

- Qovery is the fastest way to deploy your full-stack apps on any Cloud provider. - ℹ️ The API is stable and still in development.

API version: 1.0.4
Contact: support+api+documentation@qovery.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package qovery

import (
	"encoding/json"
	"fmt"
)

// ServiceSubActionEnum the model 'ServiceSubActionEnum'
type ServiceSubActionEnum string

// List of ServiceSubActionEnum
const (
	SERVICESUBACTIONENUM_NONE                         ServiceSubActionEnum = "NONE"
	SERVICESUBACTIONENUM_TERRAFORM_PLAN_ONLY          ServiceSubActionEnum = "TERRAFORM_PLAN_ONLY"
	SERVICESUBACTIONENUM_TERRAFORM_PLAN_AND_APPLY     ServiceSubActionEnum = "TERRAFORM_PLAN_AND_APPLY"
	SERVICESUBACTIONENUM_TERRAFORM_DESTROY            ServiceSubActionEnum = "TERRAFORM_DESTROY"
	SERVICESUBACTIONENUM_TERRAFORM_FORCE_UNLOCK_STATE ServiceSubActionEnum = "TERRAFORM_FORCE_UNLOCK_STATE"
	SERVICESUBACTIONENUM_TERRAFORM_MIGRATE_STATE      ServiceSubActionEnum = "TERRAFORM_MIGRATE_STATE"
)

// All allowed values of ServiceSubActionEnum enum
var AllowedServiceSubActionEnumEnumValues = []ServiceSubActionEnum{
	"NONE",
	"TERRAFORM_PLAN_ONLY",
	"TERRAFORM_PLAN_AND_APPLY",
	"TERRAFORM_DESTROY",
	"TERRAFORM_FORCE_UNLOCK_STATE",
	"TERRAFORM_MIGRATE_STATE",
}

func (v *ServiceSubActionEnum) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ServiceSubActionEnum(value)
	for _, existing := range AllowedServiceSubActionEnumEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ServiceSubActionEnum", value)
}

// NewServiceSubActionEnumFromValue returns a pointer to a valid ServiceSubActionEnum
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewServiceSubActionEnumFromValue(v string) (*ServiceSubActionEnum, error) {
	ev := ServiceSubActionEnum(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ServiceSubActionEnum: valid values are %v", v, AllowedServiceSubActionEnumEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ServiceSubActionEnum) IsValid() bool {
	for _, existing := range AllowedServiceSubActionEnumEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to ServiceSubActionEnum value
func (v ServiceSubActionEnum) Ptr() *ServiceSubActionEnum {
	return &v
}

type NullableServiceSubActionEnum struct {
	value *ServiceSubActionEnum
	isSet bool
}

func (v NullableServiceSubActionEnum) Get() *ServiceSubActionEnum {
	return v.value
}

func (v *NullableServiceSubActionEnum) Set(val *ServiceSubActionEnum) {
	v.value = val
	v.isSet = true
}

func (v NullableServiceSubActionEnum) IsSet() bool {
	return v.isSet
}

func (v *NullableServiceSubActionEnum) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableServiceSubActionEnum(val *ServiceSubActionEnum) *NullableServiceSubActionEnum {
	return &NullableServiceSubActionEnum{value: val, isSet: true}
}

func (v NullableServiceSubActionEnum) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableServiceSubActionEnum) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
