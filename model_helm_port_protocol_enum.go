/*
Qovery API

- Qovery is the fastest way to deploy your full-stack apps on any Cloud provider. - ℹ️ The API is stable and still in development.

API version: 1.0.4
Contact: support+api+documentation@qovery.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package qovery

import (
	"encoding/json"
	"fmt"
)

// HelmPortProtocolEnum the model 'HelmPortProtocolEnum'
type HelmPortProtocolEnum string

// List of HelmPortProtocolEnum
const (
	HELMPORTPROTOCOLENUM_HTTP HelmPortProtocolEnum = "HTTP"
	HELMPORTPROTOCOLENUM_GRPC HelmPortProtocolEnum = "GRPC"
)

// All allowed values of HelmPortProtocolEnum enum
var AllowedHelmPortProtocolEnumEnumValues = []HelmPortProtocolEnum{
	"HTTP",
	"GRPC",
}

func (v *HelmPortProtocolEnum) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := HelmPortProtocolEnum(value)
	for _, existing := range AllowedHelmPortProtocolEnumEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid HelmPortProtocolEnum", value)
}

// NewHelmPortProtocolEnumFromValue returns a pointer to a valid HelmPortProtocolEnum
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewHelmPortProtocolEnumFromValue(v string) (*HelmPortProtocolEnum, error) {
	ev := HelmPortProtocolEnum(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for HelmPortProtocolEnum: valid values are %v", v, AllowedHelmPortProtocolEnumEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v HelmPortProtocolEnum) IsValid() bool {
	for _, existing := range AllowedHelmPortProtocolEnumEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to HelmPortProtocolEnum value
func (v HelmPortProtocolEnum) Ptr() *HelmPortProtocolEnum {
	return &v
}

type NullableHelmPortProtocolEnum struct {
	value *HelmPortProtocolEnum
	isSet bool
}

func (v NullableHelmPortProtocolEnum) Get() *HelmPortProtocolEnum {
	return v.value
}

func (v *NullableHelmPortProtocolEnum) Set(val *HelmPortProtocolEnum) {
	v.value = val
	v.isSet = true
}

func (v NullableHelmPortProtocolEnum) IsSet() bool {
	return v.isSet
}

func (v *NullableHelmPortProtocolEnum) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableHelmPortProtocolEnum(val *HelmPortProtocolEnum) *NullableHelmPortProtocolEnum {
	return &NullableHelmPortProtocolEnum{value: val, isSet: true}
}

func (v NullableHelmPortProtocolEnum) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableHelmPortProtocolEnum) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
