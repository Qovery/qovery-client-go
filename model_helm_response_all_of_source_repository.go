/*
Qovery API

- Qovery is the fastest way to deploy your full-stack apps on any Cloud provider. - ℹ️ The API is stable and still in development.

API version: 1.0.3
Contact: support+api+documentation@qovery.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package qovery

import (
	"encoding/json"
)

// checks if the HelmResponseAllOfSourceRepository type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &HelmResponseAllOfSourceRepository{}

// HelmResponseAllOfSourceRepository struct for HelmResponseAllOfSourceRepository
type HelmResponseAllOfSourceRepository struct {
	// The name of the chart in the repository
	ChartName *string `json:"chart_name,omitempty"`
	// The version of the chart to use
	ChartVersion *string                                      `json:"chart_version,omitempty"`
	Repository   *HelmResponseAllOfSourceRepositoryRepository `json:"repository,omitempty"`
}

// NewHelmResponseAllOfSourceRepository instantiates a new HelmResponseAllOfSourceRepository object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewHelmResponseAllOfSourceRepository() *HelmResponseAllOfSourceRepository {
	this := HelmResponseAllOfSourceRepository{}
	return &this
}

// NewHelmResponseAllOfSourceRepositoryWithDefaults instantiates a new HelmResponseAllOfSourceRepository object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewHelmResponseAllOfSourceRepositoryWithDefaults() *HelmResponseAllOfSourceRepository {
	this := HelmResponseAllOfSourceRepository{}
	return &this
}

// GetChartName returns the ChartName field value if set, zero value otherwise.
func (o *HelmResponseAllOfSourceRepository) GetChartName() string {
	if o == nil || IsNil(o.ChartName) {
		var ret string
		return ret
	}
	return *o.ChartName
}

// GetChartNameOk returns a tuple with the ChartName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HelmResponseAllOfSourceRepository) GetChartNameOk() (*string, bool) {
	if o == nil || IsNil(o.ChartName) {
		return nil, false
	}
	return o.ChartName, true
}

// HasChartName returns a boolean if a field has been set.
func (o *HelmResponseAllOfSourceRepository) HasChartName() bool {
	if o != nil && !IsNil(o.ChartName) {
		return true
	}

	return false
}

// SetChartName gets a reference to the given string and assigns it to the ChartName field.
func (o *HelmResponseAllOfSourceRepository) SetChartName(v string) {
	o.ChartName = &v
}

// GetChartVersion returns the ChartVersion field value if set, zero value otherwise.
func (o *HelmResponseAllOfSourceRepository) GetChartVersion() string {
	if o == nil || IsNil(o.ChartVersion) {
		var ret string
		return ret
	}
	return *o.ChartVersion
}

// GetChartVersionOk returns a tuple with the ChartVersion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HelmResponseAllOfSourceRepository) GetChartVersionOk() (*string, bool) {
	if o == nil || IsNil(o.ChartVersion) {
		return nil, false
	}
	return o.ChartVersion, true
}

// HasChartVersion returns a boolean if a field has been set.
func (o *HelmResponseAllOfSourceRepository) HasChartVersion() bool {
	if o != nil && !IsNil(o.ChartVersion) {
		return true
	}

	return false
}

// SetChartVersion gets a reference to the given string and assigns it to the ChartVersion field.
func (o *HelmResponseAllOfSourceRepository) SetChartVersion(v string) {
	o.ChartVersion = &v
}

// GetRepository returns the Repository field value if set, zero value otherwise.
func (o *HelmResponseAllOfSourceRepository) GetRepository() HelmResponseAllOfSourceRepositoryRepository {
	if o == nil || IsNil(o.Repository) {
		var ret HelmResponseAllOfSourceRepositoryRepository
		return ret
	}
	return *o.Repository
}

// GetRepositoryOk returns a tuple with the Repository field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HelmResponseAllOfSourceRepository) GetRepositoryOk() (*HelmResponseAllOfSourceRepositoryRepository, bool) {
	if o == nil || IsNil(o.Repository) {
		return nil, false
	}
	return o.Repository, true
}

// HasRepository returns a boolean if a field has been set.
func (o *HelmResponseAllOfSourceRepository) HasRepository() bool {
	if o != nil && !IsNil(o.Repository) {
		return true
	}

	return false
}

// SetRepository gets a reference to the given HelmResponseAllOfSourceRepositoryRepository and assigns it to the Repository field.
func (o *HelmResponseAllOfSourceRepository) SetRepository(v HelmResponseAllOfSourceRepositoryRepository) {
	o.Repository = &v
}

func (o HelmResponseAllOfSourceRepository) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o HelmResponseAllOfSourceRepository) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ChartName) {
		toSerialize["chart_name"] = o.ChartName
	}
	if !IsNil(o.ChartVersion) {
		toSerialize["chart_version"] = o.ChartVersion
	}
	if !IsNil(o.Repository) {
		toSerialize["repository"] = o.Repository
	}
	return toSerialize, nil
}

type NullableHelmResponseAllOfSourceRepository struct {
	value *HelmResponseAllOfSourceRepository
	isSet bool
}

func (v NullableHelmResponseAllOfSourceRepository) Get() *HelmResponseAllOfSourceRepository {
	return v.value
}

func (v *NullableHelmResponseAllOfSourceRepository) Set(val *HelmResponseAllOfSourceRepository) {
	v.value = val
	v.isSet = true
}

func (v NullableHelmResponseAllOfSourceRepository) IsSet() bool {
	return v.isSet
}

func (v *NullableHelmResponseAllOfSourceRepository) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableHelmResponseAllOfSourceRepository(val *HelmResponseAllOfSourceRepository) *NullableHelmResponseAllOfSourceRepository {
	return &NullableHelmResponseAllOfSourceRepository{value: val, isSet: true}
}

func (v NullableHelmResponseAllOfSourceRepository) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableHelmResponseAllOfSourceRepository) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
