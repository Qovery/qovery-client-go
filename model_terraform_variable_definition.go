/*
Qovery API

- Qovery is the fastest way to deploy your full-stack apps on any Cloud provider. - ℹ️ The API is stable and still in development.

API version: 1.0.4
Contact: support+api+documentation@qovery.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package qovery

import (
	"encoding/json"
	"fmt"
)

// checks if the TerraformVariableDefinition type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TerraformVariableDefinition{}

// TerraformVariableDefinition Represents a Terraform variable definition extracted from a Terraform file.
type TerraformVariableDefinition struct {
	// The name of the variable
	Key string `json:"key"`
	// Whether the variable is marked as sensitive
	Sensitive bool `json:"sensitive"`
	// The default value of the variable, or null if no default is provided
	Default NullableString `json:"default,omitempty"`
	// The path inside your git repository where the variable is defined
	Source               string `json:"source"`
	AdditionalProperties map[string]interface{}
}

type _TerraformVariableDefinition TerraformVariableDefinition

// NewTerraformVariableDefinition instantiates a new TerraformVariableDefinition object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTerraformVariableDefinition(key string, sensitive bool, source string) *TerraformVariableDefinition {
	this := TerraformVariableDefinition{}
	this.Key = key
	this.Sensitive = sensitive
	this.Source = source
	return &this
}

// NewTerraformVariableDefinitionWithDefaults instantiates a new TerraformVariableDefinition object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTerraformVariableDefinitionWithDefaults() *TerraformVariableDefinition {
	this := TerraformVariableDefinition{}
	return &this
}

// GetKey returns the Key field value
func (o *TerraformVariableDefinition) GetKey() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Key
}

// GetKeyOk returns a tuple with the Key field value
// and a boolean to check if the value has been set.
func (o *TerraformVariableDefinition) GetKeyOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Key, true
}

// SetKey sets field value
func (o *TerraformVariableDefinition) SetKey(v string) {
	o.Key = v
}

// GetSensitive returns the Sensitive field value
func (o *TerraformVariableDefinition) GetSensitive() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Sensitive
}

// GetSensitiveOk returns a tuple with the Sensitive field value
// and a boolean to check if the value has been set.
func (o *TerraformVariableDefinition) GetSensitiveOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Sensitive, true
}

// SetSensitive sets field value
func (o *TerraformVariableDefinition) SetSensitive(v bool) {
	o.Sensitive = v
}

// GetDefault returns the Default field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TerraformVariableDefinition) GetDefault() string {
	if o == nil || IsNil(o.Default.Get()) {
		var ret string
		return ret
	}
	return *o.Default.Get()
}

// GetDefaultOk returns a tuple with the Default field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TerraformVariableDefinition) GetDefaultOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Default.Get(), o.Default.IsSet()
}

// HasDefault returns a boolean if a field has been set.
func (o *TerraformVariableDefinition) HasDefault() bool {
	if o != nil && o.Default.IsSet() {
		return true
	}

	return false
}

// SetDefault gets a reference to the given NullableString and assigns it to the Default field.
func (o *TerraformVariableDefinition) SetDefault(v string) {
	o.Default.Set(&v)
}

// SetDefaultNil sets the value for Default to be an explicit nil
func (o *TerraformVariableDefinition) SetDefaultNil() {
	o.Default.Set(nil)
}

// UnsetDefault ensures that no value is present for Default, not even an explicit nil
func (o *TerraformVariableDefinition) UnsetDefault() {
	o.Default.Unset()
}

// GetSource returns the Source field value
func (o *TerraformVariableDefinition) GetSource() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Source
}

// GetSourceOk returns a tuple with the Source field value
// and a boolean to check if the value has been set.
func (o *TerraformVariableDefinition) GetSourceOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Source, true
}

// SetSource sets field value
func (o *TerraformVariableDefinition) SetSource(v string) {
	o.Source = v
}

func (o TerraformVariableDefinition) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TerraformVariableDefinition) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["key"] = o.Key
	toSerialize["sensitive"] = o.Sensitive
	if o.Default.IsSet() {
		toSerialize["default"] = o.Default.Get()
	}
	toSerialize["source"] = o.Source

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *TerraformVariableDefinition) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"key",
		"sensitive",
		"source",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varTerraformVariableDefinition := _TerraformVariableDefinition{}

	err = json.Unmarshal(data, &varTerraformVariableDefinition)

	if err != nil {
		return err
	}

	*o = TerraformVariableDefinition(varTerraformVariableDefinition)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "key")
		delete(additionalProperties, "sensitive")
		delete(additionalProperties, "default")
		delete(additionalProperties, "source")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableTerraformVariableDefinition struct {
	value *TerraformVariableDefinition
	isSet bool
}

func (v NullableTerraformVariableDefinition) Get() *TerraformVariableDefinition {
	return v.value
}

func (v *NullableTerraformVariableDefinition) Set(val *TerraformVariableDefinition) {
	v.value = val
	v.isSet = true
}

func (v NullableTerraformVariableDefinition) IsSet() bool {
	return v.isSet
}

func (v *NullableTerraformVariableDefinition) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTerraformVariableDefinition(val *TerraformVariableDefinition) *NullableTerraformVariableDefinition {
	return &NullableTerraformVariableDefinition{value: val, isSet: true}
}

func (v NullableTerraformVariableDefinition) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTerraformVariableDefinition) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
