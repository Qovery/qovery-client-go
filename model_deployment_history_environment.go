/*
Qovery API

- Qovery is the fastest way to deploy your full-stack apps on any Cloud provider. - ℹ️ The API is stable and still in development.

API version: 1.0.3
Contact: support+api+documentation@qovery.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package qovery

import (
	"bytes"
	"encoding/json"
	"fmt"
	"time"
)

// checks if the DeploymentHistoryEnvironment type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DeploymentHistoryEnvironment{}

// DeploymentHistoryEnvironment struct for DeploymentHistoryEnvironment
type DeploymentHistoryEnvironment struct {
	Id           string                          `json:"id"`
	CreatedAt    time.Time                       `json:"created_at"`
	UpdatedAt    *time.Time                      `json:"updated_at,omitempty"`
	Status       *StateEnum                      `json:"status,omitempty"`
	Origin       *OrganizationEventOrigin        `json:"origin,omitempty"`
	TriggeredBy  *string                         `json:"triggered_by,omitempty"`
	Applications []DeploymentHistoryApplication  `json:"applications,omitempty"`
	Containers   []DeploymentHistoryContainer    `json:"containers,omitempty"`
	Databases    []DeploymentHistoryDatabase     `json:"databases,omitempty"`
	Jobs         []DeploymentHistoryJobResponse  `json:"jobs,omitempty"`
	Helms        []DeploymentHistoryHelmResponse `json:"helms,omitempty"`
}

type _DeploymentHistoryEnvironment DeploymentHistoryEnvironment

// NewDeploymentHistoryEnvironment instantiates a new DeploymentHistoryEnvironment object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDeploymentHistoryEnvironment(id string, createdAt time.Time) *DeploymentHistoryEnvironment {
	this := DeploymentHistoryEnvironment{}
	this.Id = id
	this.CreatedAt = createdAt
	return &this
}

// NewDeploymentHistoryEnvironmentWithDefaults instantiates a new DeploymentHistoryEnvironment object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDeploymentHistoryEnvironmentWithDefaults() *DeploymentHistoryEnvironment {
	this := DeploymentHistoryEnvironment{}
	return &this
}

// GetId returns the Id field value
func (o *DeploymentHistoryEnvironment) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *DeploymentHistoryEnvironment) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *DeploymentHistoryEnvironment) SetId(v string) {
	o.Id = v
}

// GetCreatedAt returns the CreatedAt field value
func (o *DeploymentHistoryEnvironment) GetCreatedAt() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value
// and a boolean to check if the value has been set.
func (o *DeploymentHistoryEnvironment) GetCreatedAtOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CreatedAt, true
}

// SetCreatedAt sets field value
func (o *DeploymentHistoryEnvironment) SetCreatedAt(v time.Time) {
	o.CreatedAt = v
}

// GetUpdatedAt returns the UpdatedAt field value if set, zero value otherwise.
func (o *DeploymentHistoryEnvironment) GetUpdatedAt() time.Time {
	if o == nil || IsNil(o.UpdatedAt) {
		var ret time.Time
		return ret
	}
	return *o.UpdatedAt
}

// GetUpdatedAtOk returns a tuple with the UpdatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeploymentHistoryEnvironment) GetUpdatedAtOk() (*time.Time, bool) {
	if o == nil || IsNil(o.UpdatedAt) {
		return nil, false
	}
	return o.UpdatedAt, true
}

// HasUpdatedAt returns a boolean if a field has been set.
func (o *DeploymentHistoryEnvironment) HasUpdatedAt() bool {
	if o != nil && !IsNil(o.UpdatedAt) {
		return true
	}

	return false
}

// SetUpdatedAt gets a reference to the given time.Time and assigns it to the UpdatedAt field.
func (o *DeploymentHistoryEnvironment) SetUpdatedAt(v time.Time) {
	o.UpdatedAt = &v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *DeploymentHistoryEnvironment) GetStatus() StateEnum {
	if o == nil || IsNil(o.Status) {
		var ret StateEnum
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeploymentHistoryEnvironment) GetStatusOk() (*StateEnum, bool) {
	if o == nil || IsNil(o.Status) {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *DeploymentHistoryEnvironment) HasStatus() bool {
	if o != nil && !IsNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given StateEnum and assigns it to the Status field.
func (o *DeploymentHistoryEnvironment) SetStatus(v StateEnum) {
	o.Status = &v
}

// GetOrigin returns the Origin field value if set, zero value otherwise.
func (o *DeploymentHistoryEnvironment) GetOrigin() OrganizationEventOrigin {
	if o == nil || IsNil(o.Origin) {
		var ret OrganizationEventOrigin
		return ret
	}
	return *o.Origin
}

// GetOriginOk returns a tuple with the Origin field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeploymentHistoryEnvironment) GetOriginOk() (*OrganizationEventOrigin, bool) {
	if o == nil || IsNil(o.Origin) {
		return nil, false
	}
	return o.Origin, true
}

// HasOrigin returns a boolean if a field has been set.
func (o *DeploymentHistoryEnvironment) HasOrigin() bool {
	if o != nil && !IsNil(o.Origin) {
		return true
	}

	return false
}

// SetOrigin gets a reference to the given OrganizationEventOrigin and assigns it to the Origin field.
func (o *DeploymentHistoryEnvironment) SetOrigin(v OrganizationEventOrigin) {
	o.Origin = &v
}

// GetTriggeredBy returns the TriggeredBy field value if set, zero value otherwise.
func (o *DeploymentHistoryEnvironment) GetTriggeredBy() string {
	if o == nil || IsNil(o.TriggeredBy) {
		var ret string
		return ret
	}
	return *o.TriggeredBy
}

// GetTriggeredByOk returns a tuple with the TriggeredBy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeploymentHistoryEnvironment) GetTriggeredByOk() (*string, bool) {
	if o == nil || IsNil(o.TriggeredBy) {
		return nil, false
	}
	return o.TriggeredBy, true
}

// HasTriggeredBy returns a boolean if a field has been set.
func (o *DeploymentHistoryEnvironment) HasTriggeredBy() bool {
	if o != nil && !IsNil(o.TriggeredBy) {
		return true
	}

	return false
}

// SetTriggeredBy gets a reference to the given string and assigns it to the TriggeredBy field.
func (o *DeploymentHistoryEnvironment) SetTriggeredBy(v string) {
	o.TriggeredBy = &v
}

// GetApplications returns the Applications field value if set, zero value otherwise.
func (o *DeploymentHistoryEnvironment) GetApplications() []DeploymentHistoryApplication {
	if o == nil || IsNil(o.Applications) {
		var ret []DeploymentHistoryApplication
		return ret
	}
	return o.Applications
}

// GetApplicationsOk returns a tuple with the Applications field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeploymentHistoryEnvironment) GetApplicationsOk() ([]DeploymentHistoryApplication, bool) {
	if o == nil || IsNil(o.Applications) {
		return nil, false
	}
	return o.Applications, true
}

// HasApplications returns a boolean if a field has been set.
func (o *DeploymentHistoryEnvironment) HasApplications() bool {
	if o != nil && !IsNil(o.Applications) {
		return true
	}

	return false
}

// SetApplications gets a reference to the given []DeploymentHistoryApplication and assigns it to the Applications field.
func (o *DeploymentHistoryEnvironment) SetApplications(v []DeploymentHistoryApplication) {
	o.Applications = v
}

// GetContainers returns the Containers field value if set, zero value otherwise.
func (o *DeploymentHistoryEnvironment) GetContainers() []DeploymentHistoryContainer {
	if o == nil || IsNil(o.Containers) {
		var ret []DeploymentHistoryContainer
		return ret
	}
	return o.Containers
}

// GetContainersOk returns a tuple with the Containers field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeploymentHistoryEnvironment) GetContainersOk() ([]DeploymentHistoryContainer, bool) {
	if o == nil || IsNil(o.Containers) {
		return nil, false
	}
	return o.Containers, true
}

// HasContainers returns a boolean if a field has been set.
func (o *DeploymentHistoryEnvironment) HasContainers() bool {
	if o != nil && !IsNil(o.Containers) {
		return true
	}

	return false
}

// SetContainers gets a reference to the given []DeploymentHistoryContainer and assigns it to the Containers field.
func (o *DeploymentHistoryEnvironment) SetContainers(v []DeploymentHistoryContainer) {
	o.Containers = v
}

// GetDatabases returns the Databases field value if set, zero value otherwise.
func (o *DeploymentHistoryEnvironment) GetDatabases() []DeploymentHistoryDatabase {
	if o == nil || IsNil(o.Databases) {
		var ret []DeploymentHistoryDatabase
		return ret
	}
	return o.Databases
}

// GetDatabasesOk returns a tuple with the Databases field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeploymentHistoryEnvironment) GetDatabasesOk() ([]DeploymentHistoryDatabase, bool) {
	if o == nil || IsNil(o.Databases) {
		return nil, false
	}
	return o.Databases, true
}

// HasDatabases returns a boolean if a field has been set.
func (o *DeploymentHistoryEnvironment) HasDatabases() bool {
	if o != nil && !IsNil(o.Databases) {
		return true
	}

	return false
}

// SetDatabases gets a reference to the given []DeploymentHistoryDatabase and assigns it to the Databases field.
func (o *DeploymentHistoryEnvironment) SetDatabases(v []DeploymentHistoryDatabase) {
	o.Databases = v
}

// GetJobs returns the Jobs field value if set, zero value otherwise.
func (o *DeploymentHistoryEnvironment) GetJobs() []DeploymentHistoryJobResponse {
	if o == nil || IsNil(o.Jobs) {
		var ret []DeploymentHistoryJobResponse
		return ret
	}
	return o.Jobs
}

// GetJobsOk returns a tuple with the Jobs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeploymentHistoryEnvironment) GetJobsOk() ([]DeploymentHistoryJobResponse, bool) {
	if o == nil || IsNil(o.Jobs) {
		return nil, false
	}
	return o.Jobs, true
}

// HasJobs returns a boolean if a field has been set.
func (o *DeploymentHistoryEnvironment) HasJobs() bool {
	if o != nil && !IsNil(o.Jobs) {
		return true
	}

	return false
}

// SetJobs gets a reference to the given []DeploymentHistoryJobResponse and assigns it to the Jobs field.
func (o *DeploymentHistoryEnvironment) SetJobs(v []DeploymentHistoryJobResponse) {
	o.Jobs = v
}

// GetHelms returns the Helms field value if set, zero value otherwise.
func (o *DeploymentHistoryEnvironment) GetHelms() []DeploymentHistoryHelmResponse {
	if o == nil || IsNil(o.Helms) {
		var ret []DeploymentHistoryHelmResponse
		return ret
	}
	return o.Helms
}

// GetHelmsOk returns a tuple with the Helms field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeploymentHistoryEnvironment) GetHelmsOk() ([]DeploymentHistoryHelmResponse, bool) {
	if o == nil || IsNil(o.Helms) {
		return nil, false
	}
	return o.Helms, true
}

// HasHelms returns a boolean if a field has been set.
func (o *DeploymentHistoryEnvironment) HasHelms() bool {
	if o != nil && !IsNil(o.Helms) {
		return true
	}

	return false
}

// SetHelms gets a reference to the given []DeploymentHistoryHelmResponse and assigns it to the Helms field.
func (o *DeploymentHistoryEnvironment) SetHelms(v []DeploymentHistoryHelmResponse) {
	o.Helms = v
}

func (o DeploymentHistoryEnvironment) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DeploymentHistoryEnvironment) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["created_at"] = o.CreatedAt
	if !IsNil(o.UpdatedAt) {
		toSerialize["updated_at"] = o.UpdatedAt
	}
	if !IsNil(o.Status) {
		toSerialize["status"] = o.Status
	}
	if !IsNil(o.Origin) {
		toSerialize["origin"] = o.Origin
	}
	if !IsNil(o.TriggeredBy) {
		toSerialize["triggered_by"] = o.TriggeredBy
	}
	if !IsNil(o.Applications) {
		toSerialize["applications"] = o.Applications
	}
	if !IsNil(o.Containers) {
		toSerialize["containers"] = o.Containers
	}
	if !IsNil(o.Databases) {
		toSerialize["databases"] = o.Databases
	}
	if !IsNil(o.Jobs) {
		toSerialize["jobs"] = o.Jobs
	}
	if !IsNil(o.Helms) {
		toSerialize["helms"] = o.Helms
	}
	return toSerialize, nil
}

func (o *DeploymentHistoryEnvironment) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"created_at",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varDeploymentHistoryEnvironment := _DeploymentHistoryEnvironment{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varDeploymentHistoryEnvironment)

	if err != nil {
		return err
	}

	*o = DeploymentHistoryEnvironment(varDeploymentHistoryEnvironment)

	return err
}

type NullableDeploymentHistoryEnvironment struct {
	value *DeploymentHistoryEnvironment
	isSet bool
}

func (v NullableDeploymentHistoryEnvironment) Get() *DeploymentHistoryEnvironment {
	return v.value
}

func (v *NullableDeploymentHistoryEnvironment) Set(val *DeploymentHistoryEnvironment) {
	v.value = val
	v.isSet = true
}

func (v NullableDeploymentHistoryEnvironment) IsSet() bool {
	return v.isSet
}

func (v *NullableDeploymentHistoryEnvironment) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDeploymentHistoryEnvironment(val *DeploymentHistoryEnvironment) *NullableDeploymentHistoryEnvironment {
	return &NullableDeploymentHistoryEnvironment{value: val, isSet: true}
}

func (v NullableDeploymentHistoryEnvironment) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDeploymentHistoryEnvironment) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
