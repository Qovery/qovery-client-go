/*
Qovery API

- Qovery is the fastest way to deploy your full-stack apps on any Cloud provider. - ℹ️ The API is stable and still in development.

API version: 1.0.3
Contact: support+api+documentation@qovery.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package qovery

import (
	"encoding/json"
	"time"
)

// DeploymentHistoryEnvironment struct for DeploymentHistoryEnvironment
type DeploymentHistoryEnvironment struct {
	Id           string                         `json:"id"`
	CreatedAt    time.Time                      `json:"created_at"`
	UpdatedAt    *time.Time                     `json:"updated_at,omitempty"`
	Status       *StateEnum                     `json:"status,omitempty"`
	Applications []DeploymentHistoryApplication `json:"applications,omitempty"`
	Databases    []DeploymentHistoryDatabase    `json:"databases,omitempty"`
}

// NewDeploymentHistoryEnvironment instantiates a new DeploymentHistoryEnvironment object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDeploymentHistoryEnvironment(id string, createdAt time.Time) *DeploymentHistoryEnvironment {
	this := DeploymentHistoryEnvironment{}
	this.Id = id
	this.CreatedAt = createdAt
	return &this
}

// NewDeploymentHistoryEnvironmentWithDefaults instantiates a new DeploymentHistoryEnvironment object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDeploymentHistoryEnvironmentWithDefaults() *DeploymentHistoryEnvironment {
	this := DeploymentHistoryEnvironment{}
	return &this
}

// GetId returns the Id field value
func (o *DeploymentHistoryEnvironment) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *DeploymentHistoryEnvironment) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *DeploymentHistoryEnvironment) SetId(v string) {
	o.Id = v
}

// GetCreatedAt returns the CreatedAt field value
func (o *DeploymentHistoryEnvironment) GetCreatedAt() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value
// and a boolean to check if the value has been set.
func (o *DeploymentHistoryEnvironment) GetCreatedAtOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CreatedAt, true
}

// SetCreatedAt sets field value
func (o *DeploymentHistoryEnvironment) SetCreatedAt(v time.Time) {
	o.CreatedAt = v
}

// GetUpdatedAt returns the UpdatedAt field value if set, zero value otherwise.
func (o *DeploymentHistoryEnvironment) GetUpdatedAt() time.Time {
	if o == nil || o.UpdatedAt == nil {
		var ret time.Time
		return ret
	}
	return *o.UpdatedAt
}

// GetUpdatedAtOk returns a tuple with the UpdatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeploymentHistoryEnvironment) GetUpdatedAtOk() (*time.Time, bool) {
	if o == nil || o.UpdatedAt == nil {
		return nil, false
	}
	return o.UpdatedAt, true
}

// HasUpdatedAt returns a boolean if a field has been set.
func (o *DeploymentHistoryEnvironment) HasUpdatedAt() bool {
	if o != nil && o.UpdatedAt != nil {
		return true
	}

	return false
}

// SetUpdatedAt gets a reference to the given time.Time and assigns it to the UpdatedAt field.
func (o *DeploymentHistoryEnvironment) SetUpdatedAt(v time.Time) {
	o.UpdatedAt = &v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *DeploymentHistoryEnvironment) GetStatus() StateEnum {
	if o == nil || o.Status == nil {
		var ret StateEnum
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeploymentHistoryEnvironment) GetStatusOk() (*StateEnum, bool) {
	if o == nil || o.Status == nil {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *DeploymentHistoryEnvironment) HasStatus() bool {
	if o != nil && o.Status != nil {
		return true
	}

	return false
}

// SetStatus gets a reference to the given StateEnum and assigns it to the Status field.
func (o *DeploymentHistoryEnvironment) SetStatus(v StateEnum) {
	o.Status = &v
}

// GetApplications returns the Applications field value if set, zero value otherwise.
func (o *DeploymentHistoryEnvironment) GetApplications() []DeploymentHistoryApplication {
	if o == nil || o.Applications == nil {
		var ret []DeploymentHistoryApplication
		return ret
	}
	return o.Applications
}

// GetApplicationsOk returns a tuple with the Applications field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeploymentHistoryEnvironment) GetApplicationsOk() ([]DeploymentHistoryApplication, bool) {
	if o == nil || o.Applications == nil {
		return nil, false
	}
	return o.Applications, true
}

// HasApplications returns a boolean if a field has been set.
func (o *DeploymentHistoryEnvironment) HasApplications() bool {
	if o != nil && o.Applications != nil {
		return true
	}

	return false
}

// SetApplications gets a reference to the given []DeploymentHistoryApplication and assigns it to the Applications field.
func (o *DeploymentHistoryEnvironment) SetApplications(v []DeploymentHistoryApplication) {
	o.Applications = v
}

// GetDatabases returns the Databases field value if set, zero value otherwise.
func (o *DeploymentHistoryEnvironment) GetDatabases() []DeploymentHistoryDatabase {
	if o == nil || o.Databases == nil {
		var ret []DeploymentHistoryDatabase
		return ret
	}
	return o.Databases
}

// GetDatabasesOk returns a tuple with the Databases field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeploymentHistoryEnvironment) GetDatabasesOk() ([]DeploymentHistoryDatabase, bool) {
	if o == nil || o.Databases == nil {
		return nil, false
	}
	return o.Databases, true
}

// HasDatabases returns a boolean if a field has been set.
func (o *DeploymentHistoryEnvironment) HasDatabases() bool {
	if o != nil && o.Databases != nil {
		return true
	}

	return false
}

// SetDatabases gets a reference to the given []DeploymentHistoryDatabase and assigns it to the Databases field.
func (o *DeploymentHistoryEnvironment) SetDatabases(v []DeploymentHistoryDatabase) {
	o.Databases = v
}

func (o DeploymentHistoryEnvironment) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["id"] = o.Id
	}
	if true {
		toSerialize["created_at"] = o.CreatedAt
	}
	if o.UpdatedAt != nil {
		toSerialize["updated_at"] = o.UpdatedAt
	}
	if o.Status != nil {
		toSerialize["status"] = o.Status
	}
	if o.Applications != nil {
		toSerialize["applications"] = o.Applications
	}
	if o.Databases != nil {
		toSerialize["databases"] = o.Databases
	}
	return json.Marshal(toSerialize)
}

type NullableDeploymentHistoryEnvironment struct {
	value *DeploymentHistoryEnvironment
	isSet bool
}

func (v NullableDeploymentHistoryEnvironment) Get() *DeploymentHistoryEnvironment {
	return v.value
}

func (v *NullableDeploymentHistoryEnvironment) Set(val *DeploymentHistoryEnvironment) {
	v.value = val
	v.isSet = true
}

func (v NullableDeploymentHistoryEnvironment) IsSet() bool {
	return v.isSet
}

func (v *NullableDeploymentHistoryEnvironment) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDeploymentHistoryEnvironment(val *DeploymentHistoryEnvironment) *NullableDeploymentHistoryEnvironment {
	return &NullableDeploymentHistoryEnvironment{value: val, isSet: true}
}

func (v NullableDeploymentHistoryEnvironment) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDeploymentHistoryEnvironment) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
