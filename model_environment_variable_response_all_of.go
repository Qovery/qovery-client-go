/*
Qovery API

- Qovery is the fastest way to deploy your full-stack apps on any Cloud provider. - ℹ️ The API is stable and still in development.

API version: 1.0.3
Contact: support+api+documentation@qovery.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package qovery

import (
	"encoding/json"
)

// EnvironmentVariableResponseAllOf struct for EnvironmentVariableResponseAllOf
type EnvironmentVariableResponseAllOf struct {
	OverriddenVariable *EnvironmentVariableResponseAllOfOverriddenVariable `json:"overridden_variable,omitempty"`
	AliasedVariable    *EnvironmentVariableResponseAllOfAliasedVariable    `json:"aliased_variable,omitempty"`
	Scope              EnvironmentVariableScopeEnum                        `json:"scope"`
	ServiceName        *string                                             `json:"service_name,omitempty"`
}

// NewEnvironmentVariableResponseAllOf instantiates a new EnvironmentVariableResponseAllOf object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEnvironmentVariableResponseAllOf(scope EnvironmentVariableScopeEnum) *EnvironmentVariableResponseAllOf {
	this := EnvironmentVariableResponseAllOf{}
	this.Scope = scope
	return &this
}

// NewEnvironmentVariableResponseAllOfWithDefaults instantiates a new EnvironmentVariableResponseAllOf object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEnvironmentVariableResponseAllOfWithDefaults() *EnvironmentVariableResponseAllOf {
	this := EnvironmentVariableResponseAllOf{}
	return &this
}

// GetOverriddenVariable returns the OverriddenVariable field value if set, zero value otherwise.
func (o *EnvironmentVariableResponseAllOf) GetOverriddenVariable() EnvironmentVariableResponseAllOfOverriddenVariable {
	if o == nil || o.OverriddenVariable == nil {
		var ret EnvironmentVariableResponseAllOfOverriddenVariable
		return ret
	}
	return *o.OverriddenVariable
}

// GetOverriddenVariableOk returns a tuple with the OverriddenVariable field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EnvironmentVariableResponseAllOf) GetOverriddenVariableOk() (*EnvironmentVariableResponseAllOfOverriddenVariable, bool) {
	if o == nil || o.OverriddenVariable == nil {
		return nil, false
	}
	return o.OverriddenVariable, true
}

// HasOverriddenVariable returns a boolean if a field has been set.
func (o *EnvironmentVariableResponseAllOf) HasOverriddenVariable() bool {
	if o != nil && o.OverriddenVariable != nil {
		return true
	}

	return false
}

// SetOverriddenVariable gets a reference to the given EnvironmentVariableResponseAllOfOverriddenVariable and assigns it to the OverriddenVariable field.
func (o *EnvironmentVariableResponseAllOf) SetOverriddenVariable(v EnvironmentVariableResponseAllOfOverriddenVariable) {
	o.OverriddenVariable = &v
}

// GetAliasedVariable returns the AliasedVariable field value if set, zero value otherwise.
func (o *EnvironmentVariableResponseAllOf) GetAliasedVariable() EnvironmentVariableResponseAllOfAliasedVariable {
	if o == nil || o.AliasedVariable == nil {
		var ret EnvironmentVariableResponseAllOfAliasedVariable
		return ret
	}
	return *o.AliasedVariable
}

// GetAliasedVariableOk returns a tuple with the AliasedVariable field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EnvironmentVariableResponseAllOf) GetAliasedVariableOk() (*EnvironmentVariableResponseAllOfAliasedVariable, bool) {
	if o == nil || o.AliasedVariable == nil {
		return nil, false
	}
	return o.AliasedVariable, true
}

// HasAliasedVariable returns a boolean if a field has been set.
func (o *EnvironmentVariableResponseAllOf) HasAliasedVariable() bool {
	if o != nil && o.AliasedVariable != nil {
		return true
	}

	return false
}

// SetAliasedVariable gets a reference to the given EnvironmentVariableResponseAllOfAliasedVariable and assigns it to the AliasedVariable field.
func (o *EnvironmentVariableResponseAllOf) SetAliasedVariable(v EnvironmentVariableResponseAllOfAliasedVariable) {
	o.AliasedVariable = &v
}

// GetScope returns the Scope field value
func (o *EnvironmentVariableResponseAllOf) GetScope() EnvironmentVariableScopeEnum {
	if o == nil {
		var ret EnvironmentVariableScopeEnum
		return ret
	}

	return o.Scope
}

// GetScopeOk returns a tuple with the Scope field value
// and a boolean to check if the value has been set.
func (o *EnvironmentVariableResponseAllOf) GetScopeOk() (*EnvironmentVariableScopeEnum, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Scope, true
}

// SetScope sets field value
func (o *EnvironmentVariableResponseAllOf) SetScope(v EnvironmentVariableScopeEnum) {
	o.Scope = v
}

// GetServiceName returns the ServiceName field value if set, zero value otherwise.
func (o *EnvironmentVariableResponseAllOf) GetServiceName() string {
	if o == nil || o.ServiceName == nil {
		var ret string
		return ret
	}
	return *o.ServiceName
}

// GetServiceNameOk returns a tuple with the ServiceName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EnvironmentVariableResponseAllOf) GetServiceNameOk() (*string, bool) {
	if o == nil || o.ServiceName == nil {
		return nil, false
	}
	return o.ServiceName, true
}

// HasServiceName returns a boolean if a field has been set.
func (o *EnvironmentVariableResponseAllOf) HasServiceName() bool {
	if o != nil && o.ServiceName != nil {
		return true
	}

	return false
}

// SetServiceName gets a reference to the given string and assigns it to the ServiceName field.
func (o *EnvironmentVariableResponseAllOf) SetServiceName(v string) {
	o.ServiceName = &v
}

func (o EnvironmentVariableResponseAllOf) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.OverriddenVariable != nil {
		toSerialize["overridden_variable"] = o.OverriddenVariable
	}
	if o.AliasedVariable != nil {
		toSerialize["aliased_variable"] = o.AliasedVariable
	}
	if true {
		toSerialize["scope"] = o.Scope
	}
	if o.ServiceName != nil {
		toSerialize["service_name"] = o.ServiceName
	}
	return json.Marshal(toSerialize)
}

type NullableEnvironmentVariableResponseAllOf struct {
	value *EnvironmentVariableResponseAllOf
	isSet bool
}

func (v NullableEnvironmentVariableResponseAllOf) Get() *EnvironmentVariableResponseAllOf {
	return v.value
}

func (v *NullableEnvironmentVariableResponseAllOf) Set(val *EnvironmentVariableResponseAllOf) {
	v.value = val
	v.isSet = true
}

func (v NullableEnvironmentVariableResponseAllOf) IsSet() bool {
	return v.isSet
}

func (v *NullableEnvironmentVariableResponseAllOf) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEnvironmentVariableResponseAllOf(val *EnvironmentVariableResponseAllOf) *NullableEnvironmentVariableResponseAllOf {
	return &NullableEnvironmentVariableResponseAllOf{value: val, isSet: true}
}

func (v NullableEnvironmentVariableResponseAllOf) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEnvironmentVariableResponseAllOf) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
