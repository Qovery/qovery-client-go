/*
Qovery API

- Qovery is the fastest way to deploy your full-stack apps on any Cloud provider. - ℹ️ The API is stable and still in development.

API version: 1.0.4
Contact: support+api+documentation@qovery.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package qovery

import (
	"encoding/json"
	"fmt"
)

// checks if the TfVarsDiscoveryModeSpecificPaths type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TfVarsDiscoveryModeSpecificPaths{}

// TfVarsDiscoveryModeSpecificPaths Discover tfvars files at specific paths only
type TfVarsDiscoveryModeSpecificPaths struct {
	// Discriminator for specific paths mode
	Type string `json:"type"`
	// List of specific paths to tfvars files
	Paths                []string `json:"paths"`
	AdditionalProperties map[string]interface{}
}

type _TfVarsDiscoveryModeSpecificPaths TfVarsDiscoveryModeSpecificPaths

// NewTfVarsDiscoveryModeSpecificPaths instantiates a new TfVarsDiscoveryModeSpecificPaths object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTfVarsDiscoveryModeSpecificPaths(type_ string, paths []string) *TfVarsDiscoveryModeSpecificPaths {
	this := TfVarsDiscoveryModeSpecificPaths{}
	this.Type = type_
	this.Paths = paths
	return &this
}

// NewTfVarsDiscoveryModeSpecificPathsWithDefaults instantiates a new TfVarsDiscoveryModeSpecificPaths object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTfVarsDiscoveryModeSpecificPathsWithDefaults() *TfVarsDiscoveryModeSpecificPaths {
	this := TfVarsDiscoveryModeSpecificPaths{}
	return &this
}

// GetType returns the Type field value
func (o *TfVarsDiscoveryModeSpecificPaths) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *TfVarsDiscoveryModeSpecificPaths) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *TfVarsDiscoveryModeSpecificPaths) SetType(v string) {
	o.Type = v
}

// GetPaths returns the Paths field value
func (o *TfVarsDiscoveryModeSpecificPaths) GetPaths() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.Paths
}

// GetPathsOk returns a tuple with the Paths field value
// and a boolean to check if the value has been set.
func (o *TfVarsDiscoveryModeSpecificPaths) GetPathsOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Paths, true
}

// SetPaths sets field value
func (o *TfVarsDiscoveryModeSpecificPaths) SetPaths(v []string) {
	o.Paths = v
}

func (o TfVarsDiscoveryModeSpecificPaths) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TfVarsDiscoveryModeSpecificPaths) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["type"] = o.Type
	toSerialize["paths"] = o.Paths

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *TfVarsDiscoveryModeSpecificPaths) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"type",
		"paths",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varTfVarsDiscoveryModeSpecificPaths := _TfVarsDiscoveryModeSpecificPaths{}

	err = json.Unmarshal(data, &varTfVarsDiscoveryModeSpecificPaths)

	if err != nil {
		return err
	}

	*o = TfVarsDiscoveryModeSpecificPaths(varTfVarsDiscoveryModeSpecificPaths)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "type")
		delete(additionalProperties, "paths")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableTfVarsDiscoveryModeSpecificPaths struct {
	value *TfVarsDiscoveryModeSpecificPaths
	isSet bool
}

func (v NullableTfVarsDiscoveryModeSpecificPaths) Get() *TfVarsDiscoveryModeSpecificPaths {
	return v.value
}

func (v *NullableTfVarsDiscoveryModeSpecificPaths) Set(val *TfVarsDiscoveryModeSpecificPaths) {
	v.value = val
	v.isSet = true
}

func (v NullableTfVarsDiscoveryModeSpecificPaths) IsSet() bool {
	return v.isSet
}

func (v *NullableTfVarsDiscoveryModeSpecificPaths) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTfVarsDiscoveryModeSpecificPaths(val *TfVarsDiscoveryModeSpecificPaths) *NullableTfVarsDiscoveryModeSpecificPaths {
	return &NullableTfVarsDiscoveryModeSpecificPaths{value: val, isSet: true}
}

func (v NullableTfVarsDiscoveryModeSpecificPaths) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTfVarsDiscoveryModeSpecificPaths) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
