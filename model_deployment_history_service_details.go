/*
Qovery API

- Qovery is the fastest way to deploy your full-stack apps on any Cloud provider. - ℹ️ The API is stable and still in development.

API version: 1.0.4
Contact: support+api+documentation@qovery.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package qovery

import (
	"encoding/json"
	"fmt"
)

// DeploymentHistoryServiceDetails - struct for DeploymentHistoryServiceDetails
type DeploymentHistoryServiceDetails struct {
	DeploymentHistoryServiceDetailsOneOf  *DeploymentHistoryServiceDetailsOneOf
	DeploymentHistoryServiceDetailsOneOf1 *DeploymentHistoryServiceDetailsOneOf1
	DeploymentHistoryServiceDetailsOneOf2 *DeploymentHistoryServiceDetailsOneOf2
	DeploymentHistoryServiceDetailsOneOf3 *DeploymentHistoryServiceDetailsOneOf3
}

// DeploymentHistoryServiceDetailsOneOfAsDeploymentHistoryServiceDetails is a convenience function that returns DeploymentHistoryServiceDetailsOneOf wrapped in DeploymentHistoryServiceDetails
func DeploymentHistoryServiceDetailsOneOfAsDeploymentHistoryServiceDetails(v *DeploymentHistoryServiceDetailsOneOf) DeploymentHistoryServiceDetails {
	return DeploymentHistoryServiceDetails{
		DeploymentHistoryServiceDetailsOneOf: v,
	}
}

// DeploymentHistoryServiceDetailsOneOf1AsDeploymentHistoryServiceDetails is a convenience function that returns DeploymentHistoryServiceDetailsOneOf1 wrapped in DeploymentHistoryServiceDetails
func DeploymentHistoryServiceDetailsOneOf1AsDeploymentHistoryServiceDetails(v *DeploymentHistoryServiceDetailsOneOf1) DeploymentHistoryServiceDetails {
	return DeploymentHistoryServiceDetails{
		DeploymentHistoryServiceDetailsOneOf1: v,
	}
}

// DeploymentHistoryServiceDetailsOneOf2AsDeploymentHistoryServiceDetails is a convenience function that returns DeploymentHistoryServiceDetailsOneOf2 wrapped in DeploymentHistoryServiceDetails
func DeploymentHistoryServiceDetailsOneOf2AsDeploymentHistoryServiceDetails(v *DeploymentHistoryServiceDetailsOneOf2) DeploymentHistoryServiceDetails {
	return DeploymentHistoryServiceDetails{
		DeploymentHistoryServiceDetailsOneOf2: v,
	}
}

// DeploymentHistoryServiceDetailsOneOf3AsDeploymentHistoryServiceDetails is a convenience function that returns DeploymentHistoryServiceDetailsOneOf3 wrapped in DeploymentHistoryServiceDetails
func DeploymentHistoryServiceDetailsOneOf3AsDeploymentHistoryServiceDetails(v *DeploymentHistoryServiceDetailsOneOf3) DeploymentHistoryServiceDetails {
	return DeploymentHistoryServiceDetails{
		DeploymentHistoryServiceDetailsOneOf3: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *DeploymentHistoryServiceDetails) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into DeploymentHistoryServiceDetailsOneOf
	err = json.Unmarshal(data, &dst.DeploymentHistoryServiceDetailsOneOf)
	if err == nil {
		jsonDeploymentHistoryServiceDetailsOneOf, _ := json.Marshal(dst.DeploymentHistoryServiceDetailsOneOf)
		if string(jsonDeploymentHistoryServiceDetailsOneOf) == "{}" { // empty struct
			dst.DeploymentHistoryServiceDetailsOneOf = nil
		} else {
			match++
		}
	} else {
		dst.DeploymentHistoryServiceDetailsOneOf = nil
	}

	// try to unmarshal data into DeploymentHistoryServiceDetailsOneOf1
	err = json.Unmarshal(data, &dst.DeploymentHistoryServiceDetailsOneOf1)
	if err == nil {
		jsonDeploymentHistoryServiceDetailsOneOf1, _ := json.Marshal(dst.DeploymentHistoryServiceDetailsOneOf1)
		if string(jsonDeploymentHistoryServiceDetailsOneOf1) == "{}" { // empty struct
			dst.DeploymentHistoryServiceDetailsOneOf1 = nil
		} else {
			match++
		}
	} else {
		dst.DeploymentHistoryServiceDetailsOneOf1 = nil
	}

	// try to unmarshal data into DeploymentHistoryServiceDetailsOneOf2
	err = json.Unmarshal(data, &dst.DeploymentHistoryServiceDetailsOneOf2)
	if err == nil {
		jsonDeploymentHistoryServiceDetailsOneOf2, _ := json.Marshal(dst.DeploymentHistoryServiceDetailsOneOf2)
		if string(jsonDeploymentHistoryServiceDetailsOneOf2) == "{}" { // empty struct
			dst.DeploymentHistoryServiceDetailsOneOf2 = nil
		} else {
			match++
		}
	} else {
		dst.DeploymentHistoryServiceDetailsOneOf2 = nil
	}

	// try to unmarshal data into DeploymentHistoryServiceDetailsOneOf3
	err = json.Unmarshal(data, &dst.DeploymentHistoryServiceDetailsOneOf3)
	if err == nil {
		jsonDeploymentHistoryServiceDetailsOneOf3, _ := json.Marshal(dst.DeploymentHistoryServiceDetailsOneOf3)
		if string(jsonDeploymentHistoryServiceDetailsOneOf3) == "{}" { // empty struct
			dst.DeploymentHistoryServiceDetailsOneOf3 = nil
		} else {
			match++
		}
	} else {
		dst.DeploymentHistoryServiceDetailsOneOf3 = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.DeploymentHistoryServiceDetailsOneOf = nil
		dst.DeploymentHistoryServiceDetailsOneOf1 = nil
		dst.DeploymentHistoryServiceDetailsOneOf2 = nil
		dst.DeploymentHistoryServiceDetailsOneOf3 = nil

		return fmt.Errorf("data matches more than one schema in oneOf(DeploymentHistoryServiceDetails)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(DeploymentHistoryServiceDetails)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src DeploymentHistoryServiceDetails) MarshalJSON() ([]byte, error) {
	if src.DeploymentHistoryServiceDetailsOneOf != nil {
		return json.Marshal(&src.DeploymentHistoryServiceDetailsOneOf)
	}

	if src.DeploymentHistoryServiceDetailsOneOf1 != nil {
		return json.Marshal(&src.DeploymentHistoryServiceDetailsOneOf1)
	}

	if src.DeploymentHistoryServiceDetailsOneOf2 != nil {
		return json.Marshal(&src.DeploymentHistoryServiceDetailsOneOf2)
	}

	if src.DeploymentHistoryServiceDetailsOneOf3 != nil {
		return json.Marshal(&src.DeploymentHistoryServiceDetailsOneOf3)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *DeploymentHistoryServiceDetails) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.DeploymentHistoryServiceDetailsOneOf != nil {
		return obj.DeploymentHistoryServiceDetailsOneOf
	}

	if obj.DeploymentHistoryServiceDetailsOneOf1 != nil {
		return obj.DeploymentHistoryServiceDetailsOneOf1
	}

	if obj.DeploymentHistoryServiceDetailsOneOf2 != nil {
		return obj.DeploymentHistoryServiceDetailsOneOf2
	}

	if obj.DeploymentHistoryServiceDetailsOneOf3 != nil {
		return obj.DeploymentHistoryServiceDetailsOneOf3
	}

	// all schemas are nil
	return nil
}

type NullableDeploymentHistoryServiceDetails struct {
	value *DeploymentHistoryServiceDetails
	isSet bool
}

func (v NullableDeploymentHistoryServiceDetails) Get() *DeploymentHistoryServiceDetails {
	return v.value
}

func (v *NullableDeploymentHistoryServiceDetails) Set(val *DeploymentHistoryServiceDetails) {
	v.value = val
	v.isSet = true
}

func (v NullableDeploymentHistoryServiceDetails) IsSet() bool {
	return v.isSet
}

func (v *NullableDeploymentHistoryServiceDetails) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDeploymentHistoryServiceDetails(val *DeploymentHistoryServiceDetails) *NullableDeploymentHistoryServiceDetails {
	return &NullableDeploymentHistoryServiceDetails{value: val, isSet: true}
}

func (v NullableDeploymentHistoryServiceDetails) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDeploymentHistoryServiceDetails) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
