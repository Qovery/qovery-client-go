/*
Qovery API

- Qovery is the fastest way to deploy your full-stack apps on any Cloud provider. - ℹ️ The API is stable and still in development.

API version: 1.0.3
Contact: support+api+documentation@qovery.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package qovery

import (
	"encoding/json"
)

// checks if the HelmValuesGitRepositoryRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &HelmValuesGitRepositoryRequest{}

// HelmValuesGitRepositoryRequest struct for HelmValuesGitRepositoryRequest
type HelmValuesGitRepositoryRequest struct {
	// application git repository URL
	Url string `json:"url"`
	// Name of the branch to use. This is optional If not specified, then the branch used is the `main` or `master` one
	Branch string `json:"branch"`
	// List of path inside your git repository to locate values file. Must start by a /
	Paths []string `json:"paths"`
	// The git token id on Qovery side
	GitTokenId NullableString `json:"git_token_id,omitempty"`
}

// NewHelmValuesGitRepositoryRequest instantiates a new HelmValuesGitRepositoryRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewHelmValuesGitRepositoryRequest(url string, branch string, paths []string) *HelmValuesGitRepositoryRequest {
	this := HelmValuesGitRepositoryRequest{}
	this.Url = url
	this.Branch = branch
	this.Paths = paths
	return &this
}

// NewHelmValuesGitRepositoryRequestWithDefaults instantiates a new HelmValuesGitRepositoryRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewHelmValuesGitRepositoryRequestWithDefaults() *HelmValuesGitRepositoryRequest {
	this := HelmValuesGitRepositoryRequest{}
	return &this
}

// GetUrl returns the Url field value
func (o *HelmValuesGitRepositoryRequest) GetUrl() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Url
}

// GetUrlOk returns a tuple with the Url field value
// and a boolean to check if the value has been set.
func (o *HelmValuesGitRepositoryRequest) GetUrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Url, true
}

// SetUrl sets field value
func (o *HelmValuesGitRepositoryRequest) SetUrl(v string) {
	o.Url = v
}

// GetBranch returns the Branch field value
func (o *HelmValuesGitRepositoryRequest) GetBranch() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Branch
}

// GetBranchOk returns a tuple with the Branch field value
// and a boolean to check if the value has been set.
func (o *HelmValuesGitRepositoryRequest) GetBranchOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Branch, true
}

// SetBranch sets field value
func (o *HelmValuesGitRepositoryRequest) SetBranch(v string) {
	o.Branch = v
}

// GetPaths returns the Paths field value
func (o *HelmValuesGitRepositoryRequest) GetPaths() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.Paths
}

// GetPathsOk returns a tuple with the Paths field value
// and a boolean to check if the value has been set.
func (o *HelmValuesGitRepositoryRequest) GetPathsOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Paths, true
}

// SetPaths sets field value
func (o *HelmValuesGitRepositoryRequest) SetPaths(v []string) {
	o.Paths = v
}

// GetGitTokenId returns the GitTokenId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *HelmValuesGitRepositoryRequest) GetGitTokenId() string {
	if o == nil || IsNil(o.GitTokenId.Get()) {
		var ret string
		return ret
	}
	return *o.GitTokenId.Get()
}

// GetGitTokenIdOk returns a tuple with the GitTokenId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *HelmValuesGitRepositoryRequest) GetGitTokenIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.GitTokenId.Get(), o.GitTokenId.IsSet()
}

// HasGitTokenId returns a boolean if a field has been set.
func (o *HelmValuesGitRepositoryRequest) HasGitTokenId() bool {
	if o != nil && o.GitTokenId.IsSet() {
		return true
	}

	return false
}

// SetGitTokenId gets a reference to the given NullableString and assigns it to the GitTokenId field.
func (o *HelmValuesGitRepositoryRequest) SetGitTokenId(v string) {
	o.GitTokenId.Set(&v)
}

// SetGitTokenIdNil sets the value for GitTokenId to be an explicit nil
func (o *HelmValuesGitRepositoryRequest) SetGitTokenIdNil() {
	o.GitTokenId.Set(nil)
}

// UnsetGitTokenId ensures that no value is present for GitTokenId, not even an explicit nil
func (o *HelmValuesGitRepositoryRequest) UnsetGitTokenId() {
	o.GitTokenId.Unset()
}

func (o HelmValuesGitRepositoryRequest) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o HelmValuesGitRepositoryRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["url"] = o.Url
	toSerialize["branch"] = o.Branch
	toSerialize["paths"] = o.Paths
	if o.GitTokenId.IsSet() {
		toSerialize["git_token_id"] = o.GitTokenId.Get()
	}
	return toSerialize, nil
}

type NullableHelmValuesGitRepositoryRequest struct {
	value *HelmValuesGitRepositoryRequest
	isSet bool
}

func (v NullableHelmValuesGitRepositoryRequest) Get() *HelmValuesGitRepositoryRequest {
	return v.value
}

func (v *NullableHelmValuesGitRepositoryRequest) Set(val *HelmValuesGitRepositoryRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableHelmValuesGitRepositoryRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableHelmValuesGitRepositoryRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableHelmValuesGitRepositoryRequest(val *HelmValuesGitRepositoryRequest) *NullableHelmValuesGitRepositoryRequest {
	return &NullableHelmValuesGitRepositoryRequest{value: val, isSet: true}
}

func (v NullableHelmValuesGitRepositoryRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableHelmValuesGitRepositoryRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
