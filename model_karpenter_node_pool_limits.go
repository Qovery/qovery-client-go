/*
Qovery API

- Qovery is the fastest way to deploy your full-stack apps on any Cloud provider. - ℹ️ The API is stable and still in development.

API version: 1.0.4
Contact: support+api+documentation@qovery.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package qovery

import (
	"encoding/json"
	"fmt"
)

// checks if the KarpenterNodePoolLimits type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &KarpenterNodePoolLimits{}

// KarpenterNodePoolLimits struct for KarpenterNodePoolLimits
type KarpenterNodePoolLimits struct {
	Enabled bool `json:"enabled"`
	// CPU limit that will be applied for the node pool (in vCPU unit: 1 vCPU = 1000 millicores)
	MaxCpuInVcpu int32 `json:"max_cpu_in_vcpu"`
	// Memory limit that will be applied for the node pool (in Gibibytes unit: 1Gi = 1024 mebibytes)
	MaxMemoryInGibibytes int32 `json:"max_memory_in_gibibytes"`
	// GPU limit that will be applied for the node pool
	MaxGpu               int32 `json:"max_gpu"`
	AdditionalProperties map[string]interface{}
}

type _KarpenterNodePoolLimits KarpenterNodePoolLimits

// NewKarpenterNodePoolLimits instantiates a new KarpenterNodePoolLimits object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewKarpenterNodePoolLimits(enabled bool, maxCpuInVcpu int32, maxMemoryInGibibytes int32, maxGpu int32) *KarpenterNodePoolLimits {
	this := KarpenterNodePoolLimits{}
	this.Enabled = enabled
	this.MaxCpuInVcpu = maxCpuInVcpu
	this.MaxMemoryInGibibytes = maxMemoryInGibibytes
	this.MaxGpu = maxGpu
	return &this
}

// NewKarpenterNodePoolLimitsWithDefaults instantiates a new KarpenterNodePoolLimits object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewKarpenterNodePoolLimitsWithDefaults() *KarpenterNodePoolLimits {
	this := KarpenterNodePoolLimits{}
	var enabled bool = false
	this.Enabled = enabled
	var maxGpu int32 = 0
	this.MaxGpu = maxGpu
	return &this
}

// GetEnabled returns the Enabled field value
func (o *KarpenterNodePoolLimits) GetEnabled() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Enabled
}

// GetEnabledOk returns a tuple with the Enabled field value
// and a boolean to check if the value has been set.
func (o *KarpenterNodePoolLimits) GetEnabledOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Enabled, true
}

// SetEnabled sets field value
func (o *KarpenterNodePoolLimits) SetEnabled(v bool) {
	o.Enabled = v
}

// GetMaxCpuInVcpu returns the MaxCpuInVcpu field value
func (o *KarpenterNodePoolLimits) GetMaxCpuInVcpu() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.MaxCpuInVcpu
}

// GetMaxCpuInVcpuOk returns a tuple with the MaxCpuInVcpu field value
// and a boolean to check if the value has been set.
func (o *KarpenterNodePoolLimits) GetMaxCpuInVcpuOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.MaxCpuInVcpu, true
}

// SetMaxCpuInVcpu sets field value
func (o *KarpenterNodePoolLimits) SetMaxCpuInVcpu(v int32) {
	o.MaxCpuInVcpu = v
}

// GetMaxMemoryInGibibytes returns the MaxMemoryInGibibytes field value
func (o *KarpenterNodePoolLimits) GetMaxMemoryInGibibytes() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.MaxMemoryInGibibytes
}

// GetMaxMemoryInGibibytesOk returns a tuple with the MaxMemoryInGibibytes field value
// and a boolean to check if the value has been set.
func (o *KarpenterNodePoolLimits) GetMaxMemoryInGibibytesOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.MaxMemoryInGibibytes, true
}

// SetMaxMemoryInGibibytes sets field value
func (o *KarpenterNodePoolLimits) SetMaxMemoryInGibibytes(v int32) {
	o.MaxMemoryInGibibytes = v
}

// GetMaxGpu returns the MaxGpu field value
func (o *KarpenterNodePoolLimits) GetMaxGpu() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.MaxGpu
}

// GetMaxGpuOk returns a tuple with the MaxGpu field value
// and a boolean to check if the value has been set.
func (o *KarpenterNodePoolLimits) GetMaxGpuOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.MaxGpu, true
}

// SetMaxGpu sets field value
func (o *KarpenterNodePoolLimits) SetMaxGpu(v int32) {
	o.MaxGpu = v
}

func (o KarpenterNodePoolLimits) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o KarpenterNodePoolLimits) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["enabled"] = o.Enabled
	toSerialize["max_cpu_in_vcpu"] = o.MaxCpuInVcpu
	toSerialize["max_memory_in_gibibytes"] = o.MaxMemoryInGibibytes
	toSerialize["max_gpu"] = o.MaxGpu

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *KarpenterNodePoolLimits) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"enabled",
		"max_cpu_in_vcpu",
		"max_memory_in_gibibytes",
		"max_gpu",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varKarpenterNodePoolLimits := _KarpenterNodePoolLimits{}

	err = json.Unmarshal(data, &varKarpenterNodePoolLimits)

	if err != nil {
		return err
	}

	*o = KarpenterNodePoolLimits(varKarpenterNodePoolLimits)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "enabled")
		delete(additionalProperties, "max_cpu_in_vcpu")
		delete(additionalProperties, "max_memory_in_gibibytes")
		delete(additionalProperties, "max_gpu")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableKarpenterNodePoolLimits struct {
	value *KarpenterNodePoolLimits
	isSet bool
}

func (v NullableKarpenterNodePoolLimits) Get() *KarpenterNodePoolLimits {
	return v.value
}

func (v *NullableKarpenterNodePoolLimits) Set(val *KarpenterNodePoolLimits) {
	v.value = val
	v.isSet = true
}

func (v NullableKarpenterNodePoolLimits) IsSet() bool {
	return v.isSet
}

func (v *NullableKarpenterNodePoolLimits) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableKarpenterNodePoolLimits(val *KarpenterNodePoolLimits) *NullableKarpenterNodePoolLimits {
	return &NullableKarpenterNodePoolLimits{value: val, isSet: true}
}

func (v NullableKarpenterNodePoolLimits) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableKarpenterNodePoolLimits) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
