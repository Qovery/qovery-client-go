/*
Qovery API

- Qovery is the fastest way to deploy your full-stack apps on any Cloud provider. - ℹ️ The API is stable and still in development.

API version: 1.0.4
Contact: support+api+documentation@qovery.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package qovery

import (
	"encoding/json"
)

// checks if the HelmRequestAllOfValuesOverrideFileRawValues type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &HelmRequestAllOfValuesOverrideFileRawValues{}

// HelmRequestAllOfValuesOverrideFileRawValues struct for HelmRequestAllOfValuesOverrideFileRawValues
type HelmRequestAllOfValuesOverrideFileRawValues struct {
	// The name of the value file
	Name *string `json:"name,omitempty"`
	// The content of the value file
	Content              *string `json:"content,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _HelmRequestAllOfValuesOverrideFileRawValues HelmRequestAllOfValuesOverrideFileRawValues

// NewHelmRequestAllOfValuesOverrideFileRawValues instantiates a new HelmRequestAllOfValuesOverrideFileRawValues object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewHelmRequestAllOfValuesOverrideFileRawValues() *HelmRequestAllOfValuesOverrideFileRawValues {
	this := HelmRequestAllOfValuesOverrideFileRawValues{}
	return &this
}

// NewHelmRequestAllOfValuesOverrideFileRawValuesWithDefaults instantiates a new HelmRequestAllOfValuesOverrideFileRawValues object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewHelmRequestAllOfValuesOverrideFileRawValuesWithDefaults() *HelmRequestAllOfValuesOverrideFileRawValues {
	this := HelmRequestAllOfValuesOverrideFileRawValues{}
	return &this
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *HelmRequestAllOfValuesOverrideFileRawValues) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HelmRequestAllOfValuesOverrideFileRawValues) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *HelmRequestAllOfValuesOverrideFileRawValues) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *HelmRequestAllOfValuesOverrideFileRawValues) SetName(v string) {
	o.Name = &v
}

// GetContent returns the Content field value if set, zero value otherwise.
func (o *HelmRequestAllOfValuesOverrideFileRawValues) GetContent() string {
	if o == nil || IsNil(o.Content) {
		var ret string
		return ret
	}
	return *o.Content
}

// GetContentOk returns a tuple with the Content field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HelmRequestAllOfValuesOverrideFileRawValues) GetContentOk() (*string, bool) {
	if o == nil || IsNil(o.Content) {
		return nil, false
	}
	return o.Content, true
}

// HasContent returns a boolean if a field has been set.
func (o *HelmRequestAllOfValuesOverrideFileRawValues) HasContent() bool {
	if o != nil && !IsNil(o.Content) {
		return true
	}

	return false
}

// SetContent gets a reference to the given string and assigns it to the Content field.
func (o *HelmRequestAllOfValuesOverrideFileRawValues) SetContent(v string) {
	o.Content = &v
}

func (o HelmRequestAllOfValuesOverrideFileRawValues) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o HelmRequestAllOfValuesOverrideFileRawValues) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Content) {
		toSerialize["content"] = o.Content
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *HelmRequestAllOfValuesOverrideFileRawValues) UnmarshalJSON(data []byte) (err error) {
	varHelmRequestAllOfValuesOverrideFileRawValues := _HelmRequestAllOfValuesOverrideFileRawValues{}

	err = json.Unmarshal(data, &varHelmRequestAllOfValuesOverrideFileRawValues)

	if err != nil {
		return err
	}

	*o = HelmRequestAllOfValuesOverrideFileRawValues(varHelmRequestAllOfValuesOverrideFileRawValues)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "name")
		delete(additionalProperties, "content")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableHelmRequestAllOfValuesOverrideFileRawValues struct {
	value *HelmRequestAllOfValuesOverrideFileRawValues
	isSet bool
}

func (v NullableHelmRequestAllOfValuesOverrideFileRawValues) Get() *HelmRequestAllOfValuesOverrideFileRawValues {
	return v.value
}

func (v *NullableHelmRequestAllOfValuesOverrideFileRawValues) Set(val *HelmRequestAllOfValuesOverrideFileRawValues) {
	v.value = val
	v.isSet = true
}

func (v NullableHelmRequestAllOfValuesOverrideFileRawValues) IsSet() bool {
	return v.isSet
}

func (v *NullableHelmRequestAllOfValuesOverrideFileRawValues) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableHelmRequestAllOfValuesOverrideFileRawValues(val *HelmRequestAllOfValuesOverrideFileRawValues) *NullableHelmRequestAllOfValuesOverrideFileRawValues {
	return &NullableHelmRequestAllOfValuesOverrideFileRawValues{value: val, isSet: true}
}

func (v NullableHelmRequestAllOfValuesOverrideFileRawValues) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableHelmRequestAllOfValuesOverrideFileRawValues) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
