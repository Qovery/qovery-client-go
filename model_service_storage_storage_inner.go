/*
Qovery API

- Qovery is the fastest way to deploy your full-stack apps on any Cloud provider. - ℹ️ The API is stable and still in development.

API version: 1.0.4
Contact: support+api+documentation@qovery.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package qovery

import (
	"encoding/json"
	"fmt"
)

// checks if the ServiceStorageStorageInner type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ServiceStorageStorageInner{}

// ServiceStorageStorageInner struct for ServiceStorageStorageInner
type ServiceStorageStorageInner struct {
	Id   string          `json:"id"`
	Type StorageTypeEnum `json:"type"`
	// unit is GB
	Size                 int32  `json:"size"`
	MountPoint           string `json:"mount_point"`
	AdditionalProperties map[string]interface{}
}

type _ServiceStorageStorageInner ServiceStorageStorageInner

// NewServiceStorageStorageInner instantiates a new ServiceStorageStorageInner object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewServiceStorageStorageInner(id string, type_ StorageTypeEnum, size int32, mountPoint string) *ServiceStorageStorageInner {
	this := ServiceStorageStorageInner{}
	this.Id = id
	this.Type = type_
	this.Size = size
	this.MountPoint = mountPoint
	return &this
}

// NewServiceStorageStorageInnerWithDefaults instantiates a new ServiceStorageStorageInner object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewServiceStorageStorageInnerWithDefaults() *ServiceStorageStorageInner {
	this := ServiceStorageStorageInner{}
	return &this
}

// GetId returns the Id field value
func (o *ServiceStorageStorageInner) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *ServiceStorageStorageInner) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *ServiceStorageStorageInner) SetId(v string) {
	o.Id = v
}

// GetType returns the Type field value
func (o *ServiceStorageStorageInner) GetType() StorageTypeEnum {
	if o == nil {
		var ret StorageTypeEnum
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *ServiceStorageStorageInner) GetTypeOk() (*StorageTypeEnum, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *ServiceStorageStorageInner) SetType(v StorageTypeEnum) {
	o.Type = v
}

// GetSize returns the Size field value
func (o *ServiceStorageStorageInner) GetSize() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Size
}

// GetSizeOk returns a tuple with the Size field value
// and a boolean to check if the value has been set.
func (o *ServiceStorageStorageInner) GetSizeOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Size, true
}

// SetSize sets field value
func (o *ServiceStorageStorageInner) SetSize(v int32) {
	o.Size = v
}

// GetMountPoint returns the MountPoint field value
func (o *ServiceStorageStorageInner) GetMountPoint() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.MountPoint
}

// GetMountPointOk returns a tuple with the MountPoint field value
// and a boolean to check if the value has been set.
func (o *ServiceStorageStorageInner) GetMountPointOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.MountPoint, true
}

// SetMountPoint sets field value
func (o *ServiceStorageStorageInner) SetMountPoint(v string) {
	o.MountPoint = v
}

func (o ServiceStorageStorageInner) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ServiceStorageStorageInner) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["type"] = o.Type
	toSerialize["size"] = o.Size
	toSerialize["mount_point"] = o.MountPoint

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *ServiceStorageStorageInner) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"type",
		"size",
		"mount_point",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varServiceStorageStorageInner := _ServiceStorageStorageInner{}

	err = json.Unmarshal(data, &varServiceStorageStorageInner)

	if err != nil {
		return err
	}

	*o = ServiceStorageStorageInner(varServiceStorageStorageInner)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "id")
		delete(additionalProperties, "type")
		delete(additionalProperties, "size")
		delete(additionalProperties, "mount_point")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableServiceStorageStorageInner struct {
	value *ServiceStorageStorageInner
	isSet bool
}

func (v NullableServiceStorageStorageInner) Get() *ServiceStorageStorageInner {
	return v.value
}

func (v *NullableServiceStorageStorageInner) Set(val *ServiceStorageStorageInner) {
	v.value = val
	v.isSet = true
}

func (v NullableServiceStorageStorageInner) IsSet() bool {
	return v.isSet
}

func (v *NullableServiceStorageStorageInner) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableServiceStorageStorageInner(val *ServiceStorageStorageInner) *NullableServiceStorageStorageInner {
	return &NullableServiceStorageStorageInner{value: val, isSet: true}
}

func (v NullableServiceStorageStorageInner) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableServiceStorageStorageInner) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
