/*
Qovery API

- Qovery is the fastest way to deploy your full-stack apps on any Cloud provider. - ℹ️ The API is stable and still in development.

API version: 1.0.3
Contact: support+api+documentation@qovery.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package qovery

import (
	"encoding/json"
	"fmt"
)

// DefaultMemberRole used to specify a default role, otherwise `null`
type DefaultMemberRole string

// List of DefaultMemberRole
const (
	DEFAULTMEMBERROLE_VIEWER  DefaultMemberRole = "VIEWER"
	DEFAULTMEMBERROLE_BILLING DefaultMemberRole = "BILLING"
	DEFAULTMEMBERROLE_DEVOPS  DefaultMemberRole = "DEVOPS"
	DEFAULTMEMBERROLE_ADMIN   DefaultMemberRole = "ADMIN"
)

// All allowed values of DefaultMemberRole enum
var AllowedDefaultMemberRoleEnumValues = []DefaultMemberRole{
	"VIEWER",
	"BILLING",
	"DEVOPS",
	"ADMIN",
}

func (v *DefaultMemberRole) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := DefaultMemberRole(value)
	for _, existing := range AllowedDefaultMemberRoleEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid DefaultMemberRole", value)
}

// NewDefaultMemberRoleFromValue returns a pointer to a valid DefaultMemberRole
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewDefaultMemberRoleFromValue(v string) (*DefaultMemberRole, error) {
	ev := DefaultMemberRole(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for DefaultMemberRole: valid values are %v", v, AllowedDefaultMemberRoleEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v DefaultMemberRole) IsValid() bool {
	for _, existing := range AllowedDefaultMemberRoleEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to DefaultMemberRole value
func (v DefaultMemberRole) Ptr() *DefaultMemberRole {
	return &v
}

type NullableDefaultMemberRole struct {
	value *DefaultMemberRole
	isSet bool
}

func (v NullableDefaultMemberRole) Get() *DefaultMemberRole {
	return v.value
}

func (v *NullableDefaultMemberRole) Set(val *DefaultMemberRole) {
	v.value = val
	v.isSet = true
}

func (v NullableDefaultMemberRole) IsSet() bool {
	return v.isSet
}

func (v *NullableDefaultMemberRole) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDefaultMemberRole(val *DefaultMemberRole) *NullableDefaultMemberRole {
	return &NullableDefaultMemberRole{value: val, isSet: true}
}

func (v NullableDefaultMemberRole) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDefaultMemberRole) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
