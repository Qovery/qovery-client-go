/*
Qovery API

- Qovery is the fastest way to deploy your full-stack apps on any Cloud provider. - ℹ️ The API is stable and still in development.

API version: 1.0.4
Contact: support+api+documentation@qovery.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package qovery

import (
	"encoding/json"
	"fmt"
)

// CloudVendorEnum the model 'CloudVendorEnum'
type CloudVendorEnum string

// List of CloudVendorEnum
const (
	CLOUDVENDORENUM_AWS        CloudVendorEnum = "AWS"
	CLOUDVENDORENUM_SCW        CloudVendorEnum = "SCW"
	CLOUDVENDORENUM_GCP        CloudVendorEnum = "GCP"
	CLOUDVENDORENUM_DO         CloudVendorEnum = "DO"
	CLOUDVENDORENUM_AZURE      CloudVendorEnum = "AZURE"
	CLOUDVENDORENUM_OVH        CloudVendorEnum = "OVH"
	CLOUDVENDORENUM_CIVO       CloudVendorEnum = "CIVO"
	CLOUDVENDORENUM_HETZNER    CloudVendorEnum = "HETZNER"
	CLOUDVENDORENUM_ORACLE     CloudVendorEnum = "ORACLE"
	CLOUDVENDORENUM_IBM        CloudVendorEnum = "IBM"
	CLOUDVENDORENUM_ON_PREMISE CloudVendorEnum = "ON_PREMISE"
)

// All allowed values of CloudVendorEnum enum
var AllowedCloudVendorEnumEnumValues = []CloudVendorEnum{
	"AWS",
	"SCW",
	"GCP",
	"DO",
	"AZURE",
	"OVH",
	"CIVO",
	"HETZNER",
	"ORACLE",
	"IBM",
	"ON_PREMISE",
}

func (v *CloudVendorEnum) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := CloudVendorEnum(value)
	for _, existing := range AllowedCloudVendorEnumEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid CloudVendorEnum", value)
}

// NewCloudVendorEnumFromValue returns a pointer to a valid CloudVendorEnum
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewCloudVendorEnumFromValue(v string) (*CloudVendorEnum, error) {
	ev := CloudVendorEnum(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for CloudVendorEnum: valid values are %v", v, AllowedCloudVendorEnumEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v CloudVendorEnum) IsValid() bool {
	for _, existing := range AllowedCloudVendorEnumEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to CloudVendorEnum value
func (v CloudVendorEnum) Ptr() *CloudVendorEnum {
	return &v
}

type NullableCloudVendorEnum struct {
	value *CloudVendorEnum
	isSet bool
}

func (v NullableCloudVendorEnum) Get() *CloudVendorEnum {
	return v.value
}

func (v *NullableCloudVendorEnum) Set(val *CloudVendorEnum) {
	v.value = val
	v.isSet = true
}

func (v NullableCloudVendorEnum) IsSet() bool {
	return v.isSet
}

func (v *NullableCloudVendorEnum) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCloudVendorEnum(val *CloudVendorEnum) *NullableCloudVendorEnum {
	return &NullableCloudVendorEnum{value: val, isSet: true}
}

func (v NullableCloudVendorEnum) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCloudVendorEnum) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
