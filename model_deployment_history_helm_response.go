/*
Qovery API

- Qovery is the fastest way to deploy your full-stack apps on any Cloud provider. - ℹ️ The API is stable and still in development.

API version: 1.0.4
Contact: support+api+documentation@qovery.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package qovery

import (
	"encoding/json"
	"fmt"
	"time"
)

// checks if the DeploymentHistoryHelmResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DeploymentHistoryHelmResponse{}

// DeploymentHistoryHelmResponse struct for DeploymentHistoryHelmResponse
type DeploymentHistoryHelmResponse struct {
	Id        string     `json:"id"`
	CreatedAt time.Time  `json:"created_at"`
	UpdatedAt *time.Time `json:"updated_at,omitempty"`
	// name of the helm
	Name                 *string                                              `json:"name,omitempty"`
	Status               *StateEnum                                           `json:"status,omitempty"`
	Commit               NullableCommit                                       `json:"commit,omitempty"`
	Repository           NullableDeploymentHistoryHelmResponseAllOfRepository `json:"repository,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _DeploymentHistoryHelmResponse DeploymentHistoryHelmResponse

// NewDeploymentHistoryHelmResponse instantiates a new DeploymentHistoryHelmResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDeploymentHistoryHelmResponse(id string, createdAt time.Time) *DeploymentHistoryHelmResponse {
	this := DeploymentHistoryHelmResponse{}
	this.Id = id
	this.CreatedAt = createdAt
	return &this
}

// NewDeploymentHistoryHelmResponseWithDefaults instantiates a new DeploymentHistoryHelmResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDeploymentHistoryHelmResponseWithDefaults() *DeploymentHistoryHelmResponse {
	this := DeploymentHistoryHelmResponse{}
	return &this
}

// GetId returns the Id field value
func (o *DeploymentHistoryHelmResponse) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *DeploymentHistoryHelmResponse) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *DeploymentHistoryHelmResponse) SetId(v string) {
	o.Id = v
}

// GetCreatedAt returns the CreatedAt field value
func (o *DeploymentHistoryHelmResponse) GetCreatedAt() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value
// and a boolean to check if the value has been set.
func (o *DeploymentHistoryHelmResponse) GetCreatedAtOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CreatedAt, true
}

// SetCreatedAt sets field value
func (o *DeploymentHistoryHelmResponse) SetCreatedAt(v time.Time) {
	o.CreatedAt = v
}

// GetUpdatedAt returns the UpdatedAt field value if set, zero value otherwise.
func (o *DeploymentHistoryHelmResponse) GetUpdatedAt() time.Time {
	if o == nil || IsNil(o.UpdatedAt) {
		var ret time.Time
		return ret
	}
	return *o.UpdatedAt
}

// GetUpdatedAtOk returns a tuple with the UpdatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeploymentHistoryHelmResponse) GetUpdatedAtOk() (*time.Time, bool) {
	if o == nil || IsNil(o.UpdatedAt) {
		return nil, false
	}
	return o.UpdatedAt, true
}

// HasUpdatedAt returns a boolean if a field has been set.
func (o *DeploymentHistoryHelmResponse) HasUpdatedAt() bool {
	if o != nil && !IsNil(o.UpdatedAt) {
		return true
	}

	return false
}

// SetUpdatedAt gets a reference to the given time.Time and assigns it to the UpdatedAt field.
func (o *DeploymentHistoryHelmResponse) SetUpdatedAt(v time.Time) {
	o.UpdatedAt = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *DeploymentHistoryHelmResponse) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeploymentHistoryHelmResponse) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *DeploymentHistoryHelmResponse) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *DeploymentHistoryHelmResponse) SetName(v string) {
	o.Name = &v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *DeploymentHistoryHelmResponse) GetStatus() StateEnum {
	if o == nil || IsNil(o.Status) {
		var ret StateEnum
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeploymentHistoryHelmResponse) GetStatusOk() (*StateEnum, bool) {
	if o == nil || IsNil(o.Status) {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *DeploymentHistoryHelmResponse) HasStatus() bool {
	if o != nil && !IsNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given StateEnum and assigns it to the Status field.
func (o *DeploymentHistoryHelmResponse) SetStatus(v StateEnum) {
	o.Status = &v
}

// GetCommit returns the Commit field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *DeploymentHistoryHelmResponse) GetCommit() Commit {
	if o == nil || IsNil(o.Commit.Get()) {
		var ret Commit
		return ret
	}
	return *o.Commit.Get()
}

// GetCommitOk returns a tuple with the Commit field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *DeploymentHistoryHelmResponse) GetCommitOk() (*Commit, bool) {
	if o == nil {
		return nil, false
	}
	return o.Commit.Get(), o.Commit.IsSet()
}

// HasCommit returns a boolean if a field has been set.
func (o *DeploymentHistoryHelmResponse) HasCommit() bool {
	if o != nil && o.Commit.IsSet() {
		return true
	}

	return false
}

// SetCommit gets a reference to the given NullableCommit and assigns it to the Commit field.
func (o *DeploymentHistoryHelmResponse) SetCommit(v Commit) {
	o.Commit.Set(&v)
}

// SetCommitNil sets the value for Commit to be an explicit nil
func (o *DeploymentHistoryHelmResponse) SetCommitNil() {
	o.Commit.Set(nil)
}

// UnsetCommit ensures that no value is present for Commit, not even an explicit nil
func (o *DeploymentHistoryHelmResponse) UnsetCommit() {
	o.Commit.Unset()
}

// GetRepository returns the Repository field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *DeploymentHistoryHelmResponse) GetRepository() DeploymentHistoryHelmResponseAllOfRepository {
	if o == nil || IsNil(o.Repository.Get()) {
		var ret DeploymentHistoryHelmResponseAllOfRepository
		return ret
	}
	return *o.Repository.Get()
}

// GetRepositoryOk returns a tuple with the Repository field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *DeploymentHistoryHelmResponse) GetRepositoryOk() (*DeploymentHistoryHelmResponseAllOfRepository, bool) {
	if o == nil {
		return nil, false
	}
	return o.Repository.Get(), o.Repository.IsSet()
}

// HasRepository returns a boolean if a field has been set.
func (o *DeploymentHistoryHelmResponse) HasRepository() bool {
	if o != nil && o.Repository.IsSet() {
		return true
	}

	return false
}

// SetRepository gets a reference to the given NullableDeploymentHistoryHelmResponseAllOfRepository and assigns it to the Repository field.
func (o *DeploymentHistoryHelmResponse) SetRepository(v DeploymentHistoryHelmResponseAllOfRepository) {
	o.Repository.Set(&v)
}

// SetRepositoryNil sets the value for Repository to be an explicit nil
func (o *DeploymentHistoryHelmResponse) SetRepositoryNil() {
	o.Repository.Set(nil)
}

// UnsetRepository ensures that no value is present for Repository, not even an explicit nil
func (o *DeploymentHistoryHelmResponse) UnsetRepository() {
	o.Repository.Unset()
}

func (o DeploymentHistoryHelmResponse) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DeploymentHistoryHelmResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["created_at"] = o.CreatedAt
	if !IsNil(o.UpdatedAt) {
		toSerialize["updated_at"] = o.UpdatedAt
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Status) {
		toSerialize["status"] = o.Status
	}
	if o.Commit.IsSet() {
		toSerialize["commit"] = o.Commit.Get()
	}
	if o.Repository.IsSet() {
		toSerialize["repository"] = o.Repository.Get()
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *DeploymentHistoryHelmResponse) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"created_at",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varDeploymentHistoryHelmResponse := _DeploymentHistoryHelmResponse{}

	err = json.Unmarshal(data, &varDeploymentHistoryHelmResponse)

	if err != nil {
		return err
	}

	*o = DeploymentHistoryHelmResponse(varDeploymentHistoryHelmResponse)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "id")
		delete(additionalProperties, "created_at")
		delete(additionalProperties, "updated_at")
		delete(additionalProperties, "name")
		delete(additionalProperties, "status")
		delete(additionalProperties, "commit")
		delete(additionalProperties, "repository")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableDeploymentHistoryHelmResponse struct {
	value *DeploymentHistoryHelmResponse
	isSet bool
}

func (v NullableDeploymentHistoryHelmResponse) Get() *DeploymentHistoryHelmResponse {
	return v.value
}

func (v *NullableDeploymentHistoryHelmResponse) Set(val *DeploymentHistoryHelmResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableDeploymentHistoryHelmResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableDeploymentHistoryHelmResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDeploymentHistoryHelmResponse(val *DeploymentHistoryHelmResponse) *NullableDeploymentHistoryHelmResponse {
	return &NullableDeploymentHistoryHelmResponse{value: val, isSet: true}
}

func (v NullableDeploymentHistoryHelmResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDeploymentHistoryHelmResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
