/*
Qovery API

- Qovery is the fastest way to deploy your full-stack apps on any Cloud provider. - ℹ️ The API is stable and still in development.

API version: 1.0.3
Contact: support+api+documentation@qovery.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package qovery

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)

// TerraformDeploymentRestrictionAPIService TerraformDeploymentRestrictionAPI service
type TerraformDeploymentRestrictionAPIService service

type ApiCreateTerraformDeploymentRestrictionRequest struct {
	ctx                                   context.Context
	ApiService                            *TerraformDeploymentRestrictionAPIService
	terraformId                           string
	terraformDeploymentRestrictionRequest *TerraformDeploymentRestrictionRequest
}

func (r ApiCreateTerraformDeploymentRestrictionRequest) TerraformDeploymentRestrictionRequest(terraformDeploymentRestrictionRequest TerraformDeploymentRestrictionRequest) ApiCreateTerraformDeploymentRestrictionRequest {
	r.terraformDeploymentRestrictionRequest = &terraformDeploymentRestrictionRequest
	return r
}

func (r ApiCreateTerraformDeploymentRestrictionRequest) Execute() (*TerraformDeploymentRestrictionResponse, *http.Response, error) {
	return r.ApiService.CreateTerraformDeploymentRestrictionExecute(r)
}

/*
CreateTerraformDeploymentRestriction Create a terraform deployment restriction

Create a terraform deployment restriction

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param terraformId Terraform ID
 @return ApiCreateTerraformDeploymentRestrictionRequest
*/
func (a *TerraformDeploymentRestrictionAPIService) CreateTerraformDeploymentRestriction(ctx context.Context, terraformId string) ApiCreateTerraformDeploymentRestrictionRequest {
	return ApiCreateTerraformDeploymentRestrictionRequest{
		ApiService:  a,
		ctx:         ctx,
		terraformId: terraformId,
	}
}

// Execute executes the request
//  @return TerraformDeploymentRestrictionResponse
func (a *TerraformDeploymentRestrictionAPIService) CreateTerraformDeploymentRestrictionExecute(r ApiCreateTerraformDeploymentRestrictionRequest) (*TerraformDeploymentRestrictionResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *TerraformDeploymentRestrictionResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "TerraformDeploymentRestrictionAPIService.CreateTerraformDeploymentRestriction")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/terraform/{terraformId}/deploymentRestriction"
	localVarPath = strings.Replace(localVarPath, "{"+"terraformId"+"}", url.PathEscape(parameterValueToString(r.terraformId, "terraformId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.terraformDeploymentRestrictionRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["ApiKeyAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDeleteTerraformDeploymentRestrictionRequest struct {
	ctx                     context.Context
	ApiService              *TerraformDeploymentRestrictionAPIService
	terraformId             string
	deploymentRestrictionId string
}

func (r ApiDeleteTerraformDeploymentRestrictionRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeleteTerraformDeploymentRestrictionExecute(r)
}

/*
DeleteTerraformDeploymentRestriction Delete a terraform deployment restriction

Delete a terraform deployment restriction

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param terraformId Terraform ID
 @param deploymentRestrictionId Deployment Restriction ID
 @return ApiDeleteTerraformDeploymentRestrictionRequest
*/
func (a *TerraformDeploymentRestrictionAPIService) DeleteTerraformDeploymentRestriction(ctx context.Context, terraformId string, deploymentRestrictionId string) ApiDeleteTerraformDeploymentRestrictionRequest {
	return ApiDeleteTerraformDeploymentRestrictionRequest{
		ApiService:              a,
		ctx:                     ctx,
		terraformId:             terraformId,
		deploymentRestrictionId: deploymentRestrictionId,
	}
}

// Execute executes the request
func (a *TerraformDeploymentRestrictionAPIService) DeleteTerraformDeploymentRestrictionExecute(r ApiDeleteTerraformDeploymentRestrictionRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodDelete
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "TerraformDeploymentRestrictionAPIService.DeleteTerraformDeploymentRestriction")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/terraform/{terraformId}/deploymentRestriction/{deploymentRestrictionId}"
	localVarPath = strings.Replace(localVarPath, "{"+"terraformId"+"}", url.PathEscape(parameterValueToString(r.terraformId, "terraformId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"deploymentRestrictionId"+"}", url.PathEscape(parameterValueToString(r.deploymentRestrictionId, "deploymentRestrictionId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["ApiKeyAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiEditTerraformDeploymentRestrictionRequest struct {
	ctx                                   context.Context
	ApiService                            *TerraformDeploymentRestrictionAPIService
	terraformId                           string
	deploymentRestrictionId               string
	terraformDeploymentRestrictionRequest *TerraformDeploymentRestrictionRequest
}

func (r ApiEditTerraformDeploymentRestrictionRequest) TerraformDeploymentRestrictionRequest(terraformDeploymentRestrictionRequest TerraformDeploymentRestrictionRequest) ApiEditTerraformDeploymentRestrictionRequest {
	r.terraformDeploymentRestrictionRequest = &terraformDeploymentRestrictionRequest
	return r
}

func (r ApiEditTerraformDeploymentRestrictionRequest) Execute() (*TerraformDeploymentRestrictionResponse, *http.Response, error) {
	return r.ApiService.EditTerraformDeploymentRestrictionExecute(r)
}

/*
EditTerraformDeploymentRestriction Edit a terraform deployment restriction

Edit a terraform deployment restriction

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param terraformId Terraform ID
 @param deploymentRestrictionId Deployment Restriction ID
 @return ApiEditTerraformDeploymentRestrictionRequest
*/
func (a *TerraformDeploymentRestrictionAPIService) EditTerraformDeploymentRestriction(ctx context.Context, terraformId string, deploymentRestrictionId string) ApiEditTerraformDeploymentRestrictionRequest {
	return ApiEditTerraformDeploymentRestrictionRequest{
		ApiService:              a,
		ctx:                     ctx,
		terraformId:             terraformId,
		deploymentRestrictionId: deploymentRestrictionId,
	}
}

// Execute executes the request
//  @return TerraformDeploymentRestrictionResponse
func (a *TerraformDeploymentRestrictionAPIService) EditTerraformDeploymentRestrictionExecute(r ApiEditTerraformDeploymentRestrictionRequest) (*TerraformDeploymentRestrictionResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPut
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *TerraformDeploymentRestrictionResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "TerraformDeploymentRestrictionAPIService.EditTerraformDeploymentRestriction")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/terraform/{terraformId}/deploymentRestriction/{deploymentRestrictionId}"
	localVarPath = strings.Replace(localVarPath, "{"+"terraformId"+"}", url.PathEscape(parameterValueToString(r.terraformId, "terraformId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"deploymentRestrictionId"+"}", url.PathEscape(parameterValueToString(r.deploymentRestrictionId, "deploymentRestrictionId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.terraformDeploymentRestrictionRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["ApiKeyAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetTerraformDeploymentRestrictionsRequest struct {
	ctx         context.Context
	ApiService  *TerraformDeploymentRestrictionAPIService
	terraformId string
}

func (r ApiGetTerraformDeploymentRestrictionsRequest) Execute() (*TerraformDeploymentRestrictionResponseList, *http.Response, error) {
	return r.ApiService.GetTerraformDeploymentRestrictionsExecute(r)
}

/*
GetTerraformDeploymentRestrictions Get terraform deployment restrictions

Get terraform deployment restrictions

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param terraformId Terraform ID
 @return ApiGetTerraformDeploymentRestrictionsRequest
*/
func (a *TerraformDeploymentRestrictionAPIService) GetTerraformDeploymentRestrictions(ctx context.Context, terraformId string) ApiGetTerraformDeploymentRestrictionsRequest {
	return ApiGetTerraformDeploymentRestrictionsRequest{
		ApiService:  a,
		ctx:         ctx,
		terraformId: terraformId,
	}
}

// Execute executes the request
//  @return TerraformDeploymentRestrictionResponseList
func (a *TerraformDeploymentRestrictionAPIService) GetTerraformDeploymentRestrictionsExecute(r ApiGetTerraformDeploymentRestrictionsRequest) (*TerraformDeploymentRestrictionResponseList, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *TerraformDeploymentRestrictionResponseList
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "TerraformDeploymentRestrictionAPIService.GetTerraformDeploymentRestrictions")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/terraform/{terraformId}/deploymentRestriction"
	localVarPath = strings.Replace(localVarPath, "{"+"terraformId"+"}", url.PathEscape(parameterValueToString(r.terraformId, "terraformId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["ApiKeyAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
