/*
Qovery API

- Qovery is the fastest way to deploy your full-stack apps on any Cloud provider. - ℹ️ The API is stable and still in development.

API version: 1.0.4
Contact: support+api+documentation@qovery.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package qovery

import (
	"encoding/json"
	"fmt"
)

// ServiceActionStatusEnum the model 'ServiceActionStatusEnum'
type ServiceActionStatusEnum string

// List of ServiceActionStatusEnum
const (
	SERVICEACTIONSTATUSENUM_QUEUED    ServiceActionStatusEnum = "QUEUED"
	SERVICEACTIONSTATUSENUM_ONGOING   ServiceActionStatusEnum = "ONGOING"
	SERVICEACTIONSTATUSENUM_SUCCESS   ServiceActionStatusEnum = "SUCCESS"
	SERVICEACTIONSTATUSENUM_ERROR     ServiceActionStatusEnum = "ERROR"
	SERVICEACTIONSTATUSENUM_CANCELED  ServiceActionStatusEnum = "CANCELED"
	SERVICEACTIONSTATUSENUM_CANCELING ServiceActionStatusEnum = "CANCELING"
	SERVICEACTIONSTATUSENUM_NEVER     ServiceActionStatusEnum = "NEVER"
)

// All allowed values of ServiceActionStatusEnum enum
var AllowedServiceActionStatusEnumEnumValues = []ServiceActionStatusEnum{
	"QUEUED",
	"ONGOING",
	"SUCCESS",
	"ERROR",
	"CANCELED",
	"CANCELING",
	"NEVER",
}

func (v *ServiceActionStatusEnum) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ServiceActionStatusEnum(value)
	for _, existing := range AllowedServiceActionStatusEnumEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ServiceActionStatusEnum", value)
}

// NewServiceActionStatusEnumFromValue returns a pointer to a valid ServiceActionStatusEnum
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewServiceActionStatusEnumFromValue(v string) (*ServiceActionStatusEnum, error) {
	ev := ServiceActionStatusEnum(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ServiceActionStatusEnum: valid values are %v", v, AllowedServiceActionStatusEnumEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ServiceActionStatusEnum) IsValid() bool {
	for _, existing := range AllowedServiceActionStatusEnumEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to ServiceActionStatusEnum value
func (v ServiceActionStatusEnum) Ptr() *ServiceActionStatusEnum {
	return &v
}

type NullableServiceActionStatusEnum struct {
	value *ServiceActionStatusEnum
	isSet bool
}

func (v NullableServiceActionStatusEnum) Get() *ServiceActionStatusEnum {
	return v.value
}

func (v *NullableServiceActionStatusEnum) Set(val *ServiceActionStatusEnum) {
	v.value = val
	v.isSet = true
}

func (v NullableServiceActionStatusEnum) IsSet() bool {
	return v.isSet
}

func (v *NullableServiceActionStatusEnum) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableServiceActionStatusEnum(val *ServiceActionStatusEnum) *NullableServiceActionStatusEnum {
	return &NullableServiceActionStatusEnum{value: val, isSet: true}
}

func (v NullableServiceActionStatusEnum) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableServiceActionStatusEnum) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
