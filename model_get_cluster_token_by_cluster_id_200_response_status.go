/*
Qovery API

- Qovery is the fastest way to deploy your full-stack apps on any Cloud provider. - ℹ️ The API is stable and still in development.

API version: 1.0.4
Contact: support+api+documentation@qovery.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package qovery

import (
	"encoding/json"
	"fmt"
	"time"
)

// checks if the GetClusterTokenByClusterId200ResponseStatus type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &GetClusterTokenByClusterId200ResponseStatus{}

// GetClusterTokenByClusterId200ResponseStatus struct for GetClusterTokenByClusterId200ResponseStatus
type GetClusterTokenByClusterId200ResponseStatus struct {
	Token                string    `json:"token"`
	ExpirationTimestamp  time.Time `json:"expirationTimestamp"`
	AdditionalProperties map[string]interface{}
}

type _GetClusterTokenByClusterId200ResponseStatus GetClusterTokenByClusterId200ResponseStatus

// NewGetClusterTokenByClusterId200ResponseStatus instantiates a new GetClusterTokenByClusterId200ResponseStatus object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGetClusterTokenByClusterId200ResponseStatus(token string, expirationTimestamp time.Time) *GetClusterTokenByClusterId200ResponseStatus {
	this := GetClusterTokenByClusterId200ResponseStatus{}
	this.Token = token
	this.ExpirationTimestamp = expirationTimestamp
	return &this
}

// NewGetClusterTokenByClusterId200ResponseStatusWithDefaults instantiates a new GetClusterTokenByClusterId200ResponseStatus object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGetClusterTokenByClusterId200ResponseStatusWithDefaults() *GetClusterTokenByClusterId200ResponseStatus {
	this := GetClusterTokenByClusterId200ResponseStatus{}
	return &this
}

// GetToken returns the Token field value
func (o *GetClusterTokenByClusterId200ResponseStatus) GetToken() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Token
}

// GetTokenOk returns a tuple with the Token field value
// and a boolean to check if the value has been set.
func (o *GetClusterTokenByClusterId200ResponseStatus) GetTokenOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Token, true
}

// SetToken sets field value
func (o *GetClusterTokenByClusterId200ResponseStatus) SetToken(v string) {
	o.Token = v
}

// GetExpirationTimestamp returns the ExpirationTimestamp field value
func (o *GetClusterTokenByClusterId200ResponseStatus) GetExpirationTimestamp() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.ExpirationTimestamp
}

// GetExpirationTimestampOk returns a tuple with the ExpirationTimestamp field value
// and a boolean to check if the value has been set.
func (o *GetClusterTokenByClusterId200ResponseStatus) GetExpirationTimestampOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ExpirationTimestamp, true
}

// SetExpirationTimestamp sets field value
func (o *GetClusterTokenByClusterId200ResponseStatus) SetExpirationTimestamp(v time.Time) {
	o.ExpirationTimestamp = v
}

func (o GetClusterTokenByClusterId200ResponseStatus) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o GetClusterTokenByClusterId200ResponseStatus) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["token"] = o.Token
	toSerialize["expirationTimestamp"] = o.ExpirationTimestamp

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *GetClusterTokenByClusterId200ResponseStatus) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"token",
		"expirationTimestamp",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varGetClusterTokenByClusterId200ResponseStatus := _GetClusterTokenByClusterId200ResponseStatus{}

	err = json.Unmarshal(data, &varGetClusterTokenByClusterId200ResponseStatus)

	if err != nil {
		return err
	}

	*o = GetClusterTokenByClusterId200ResponseStatus(varGetClusterTokenByClusterId200ResponseStatus)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "token")
		delete(additionalProperties, "expirationTimestamp")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableGetClusterTokenByClusterId200ResponseStatus struct {
	value *GetClusterTokenByClusterId200ResponseStatus
	isSet bool
}

func (v NullableGetClusterTokenByClusterId200ResponseStatus) Get() *GetClusterTokenByClusterId200ResponseStatus {
	return v.value
}

func (v *NullableGetClusterTokenByClusterId200ResponseStatus) Set(val *GetClusterTokenByClusterId200ResponseStatus) {
	v.value = val
	v.isSet = true
}

func (v NullableGetClusterTokenByClusterId200ResponseStatus) IsSet() bool {
	return v.isSet
}

func (v *NullableGetClusterTokenByClusterId200ResponseStatus) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGetClusterTokenByClusterId200ResponseStatus(val *GetClusterTokenByClusterId200ResponseStatus) *NullableGetClusterTokenByClusterId200ResponseStatus {
	return &NullableGetClusterTokenByClusterId200ResponseStatus{value: val, isSet: true}
}

func (v NullableGetClusterTokenByClusterId200ResponseStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGetClusterTokenByClusterId200ResponseStatus) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
