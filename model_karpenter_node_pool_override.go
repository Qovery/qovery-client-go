/*
Qovery API

- Qovery is the fastest way to deploy your full-stack apps on any Cloud provider. - ℹ️ The API is stable and still in development.

API version: 1.0.3
Contact: support+api+documentation@qovery.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package qovery

import (
	"encoding/json"
)

// checks if the KarpenterNodePoolOverride type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &KarpenterNodePoolOverride{}

// KarpenterNodePoolOverride struct for KarpenterNodePoolOverride
type KarpenterNodePoolOverride struct {
	Consolidation        *KarpenterNodePoolConsolidation `json:"consolidation,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _KarpenterNodePoolOverride KarpenterNodePoolOverride

// NewKarpenterNodePoolOverride instantiates a new KarpenterNodePoolOverride object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewKarpenterNodePoolOverride() *KarpenterNodePoolOverride {
	this := KarpenterNodePoolOverride{}
	return &this
}

// NewKarpenterNodePoolOverrideWithDefaults instantiates a new KarpenterNodePoolOverride object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewKarpenterNodePoolOverrideWithDefaults() *KarpenterNodePoolOverride {
	this := KarpenterNodePoolOverride{}
	return &this
}

// GetConsolidation returns the Consolidation field value if set, zero value otherwise.
func (o *KarpenterNodePoolOverride) GetConsolidation() KarpenterNodePoolConsolidation {
	if o == nil || IsNil(o.Consolidation) {
		var ret KarpenterNodePoolConsolidation
		return ret
	}
	return *o.Consolidation
}

// GetConsolidationOk returns a tuple with the Consolidation field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KarpenterNodePoolOverride) GetConsolidationOk() (*KarpenterNodePoolConsolidation, bool) {
	if o == nil || IsNil(o.Consolidation) {
		return nil, false
	}
	return o.Consolidation, true
}

// HasConsolidation returns a boolean if a field has been set.
func (o *KarpenterNodePoolOverride) HasConsolidation() bool {
	if o != nil && !IsNil(o.Consolidation) {
		return true
	}

	return false
}

// SetConsolidation gets a reference to the given KarpenterNodePoolConsolidation and assigns it to the Consolidation field.
func (o *KarpenterNodePoolOverride) SetConsolidation(v KarpenterNodePoolConsolidation) {
	o.Consolidation = &v
}

func (o KarpenterNodePoolOverride) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o KarpenterNodePoolOverride) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Consolidation) {
		toSerialize["consolidation"] = o.Consolidation
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *KarpenterNodePoolOverride) UnmarshalJSON(data []byte) (err error) {
	varKarpenterNodePoolOverride := _KarpenterNodePoolOverride{}

	err = json.Unmarshal(data, &varKarpenterNodePoolOverride)

	if err != nil {
		return err
	}

	*o = KarpenterNodePoolOverride(varKarpenterNodePoolOverride)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "consolidation")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableKarpenterNodePoolOverride struct {
	value *KarpenterNodePoolOverride
	isSet bool
}

func (v NullableKarpenterNodePoolOverride) Get() *KarpenterNodePoolOverride {
	return v.value
}

func (v *NullableKarpenterNodePoolOverride) Set(val *KarpenterNodePoolOverride) {
	v.value = val
	v.isSet = true
}

func (v NullableKarpenterNodePoolOverride) IsSet() bool {
	return v.isSet
}

func (v *NullableKarpenterNodePoolOverride) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableKarpenterNodePoolOverride(val *KarpenterNodePoolOverride) *NullableKarpenterNodePoolOverride {
	return &NullableKarpenterNodePoolOverride{value: val, isSet: true}
}

func (v NullableKarpenterNodePoolOverride) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableKarpenterNodePoolOverride) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
