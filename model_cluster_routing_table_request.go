/*
Qovery API

- Qovery is the fastest way to deploy your full-stack apps on any Cloud provider. - ℹ️ The API is stable and still in development.

API version: 1.0.4
Contact: support+api+documentation@qovery.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package qovery

import (
	"encoding/json"
	"fmt"
)

// checks if the ClusterRoutingTableRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ClusterRoutingTableRequest{}

// ClusterRoutingTableRequest struct for ClusterRoutingTableRequest
type ClusterRoutingTableRequest struct {
	Routes               []ClusterRoutingTableResultsInner `json:"routes"`
	AdditionalProperties map[string]interface{}
}

type _ClusterRoutingTableRequest ClusterRoutingTableRequest

// NewClusterRoutingTableRequest instantiates a new ClusterRoutingTableRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewClusterRoutingTableRequest(routes []ClusterRoutingTableResultsInner) *ClusterRoutingTableRequest {
	this := ClusterRoutingTableRequest{}
	this.Routes = routes
	return &this
}

// NewClusterRoutingTableRequestWithDefaults instantiates a new ClusterRoutingTableRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewClusterRoutingTableRequestWithDefaults() *ClusterRoutingTableRequest {
	this := ClusterRoutingTableRequest{}
	return &this
}

// GetRoutes returns the Routes field value
func (o *ClusterRoutingTableRequest) GetRoutes() []ClusterRoutingTableResultsInner {
	if o == nil {
		var ret []ClusterRoutingTableResultsInner
		return ret
	}

	return o.Routes
}

// GetRoutesOk returns a tuple with the Routes field value
// and a boolean to check if the value has been set.
func (o *ClusterRoutingTableRequest) GetRoutesOk() ([]ClusterRoutingTableResultsInner, bool) {
	if o == nil {
		return nil, false
	}
	return o.Routes, true
}

// SetRoutes sets field value
func (o *ClusterRoutingTableRequest) SetRoutes(v []ClusterRoutingTableResultsInner) {
	o.Routes = v
}

func (o ClusterRoutingTableRequest) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ClusterRoutingTableRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["routes"] = o.Routes

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *ClusterRoutingTableRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"routes",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varClusterRoutingTableRequest := _ClusterRoutingTableRequest{}

	err = json.Unmarshal(data, &varClusterRoutingTableRequest)

	if err != nil {
		return err
	}

	*o = ClusterRoutingTableRequest(varClusterRoutingTableRequest)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "routes")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableClusterRoutingTableRequest struct {
	value *ClusterRoutingTableRequest
	isSet bool
}

func (v NullableClusterRoutingTableRequest) Get() *ClusterRoutingTableRequest {
	return v.value
}

func (v *NullableClusterRoutingTableRequest) Set(val *ClusterRoutingTableRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableClusterRoutingTableRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableClusterRoutingTableRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableClusterRoutingTableRequest(val *ClusterRoutingTableRequest) *NullableClusterRoutingTableRequest {
	return &NullableClusterRoutingTableRequest{value: val, isSet: true}
}

func (v NullableClusterRoutingTableRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableClusterRoutingTableRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
