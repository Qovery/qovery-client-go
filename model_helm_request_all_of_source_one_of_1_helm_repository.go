/*
Qovery API

- Qovery is the fastest way to deploy your full-stack apps on any Cloud provider. - ℹ️ The API is stable and still in development.

API version: 1.0.3
Contact: support+api+documentation@qovery.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package qovery

import (
	"encoding/json"
)

// checks if the HelmRequestAllOfSourceOneOf1HelmRepository type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &HelmRequestAllOfSourceOneOf1HelmRepository{}

// HelmRequestAllOfSourceOneOf1HelmRepository struct for HelmRequestAllOfSourceOneOf1HelmRepository
type HelmRequestAllOfSourceOneOf1HelmRepository struct {
	// The id of the helm repository
	Repository *string `json:"repository,omitempty"`
	// The name of the chart in the repository
	ChartName *string `json:"chart_name,omitempty"`
	// The version of the chart to use
	ChartVersion         *string `json:"chart_version,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _HelmRequestAllOfSourceOneOf1HelmRepository HelmRequestAllOfSourceOneOf1HelmRepository

// NewHelmRequestAllOfSourceOneOf1HelmRepository instantiates a new HelmRequestAllOfSourceOneOf1HelmRepository object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewHelmRequestAllOfSourceOneOf1HelmRepository() *HelmRequestAllOfSourceOneOf1HelmRepository {
	this := HelmRequestAllOfSourceOneOf1HelmRepository{}
	return &this
}

// NewHelmRequestAllOfSourceOneOf1HelmRepositoryWithDefaults instantiates a new HelmRequestAllOfSourceOneOf1HelmRepository object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewHelmRequestAllOfSourceOneOf1HelmRepositoryWithDefaults() *HelmRequestAllOfSourceOneOf1HelmRepository {
	this := HelmRequestAllOfSourceOneOf1HelmRepository{}
	return &this
}

// GetRepository returns the Repository field value if set, zero value otherwise.
func (o *HelmRequestAllOfSourceOneOf1HelmRepository) GetRepository() string {
	if o == nil || IsNil(o.Repository) {
		var ret string
		return ret
	}
	return *o.Repository
}

// GetRepositoryOk returns a tuple with the Repository field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HelmRequestAllOfSourceOneOf1HelmRepository) GetRepositoryOk() (*string, bool) {
	if o == nil || IsNil(o.Repository) {
		return nil, false
	}
	return o.Repository, true
}

// HasRepository returns a boolean if a field has been set.
func (o *HelmRequestAllOfSourceOneOf1HelmRepository) HasRepository() bool {
	if o != nil && !IsNil(o.Repository) {
		return true
	}

	return false
}

// SetRepository gets a reference to the given string and assigns it to the Repository field.
func (o *HelmRequestAllOfSourceOneOf1HelmRepository) SetRepository(v string) {
	o.Repository = &v
}

// GetChartName returns the ChartName field value if set, zero value otherwise.
func (o *HelmRequestAllOfSourceOneOf1HelmRepository) GetChartName() string {
	if o == nil || IsNil(o.ChartName) {
		var ret string
		return ret
	}
	return *o.ChartName
}

// GetChartNameOk returns a tuple with the ChartName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HelmRequestAllOfSourceOneOf1HelmRepository) GetChartNameOk() (*string, bool) {
	if o == nil || IsNil(o.ChartName) {
		return nil, false
	}
	return o.ChartName, true
}

// HasChartName returns a boolean if a field has been set.
func (o *HelmRequestAllOfSourceOneOf1HelmRepository) HasChartName() bool {
	if o != nil && !IsNil(o.ChartName) {
		return true
	}

	return false
}

// SetChartName gets a reference to the given string and assigns it to the ChartName field.
func (o *HelmRequestAllOfSourceOneOf1HelmRepository) SetChartName(v string) {
	o.ChartName = &v
}

// GetChartVersion returns the ChartVersion field value if set, zero value otherwise.
func (o *HelmRequestAllOfSourceOneOf1HelmRepository) GetChartVersion() string {
	if o == nil || IsNil(o.ChartVersion) {
		var ret string
		return ret
	}
	return *o.ChartVersion
}

// GetChartVersionOk returns a tuple with the ChartVersion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HelmRequestAllOfSourceOneOf1HelmRepository) GetChartVersionOk() (*string, bool) {
	if o == nil || IsNil(o.ChartVersion) {
		return nil, false
	}
	return o.ChartVersion, true
}

// HasChartVersion returns a boolean if a field has been set.
func (o *HelmRequestAllOfSourceOneOf1HelmRepository) HasChartVersion() bool {
	if o != nil && !IsNil(o.ChartVersion) {
		return true
	}

	return false
}

// SetChartVersion gets a reference to the given string and assigns it to the ChartVersion field.
func (o *HelmRequestAllOfSourceOneOf1HelmRepository) SetChartVersion(v string) {
	o.ChartVersion = &v
}

func (o HelmRequestAllOfSourceOneOf1HelmRepository) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o HelmRequestAllOfSourceOneOf1HelmRepository) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Repository) {
		toSerialize["repository"] = o.Repository
	}
	if !IsNil(o.ChartName) {
		toSerialize["chart_name"] = o.ChartName
	}
	if !IsNil(o.ChartVersion) {
		toSerialize["chart_version"] = o.ChartVersion
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *HelmRequestAllOfSourceOneOf1HelmRepository) UnmarshalJSON(data []byte) (err error) {
	varHelmRequestAllOfSourceOneOf1HelmRepository := _HelmRequestAllOfSourceOneOf1HelmRepository{}

	err = json.Unmarshal(data, &varHelmRequestAllOfSourceOneOf1HelmRepository)

	if err != nil {
		return err
	}

	*o = HelmRequestAllOfSourceOneOf1HelmRepository(varHelmRequestAllOfSourceOneOf1HelmRepository)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "repository")
		delete(additionalProperties, "chart_name")
		delete(additionalProperties, "chart_version")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableHelmRequestAllOfSourceOneOf1HelmRepository struct {
	value *HelmRequestAllOfSourceOneOf1HelmRepository
	isSet bool
}

func (v NullableHelmRequestAllOfSourceOneOf1HelmRepository) Get() *HelmRequestAllOfSourceOneOf1HelmRepository {
	return v.value
}

func (v *NullableHelmRequestAllOfSourceOneOf1HelmRepository) Set(val *HelmRequestAllOfSourceOneOf1HelmRepository) {
	v.value = val
	v.isSet = true
}

func (v NullableHelmRequestAllOfSourceOneOf1HelmRepository) IsSet() bool {
	return v.isSet
}

func (v *NullableHelmRequestAllOfSourceOneOf1HelmRepository) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableHelmRequestAllOfSourceOneOf1HelmRepository(val *HelmRequestAllOfSourceOneOf1HelmRepository) *NullableHelmRequestAllOfSourceOneOf1HelmRepository {
	return &NullableHelmRequestAllOfSourceOneOf1HelmRepository{value: val, isSet: true}
}

func (v NullableHelmRequestAllOfSourceOneOf1HelmRepository) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableHelmRequestAllOfSourceOneOf1HelmRepository) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
