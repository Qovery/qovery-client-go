/*
Qovery API

- Qovery is the fastest way to deploy your full-stack apps on any Cloud provider. - ℹ️ The API is stable and still in development.

API version: 1.0.3
Contact: support+api+documentation@qovery.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package qovery

import (
	"encoding/json"
	"fmt"
)

// APIVariableScopeEnum the model 'APIVariableScopeEnum'
type APIVariableScopeEnum string

// List of APIVariableScopeEnum
const (
	APIVARIABLESCOPEENUM_APPLICATION APIVariableScopeEnum = "APPLICATION"
	APIVARIABLESCOPEENUM_BUILT_IN    APIVariableScopeEnum = "BUILT_IN"
	APIVARIABLESCOPEENUM_ENVIRONMENT APIVariableScopeEnum = "ENVIRONMENT"
	APIVARIABLESCOPEENUM_PROJECT     APIVariableScopeEnum = "PROJECT"
	APIVARIABLESCOPEENUM_CONTAINER   APIVariableScopeEnum = "CONTAINER"
)

// All allowed values of APIVariableScopeEnum enum
var AllowedAPIVariableScopeEnumEnumValues = []APIVariableScopeEnum{
	"APPLICATION",
	"BUILT_IN",
	"ENVIRONMENT",
	"PROJECT",
	"CONTAINER",
}

func (v *APIVariableScopeEnum) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := APIVariableScopeEnum(value)
	for _, existing := range AllowedAPIVariableScopeEnumEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid APIVariableScopeEnum", value)
}

// NewAPIVariableScopeEnumFromValue returns a pointer to a valid APIVariableScopeEnum
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewAPIVariableScopeEnumFromValue(v string) (*APIVariableScopeEnum, error) {
	ev := APIVariableScopeEnum(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for APIVariableScopeEnum: valid values are %v", v, AllowedAPIVariableScopeEnumEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v APIVariableScopeEnum) IsValid() bool {
	for _, existing := range AllowedAPIVariableScopeEnumEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to APIVariableScopeEnum value
func (v APIVariableScopeEnum) Ptr() *APIVariableScopeEnum {
	return &v
}

type NullableAPIVariableScopeEnum struct {
	value *APIVariableScopeEnum
	isSet bool
}

func (v NullableAPIVariableScopeEnum) Get() *APIVariableScopeEnum {
	return v.value
}

func (v *NullableAPIVariableScopeEnum) Set(val *APIVariableScopeEnum) {
	v.value = val
	v.isSet = true
}

func (v NullableAPIVariableScopeEnum) IsSet() bool {
	return v.isSet
}

func (v *NullableAPIVariableScopeEnum) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAPIVariableScopeEnum(val *APIVariableScopeEnum) *NullableAPIVariableScopeEnum {
	return &NullableAPIVariableScopeEnum{value: val, isSet: true}
}

func (v NullableAPIVariableScopeEnum) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAPIVariableScopeEnum) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
