/*
Qovery API

- Qovery is the fastest way to deploy your full-stack apps on any Cloud provider. - ℹ️ The API is stable and still in development.

API version: 1.0.3
Contact: support+api+documentation@qovery.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package qovery

import (
	"encoding/json"
)

// checks if the KarpenterStableNodePoolOverride type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &KarpenterStableNodePoolOverride{}

// KarpenterStableNodePoolOverride struct for KarpenterStableNodePoolOverride
type KarpenterStableNodePoolOverride struct {
	Consolidation        *KarpenterNodePoolConsolidation `json:"consolidation,omitempty"`
	Limits               *KarpenterNodePoolLimits        `json:"limits,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _KarpenterStableNodePoolOverride KarpenterStableNodePoolOverride

// NewKarpenterStableNodePoolOverride instantiates a new KarpenterStableNodePoolOverride object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewKarpenterStableNodePoolOverride() *KarpenterStableNodePoolOverride {
	this := KarpenterStableNodePoolOverride{}
	return &this
}

// NewKarpenterStableNodePoolOverrideWithDefaults instantiates a new KarpenterStableNodePoolOverride object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewKarpenterStableNodePoolOverrideWithDefaults() *KarpenterStableNodePoolOverride {
	this := KarpenterStableNodePoolOverride{}
	return &this
}

// GetConsolidation returns the Consolidation field value if set, zero value otherwise.
func (o *KarpenterStableNodePoolOverride) GetConsolidation() KarpenterNodePoolConsolidation {
	if o == nil || IsNil(o.Consolidation) {
		var ret KarpenterNodePoolConsolidation
		return ret
	}
	return *o.Consolidation
}

// GetConsolidationOk returns a tuple with the Consolidation field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KarpenterStableNodePoolOverride) GetConsolidationOk() (*KarpenterNodePoolConsolidation, bool) {
	if o == nil || IsNil(o.Consolidation) {
		return nil, false
	}
	return o.Consolidation, true
}

// HasConsolidation returns a boolean if a field has been set.
func (o *KarpenterStableNodePoolOverride) HasConsolidation() bool {
	if o != nil && !IsNil(o.Consolidation) {
		return true
	}

	return false
}

// SetConsolidation gets a reference to the given KarpenterNodePoolConsolidation and assigns it to the Consolidation field.
func (o *KarpenterStableNodePoolOverride) SetConsolidation(v KarpenterNodePoolConsolidation) {
	o.Consolidation = &v
}

// GetLimits returns the Limits field value if set, zero value otherwise.
func (o *KarpenterStableNodePoolOverride) GetLimits() KarpenterNodePoolLimits {
	if o == nil || IsNil(o.Limits) {
		var ret KarpenterNodePoolLimits
		return ret
	}
	return *o.Limits
}

// GetLimitsOk returns a tuple with the Limits field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KarpenterStableNodePoolOverride) GetLimitsOk() (*KarpenterNodePoolLimits, bool) {
	if o == nil || IsNil(o.Limits) {
		return nil, false
	}
	return o.Limits, true
}

// HasLimits returns a boolean if a field has been set.
func (o *KarpenterStableNodePoolOverride) HasLimits() bool {
	if o != nil && !IsNil(o.Limits) {
		return true
	}

	return false
}

// SetLimits gets a reference to the given KarpenterNodePoolLimits and assigns it to the Limits field.
func (o *KarpenterStableNodePoolOverride) SetLimits(v KarpenterNodePoolLimits) {
	o.Limits = &v
}

func (o KarpenterStableNodePoolOverride) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o KarpenterStableNodePoolOverride) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Consolidation) {
		toSerialize["consolidation"] = o.Consolidation
	}
	if !IsNil(o.Limits) {
		toSerialize["limits"] = o.Limits
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *KarpenterStableNodePoolOverride) UnmarshalJSON(data []byte) (err error) {
	varKarpenterStableNodePoolOverride := _KarpenterStableNodePoolOverride{}

	err = json.Unmarshal(data, &varKarpenterStableNodePoolOverride)

	if err != nil {
		return err
	}

	*o = KarpenterStableNodePoolOverride(varKarpenterStableNodePoolOverride)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "consolidation")
		delete(additionalProperties, "limits")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableKarpenterStableNodePoolOverride struct {
	value *KarpenterStableNodePoolOverride
	isSet bool
}

func (v NullableKarpenterStableNodePoolOverride) Get() *KarpenterStableNodePoolOverride {
	return v.value
}

func (v *NullableKarpenterStableNodePoolOverride) Set(val *KarpenterStableNodePoolOverride) {
	v.value = val
	v.isSet = true
}

func (v NullableKarpenterStableNodePoolOverride) IsSet() bool {
	return v.isSet
}

func (v *NullableKarpenterStableNodePoolOverride) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableKarpenterStableNodePoolOverride(val *KarpenterStableNodePoolOverride) *NullableKarpenterStableNodePoolOverride {
	return &NullableKarpenterStableNodePoolOverride{value: val, isSet: true}
}

func (v NullableKarpenterStableNodePoolOverride) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableKarpenterStableNodePoolOverride) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
