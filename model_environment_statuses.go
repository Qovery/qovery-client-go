/*
Qovery API

- Qovery is the fastest way to deploy your full-stack apps on any Cloud provider. - ℹ️ The API is stable and still in development.

API version: 1.0.4
Contact: support+api+documentation@qovery.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package qovery

import (
	"encoding/json"
	"fmt"
)

// checks if the EnvironmentStatuses type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &EnvironmentStatuses{}

// EnvironmentStatuses struct for EnvironmentStatuses
type EnvironmentStatuses struct {
	Environment          EnvironmentStatus `json:"environment"`
	Applications         []Status          `json:"applications"`
	Containers           []Status          `json:"containers"`
	Jobs                 []Status          `json:"jobs"`
	Databases            []Status          `json:"databases"`
	Helms                []Status          `json:"helms"`
	Terraforms           []Status          `json:"terraforms"`
	AdditionalProperties map[string]interface{}
}

type _EnvironmentStatuses EnvironmentStatuses

// NewEnvironmentStatuses instantiates a new EnvironmentStatuses object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEnvironmentStatuses(environment EnvironmentStatus, applications []Status, containers []Status, jobs []Status, databases []Status, helms []Status, terraforms []Status) *EnvironmentStatuses {
	this := EnvironmentStatuses{}
	this.Environment = environment
	this.Applications = applications
	this.Containers = containers
	this.Jobs = jobs
	this.Databases = databases
	this.Helms = helms
	this.Terraforms = terraforms
	return &this
}

// NewEnvironmentStatusesWithDefaults instantiates a new EnvironmentStatuses object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEnvironmentStatusesWithDefaults() *EnvironmentStatuses {
	this := EnvironmentStatuses{}
	return &this
}

// GetEnvironment returns the Environment field value
func (o *EnvironmentStatuses) GetEnvironment() EnvironmentStatus {
	if o == nil {
		var ret EnvironmentStatus
		return ret
	}

	return o.Environment
}

// GetEnvironmentOk returns a tuple with the Environment field value
// and a boolean to check if the value has been set.
func (o *EnvironmentStatuses) GetEnvironmentOk() (*EnvironmentStatus, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Environment, true
}

// SetEnvironment sets field value
func (o *EnvironmentStatuses) SetEnvironment(v EnvironmentStatus) {
	o.Environment = v
}

// GetApplications returns the Applications field value
func (o *EnvironmentStatuses) GetApplications() []Status {
	if o == nil {
		var ret []Status
		return ret
	}

	return o.Applications
}

// GetApplicationsOk returns a tuple with the Applications field value
// and a boolean to check if the value has been set.
func (o *EnvironmentStatuses) GetApplicationsOk() ([]Status, bool) {
	if o == nil {
		return nil, false
	}
	return o.Applications, true
}

// SetApplications sets field value
func (o *EnvironmentStatuses) SetApplications(v []Status) {
	o.Applications = v
}

// GetContainers returns the Containers field value
func (o *EnvironmentStatuses) GetContainers() []Status {
	if o == nil {
		var ret []Status
		return ret
	}

	return o.Containers
}

// GetContainersOk returns a tuple with the Containers field value
// and a boolean to check if the value has been set.
func (o *EnvironmentStatuses) GetContainersOk() ([]Status, bool) {
	if o == nil {
		return nil, false
	}
	return o.Containers, true
}

// SetContainers sets field value
func (o *EnvironmentStatuses) SetContainers(v []Status) {
	o.Containers = v
}

// GetJobs returns the Jobs field value
func (o *EnvironmentStatuses) GetJobs() []Status {
	if o == nil {
		var ret []Status
		return ret
	}

	return o.Jobs
}

// GetJobsOk returns a tuple with the Jobs field value
// and a boolean to check if the value has been set.
func (o *EnvironmentStatuses) GetJobsOk() ([]Status, bool) {
	if o == nil {
		return nil, false
	}
	return o.Jobs, true
}

// SetJobs sets field value
func (o *EnvironmentStatuses) SetJobs(v []Status) {
	o.Jobs = v
}

// GetDatabases returns the Databases field value
func (o *EnvironmentStatuses) GetDatabases() []Status {
	if o == nil {
		var ret []Status
		return ret
	}

	return o.Databases
}

// GetDatabasesOk returns a tuple with the Databases field value
// and a boolean to check if the value has been set.
func (o *EnvironmentStatuses) GetDatabasesOk() ([]Status, bool) {
	if o == nil {
		return nil, false
	}
	return o.Databases, true
}

// SetDatabases sets field value
func (o *EnvironmentStatuses) SetDatabases(v []Status) {
	o.Databases = v
}

// GetHelms returns the Helms field value
func (o *EnvironmentStatuses) GetHelms() []Status {
	if o == nil {
		var ret []Status
		return ret
	}

	return o.Helms
}

// GetHelmsOk returns a tuple with the Helms field value
// and a boolean to check if the value has been set.
func (o *EnvironmentStatuses) GetHelmsOk() ([]Status, bool) {
	if o == nil {
		return nil, false
	}
	return o.Helms, true
}

// SetHelms sets field value
func (o *EnvironmentStatuses) SetHelms(v []Status) {
	o.Helms = v
}

// GetTerraforms returns the Terraforms field value
func (o *EnvironmentStatuses) GetTerraforms() []Status {
	if o == nil {
		var ret []Status
		return ret
	}

	return o.Terraforms
}

// GetTerraformsOk returns a tuple with the Terraforms field value
// and a boolean to check if the value has been set.
func (o *EnvironmentStatuses) GetTerraformsOk() ([]Status, bool) {
	if o == nil {
		return nil, false
	}
	return o.Terraforms, true
}

// SetTerraforms sets field value
func (o *EnvironmentStatuses) SetTerraforms(v []Status) {
	o.Terraforms = v
}

func (o EnvironmentStatuses) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o EnvironmentStatuses) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["environment"] = o.Environment
	toSerialize["applications"] = o.Applications
	toSerialize["containers"] = o.Containers
	toSerialize["jobs"] = o.Jobs
	toSerialize["databases"] = o.Databases
	toSerialize["helms"] = o.Helms
	toSerialize["terraforms"] = o.Terraforms

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *EnvironmentStatuses) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"environment",
		"applications",
		"containers",
		"jobs",
		"databases",
		"helms",
		"terraforms",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varEnvironmentStatuses := _EnvironmentStatuses{}

	err = json.Unmarshal(data, &varEnvironmentStatuses)

	if err != nil {
		return err
	}

	*o = EnvironmentStatuses(varEnvironmentStatuses)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "environment")
		delete(additionalProperties, "applications")
		delete(additionalProperties, "containers")
		delete(additionalProperties, "jobs")
		delete(additionalProperties, "databases")
		delete(additionalProperties, "helms")
		delete(additionalProperties, "terraforms")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableEnvironmentStatuses struct {
	value *EnvironmentStatuses
	isSet bool
}

func (v NullableEnvironmentStatuses) Get() *EnvironmentStatuses {
	return v.value
}

func (v *NullableEnvironmentStatuses) Set(val *EnvironmentStatuses) {
	v.value = val
	v.isSet = true
}

func (v NullableEnvironmentStatuses) IsSet() bool {
	return v.isSet
}

func (v *NullableEnvironmentStatuses) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEnvironmentStatuses(val *EnvironmentStatuses) *NullableEnvironmentStatuses {
	return &NullableEnvironmentStatuses{value: val, isSet: true}
}

func (v NullableEnvironmentStatuses) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEnvironmentStatuses) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
