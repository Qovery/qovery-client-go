/*
Qovery API

- Qovery is the fastest way to deploy your full-stack apps on any Cloud provider. - ℹ️ The API is stable and still in development.

API version: 1.0.3
Contact: support+api+documentation@qovery.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package qovery

import (
	"encoding/json"
)

// checks if the EnvironmentStatuses type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &EnvironmentStatuses{}

// EnvironmentStatuses struct for EnvironmentStatuses
type EnvironmentStatuses struct {
	Environment          *EnvironmentStatus `json:"environment,omitempty"`
	Applications         []Status           `json:"applications,omitempty"`
	Containers           []Status           `json:"containers,omitempty"`
	Jobs                 []Status           `json:"jobs,omitempty"`
	Databases            []Status           `json:"databases,omitempty"`
	Helms                []Status           `json:"helms,omitempty"`
	Terraforms           []Status           `json:"terraforms,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _EnvironmentStatuses EnvironmentStatuses

// NewEnvironmentStatuses instantiates a new EnvironmentStatuses object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEnvironmentStatuses() *EnvironmentStatuses {
	this := EnvironmentStatuses{}
	return &this
}

// NewEnvironmentStatusesWithDefaults instantiates a new EnvironmentStatuses object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEnvironmentStatusesWithDefaults() *EnvironmentStatuses {
	this := EnvironmentStatuses{}
	return &this
}

// GetEnvironment returns the Environment field value if set, zero value otherwise.
func (o *EnvironmentStatuses) GetEnvironment() EnvironmentStatus {
	if o == nil || IsNil(o.Environment) {
		var ret EnvironmentStatus
		return ret
	}
	return *o.Environment
}

// GetEnvironmentOk returns a tuple with the Environment field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EnvironmentStatuses) GetEnvironmentOk() (*EnvironmentStatus, bool) {
	if o == nil || IsNil(o.Environment) {
		return nil, false
	}
	return o.Environment, true
}

// HasEnvironment returns a boolean if a field has been set.
func (o *EnvironmentStatuses) HasEnvironment() bool {
	if o != nil && !IsNil(o.Environment) {
		return true
	}

	return false
}

// SetEnvironment gets a reference to the given EnvironmentStatus and assigns it to the Environment field.
func (o *EnvironmentStatuses) SetEnvironment(v EnvironmentStatus) {
	o.Environment = &v
}

// GetApplications returns the Applications field value if set, zero value otherwise.
func (o *EnvironmentStatuses) GetApplications() []Status {
	if o == nil || IsNil(o.Applications) {
		var ret []Status
		return ret
	}
	return o.Applications
}

// GetApplicationsOk returns a tuple with the Applications field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EnvironmentStatuses) GetApplicationsOk() ([]Status, bool) {
	if o == nil || IsNil(o.Applications) {
		return nil, false
	}
	return o.Applications, true
}

// HasApplications returns a boolean if a field has been set.
func (o *EnvironmentStatuses) HasApplications() bool {
	if o != nil && !IsNil(o.Applications) {
		return true
	}

	return false
}

// SetApplications gets a reference to the given []Status and assigns it to the Applications field.
func (o *EnvironmentStatuses) SetApplications(v []Status) {
	o.Applications = v
}

// GetContainers returns the Containers field value if set, zero value otherwise.
func (o *EnvironmentStatuses) GetContainers() []Status {
	if o == nil || IsNil(o.Containers) {
		var ret []Status
		return ret
	}
	return o.Containers
}

// GetContainersOk returns a tuple with the Containers field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EnvironmentStatuses) GetContainersOk() ([]Status, bool) {
	if o == nil || IsNil(o.Containers) {
		return nil, false
	}
	return o.Containers, true
}

// HasContainers returns a boolean if a field has been set.
func (o *EnvironmentStatuses) HasContainers() bool {
	if o != nil && !IsNil(o.Containers) {
		return true
	}

	return false
}

// SetContainers gets a reference to the given []Status and assigns it to the Containers field.
func (o *EnvironmentStatuses) SetContainers(v []Status) {
	o.Containers = v
}

// GetJobs returns the Jobs field value if set, zero value otherwise.
func (o *EnvironmentStatuses) GetJobs() []Status {
	if o == nil || IsNil(o.Jobs) {
		var ret []Status
		return ret
	}
	return o.Jobs
}

// GetJobsOk returns a tuple with the Jobs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EnvironmentStatuses) GetJobsOk() ([]Status, bool) {
	if o == nil || IsNil(o.Jobs) {
		return nil, false
	}
	return o.Jobs, true
}

// HasJobs returns a boolean if a field has been set.
func (o *EnvironmentStatuses) HasJobs() bool {
	if o != nil && !IsNil(o.Jobs) {
		return true
	}

	return false
}

// SetJobs gets a reference to the given []Status and assigns it to the Jobs field.
func (o *EnvironmentStatuses) SetJobs(v []Status) {
	o.Jobs = v
}

// GetDatabases returns the Databases field value if set, zero value otherwise.
func (o *EnvironmentStatuses) GetDatabases() []Status {
	if o == nil || IsNil(o.Databases) {
		var ret []Status
		return ret
	}
	return o.Databases
}

// GetDatabasesOk returns a tuple with the Databases field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EnvironmentStatuses) GetDatabasesOk() ([]Status, bool) {
	if o == nil || IsNil(o.Databases) {
		return nil, false
	}
	return o.Databases, true
}

// HasDatabases returns a boolean if a field has been set.
func (o *EnvironmentStatuses) HasDatabases() bool {
	if o != nil && !IsNil(o.Databases) {
		return true
	}

	return false
}

// SetDatabases gets a reference to the given []Status and assigns it to the Databases field.
func (o *EnvironmentStatuses) SetDatabases(v []Status) {
	o.Databases = v
}

// GetHelms returns the Helms field value if set, zero value otherwise.
func (o *EnvironmentStatuses) GetHelms() []Status {
	if o == nil || IsNil(o.Helms) {
		var ret []Status
		return ret
	}
	return o.Helms
}

// GetHelmsOk returns a tuple with the Helms field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EnvironmentStatuses) GetHelmsOk() ([]Status, bool) {
	if o == nil || IsNil(o.Helms) {
		return nil, false
	}
	return o.Helms, true
}

// HasHelms returns a boolean if a field has been set.
func (o *EnvironmentStatuses) HasHelms() bool {
	if o != nil && !IsNil(o.Helms) {
		return true
	}

	return false
}

// SetHelms gets a reference to the given []Status and assigns it to the Helms field.
func (o *EnvironmentStatuses) SetHelms(v []Status) {
	o.Helms = v
}

// GetTerraforms returns the Terraforms field value if set, zero value otherwise.
func (o *EnvironmentStatuses) GetTerraforms() []Status {
	if o == nil || IsNil(o.Terraforms) {
		var ret []Status
		return ret
	}
	return o.Terraforms
}

// GetTerraformsOk returns a tuple with the Terraforms field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EnvironmentStatuses) GetTerraformsOk() ([]Status, bool) {
	if o == nil || IsNil(o.Terraforms) {
		return nil, false
	}
	return o.Terraforms, true
}

// HasTerraforms returns a boolean if a field has been set.
func (o *EnvironmentStatuses) HasTerraforms() bool {
	if o != nil && !IsNil(o.Terraforms) {
		return true
	}

	return false
}

// SetTerraforms gets a reference to the given []Status and assigns it to the Terraforms field.
func (o *EnvironmentStatuses) SetTerraforms(v []Status) {
	o.Terraforms = v
}

func (o EnvironmentStatuses) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o EnvironmentStatuses) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Environment) {
		toSerialize["environment"] = o.Environment
	}
	if !IsNil(o.Applications) {
		toSerialize["applications"] = o.Applications
	}
	if !IsNil(o.Containers) {
		toSerialize["containers"] = o.Containers
	}
	if !IsNil(o.Jobs) {
		toSerialize["jobs"] = o.Jobs
	}
	if !IsNil(o.Databases) {
		toSerialize["databases"] = o.Databases
	}
	if !IsNil(o.Helms) {
		toSerialize["helms"] = o.Helms
	}
	if !IsNil(o.Terraforms) {
		toSerialize["terraforms"] = o.Terraforms
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *EnvironmentStatuses) UnmarshalJSON(data []byte) (err error) {
	varEnvironmentStatuses := _EnvironmentStatuses{}

	err = json.Unmarshal(data, &varEnvironmentStatuses)

	if err != nil {
		return err
	}

	*o = EnvironmentStatuses(varEnvironmentStatuses)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "environment")
		delete(additionalProperties, "applications")
		delete(additionalProperties, "containers")
		delete(additionalProperties, "jobs")
		delete(additionalProperties, "databases")
		delete(additionalProperties, "helms")
		delete(additionalProperties, "terraforms")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableEnvironmentStatuses struct {
	value *EnvironmentStatuses
	isSet bool
}

func (v NullableEnvironmentStatuses) Get() *EnvironmentStatuses {
	return v.value
}

func (v *NullableEnvironmentStatuses) Set(val *EnvironmentStatuses) {
	v.value = val
	v.isSet = true
}

func (v NullableEnvironmentStatuses) IsSet() bool {
	return v.isSet
}

func (v *NullableEnvironmentStatuses) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEnvironmentStatuses(val *EnvironmentStatuses) *NullableEnvironmentStatuses {
	return &NullableEnvironmentStatuses{value: val, isSet: true}
}

func (v NullableEnvironmentStatuses) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEnvironmentStatuses) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
