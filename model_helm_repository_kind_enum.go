/*
Qovery API

- Qovery is the fastest way to deploy your full-stack apps on any Cloud provider. - ℹ️ The API is stable and still in development.

API version: 1.0.4
Contact: support+api+documentation@qovery.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package qovery

import (
	"encoding/json"
	"fmt"
)

// HelmRepositoryKindEnum The type of your helm repository
type HelmRepositoryKindEnum string

// List of HelmRepositoryKindEnum
const (
	HELMREPOSITORYKINDENUM_HTTPS           HelmRepositoryKindEnum = "HTTPS"
	HELMREPOSITORYKINDENUM_OCI_ECR         HelmRepositoryKindEnum = "OCI_ECR"
	HELMREPOSITORYKINDENUM_OCI_SCALEWAY_CR HelmRepositoryKindEnum = "OCI_SCALEWAY_CR"
	HELMREPOSITORYKINDENUM_OCI_DOCKER_HUB  HelmRepositoryKindEnum = "OCI_DOCKER_HUB"
	HELMREPOSITORYKINDENUM_OCI_PUBLIC_ECR  HelmRepositoryKindEnum = "OCI_PUBLIC_ECR"
	HELMREPOSITORYKINDENUM_OCI_GENERIC_CR  HelmRepositoryKindEnum = "OCI_GENERIC_CR"
	HELMREPOSITORYKINDENUM_OCI_GITHUB_CR   HelmRepositoryKindEnum = "OCI_GITHUB_CR"
	HELMREPOSITORYKINDENUM_OCI_GITLAB_CR   HelmRepositoryKindEnum = "OCI_GITLAB_CR"
)

// All allowed values of HelmRepositoryKindEnum enum
var AllowedHelmRepositoryKindEnumEnumValues = []HelmRepositoryKindEnum{
	"HTTPS",
	"OCI_ECR",
	"OCI_SCALEWAY_CR",
	"OCI_DOCKER_HUB",
	"OCI_PUBLIC_ECR",
	"OCI_GENERIC_CR",
	"OCI_GITHUB_CR",
	"OCI_GITLAB_CR",
}

func (v *HelmRepositoryKindEnum) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := HelmRepositoryKindEnum(value)
	for _, existing := range AllowedHelmRepositoryKindEnumEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid HelmRepositoryKindEnum", value)
}

// NewHelmRepositoryKindEnumFromValue returns a pointer to a valid HelmRepositoryKindEnum
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewHelmRepositoryKindEnumFromValue(v string) (*HelmRepositoryKindEnum, error) {
	ev := HelmRepositoryKindEnum(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for HelmRepositoryKindEnum: valid values are %v", v, AllowedHelmRepositoryKindEnumEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v HelmRepositoryKindEnum) IsValid() bool {
	for _, existing := range AllowedHelmRepositoryKindEnumEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to HelmRepositoryKindEnum value
func (v HelmRepositoryKindEnum) Ptr() *HelmRepositoryKindEnum {
	return &v
}

type NullableHelmRepositoryKindEnum struct {
	value *HelmRepositoryKindEnum
	isSet bool
}

func (v NullableHelmRepositoryKindEnum) Get() *HelmRepositoryKindEnum {
	return v.value
}

func (v *NullableHelmRepositoryKindEnum) Set(val *HelmRepositoryKindEnum) {
	v.value = val
	v.isSet = true
}

func (v NullableHelmRepositoryKindEnum) IsSet() bool {
	return v.isSet
}

func (v *NullableHelmRepositoryKindEnum) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableHelmRepositoryKindEnum(val *HelmRepositoryKindEnum) *NullableHelmRepositoryKindEnum {
	return &NullableHelmRepositoryKindEnum{value: val, isSet: true}
}

func (v NullableHelmRepositoryKindEnum) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableHelmRepositoryKindEnum) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
