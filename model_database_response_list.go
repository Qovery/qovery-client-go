/*
Qovery API

- Qovery is the fastest way to deploy your full-stack apps on any Cloud provider. - ℹ️ The API is stable and still in development.

API version: 1.0.3
Contact: support+api+documentation@qovery.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package qovery

import (
	"encoding/json"
)

// checks if the DatabaseResponseList type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DatabaseResponseList{}

// DatabaseResponseList struct for DatabaseResponseList
type DatabaseResponseList struct {
	Results []Database `json:"results,omitempty"`
}

// NewDatabaseResponseList instantiates a new DatabaseResponseList object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDatabaseResponseList() *DatabaseResponseList {
	this := DatabaseResponseList{}
	return &this
}

// NewDatabaseResponseListWithDefaults instantiates a new DatabaseResponseList object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDatabaseResponseListWithDefaults() *DatabaseResponseList {
	this := DatabaseResponseList{}
	return &this
}

// GetResults returns the Results field value if set, zero value otherwise.
func (o *DatabaseResponseList) GetResults() []Database {
	if o == nil || IsNil(o.Results) {
		var ret []Database
		return ret
	}
	return o.Results
}

// GetResultsOk returns a tuple with the Results field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DatabaseResponseList) GetResultsOk() ([]Database, bool) {
	if o == nil || IsNil(o.Results) {
		return nil, false
	}
	return o.Results, true
}

// HasResults returns a boolean if a field has been set.
func (o *DatabaseResponseList) HasResults() bool {
	if o != nil && !IsNil(o.Results) {
		return true
	}

	return false
}

// SetResults gets a reference to the given []Database and assigns it to the Results field.
func (o *DatabaseResponseList) SetResults(v []Database) {
	o.Results = v
}

func (o DatabaseResponseList) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DatabaseResponseList) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Results) {
		toSerialize["results"] = o.Results
	}
	return toSerialize, nil
}

type NullableDatabaseResponseList struct {
	value *DatabaseResponseList
	isSet bool
}

func (v NullableDatabaseResponseList) Get() *DatabaseResponseList {
	return v.value
}

func (v *NullableDatabaseResponseList) Set(val *DatabaseResponseList) {
	v.value = val
	v.isSet = true
}

func (v NullableDatabaseResponseList) IsSet() bool {
	return v.isSet
}

func (v *NullableDatabaseResponseList) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDatabaseResponseList(val *DatabaseResponseList) *NullableDatabaseResponseList {
	return &NullableDatabaseResponseList{value: val, isSet: true}
}

func (v NullableDatabaseResponseList) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDatabaseResponseList) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
