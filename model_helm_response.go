/*
Qovery API

- Qovery is the fastest way to deploy your full-stack apps on any Cloud provider. - ℹ️ The API is stable and still in development.

API version: 1.0.3
Contact: support+api+documentation@qovery.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package qovery

import (
	"encoding/json"
	"fmt"
	"time"
)

// checks if the HelmResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &HelmResponse{}

// HelmResponse struct for HelmResponse
type HelmResponse struct {
	Id          string          `json:"id"`
	CreatedAt   time.Time       `json:"created_at"`
	UpdatedAt   *time.Time      `json:"updated_at,omitempty"`
	Environment ReferenceObject `json:"environment"`
	// name is case insensitive
	Name        string  `json:"name"`
	Description *string `json:"description,omitempty"`
	// Maximum number of seconds allowed for helm to run before killing it and mark it as failed
	TimeoutSec *int32 `json:"timeout_sec,omitempty"`
	// Indicates if the 'environment preview option' is enabled.   If enabled, a preview environment will be automatically cloned when `/preview` endpoint is called.   If not specified, it takes the value of the `auto_preview` property from the associated environment.
	AutoPreview bool `json:"auto_preview"`
	// Specify if the service will be automatically updated after receiving a new image tag or a new commit according to the source type.
	AutoDeploy bool                     `json:"auto_deploy"`
	Ports      []HelmResponseAllOfPorts `json:"ports,omitempty"`
	Source     HelmResponseAllOfSource  `json:"source"`
	// The extra arguments to pass to helm
	Arguments []string `json:"arguments"`
	// If we should allow the chart to deploy object outside his specified namespace. Setting this flag to true, requires special rights
	AllowClusterWideResources bool                            `json:"allow_cluster_wide_resources"`
	ValuesOverride            HelmResponseAllOfValuesOverride `json:"values_override"`
	// Icon URI representing the helm service.
	IconUri              string           `json:"icon_uri"`
	ServiceType          *ServiceTypeEnum `json:"serviceType,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _HelmResponse HelmResponse

// NewHelmResponse instantiates a new HelmResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewHelmResponse(id string, createdAt time.Time, environment ReferenceObject, name string, autoPreview bool, autoDeploy bool, source HelmResponseAllOfSource, arguments []string, allowClusterWideResources bool, valuesOverride HelmResponseAllOfValuesOverride, iconUri string) *HelmResponse {
	this := HelmResponse{}
	this.Id = id
	this.CreatedAt = createdAt
	this.Environment = environment
	this.Name = name
	var timeoutSec int32 = 600
	this.TimeoutSec = &timeoutSec
	this.AutoPreview = autoPreview
	this.AutoDeploy = autoDeploy
	this.Source = source
	this.Arguments = arguments
	this.AllowClusterWideResources = allowClusterWideResources
	this.ValuesOverride = valuesOverride
	this.IconUri = iconUri
	return &this
}

// NewHelmResponseWithDefaults instantiates a new HelmResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewHelmResponseWithDefaults() *HelmResponse {
	this := HelmResponse{}
	var timeoutSec int32 = 600
	this.TimeoutSec = &timeoutSec
	var allowClusterWideResources bool = false
	this.AllowClusterWideResources = allowClusterWideResources
	return &this
}

// GetId returns the Id field value
func (o *HelmResponse) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *HelmResponse) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *HelmResponse) SetId(v string) {
	o.Id = v
}

// GetCreatedAt returns the CreatedAt field value
func (o *HelmResponse) GetCreatedAt() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value
// and a boolean to check if the value has been set.
func (o *HelmResponse) GetCreatedAtOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CreatedAt, true
}

// SetCreatedAt sets field value
func (o *HelmResponse) SetCreatedAt(v time.Time) {
	o.CreatedAt = v
}

// GetUpdatedAt returns the UpdatedAt field value if set, zero value otherwise.
func (o *HelmResponse) GetUpdatedAt() time.Time {
	if o == nil || IsNil(o.UpdatedAt) {
		var ret time.Time
		return ret
	}
	return *o.UpdatedAt
}

// GetUpdatedAtOk returns a tuple with the UpdatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HelmResponse) GetUpdatedAtOk() (*time.Time, bool) {
	if o == nil || IsNil(o.UpdatedAt) {
		return nil, false
	}
	return o.UpdatedAt, true
}

// HasUpdatedAt returns a boolean if a field has been set.
func (o *HelmResponse) HasUpdatedAt() bool {
	if o != nil && !IsNil(o.UpdatedAt) {
		return true
	}

	return false
}

// SetUpdatedAt gets a reference to the given time.Time and assigns it to the UpdatedAt field.
func (o *HelmResponse) SetUpdatedAt(v time.Time) {
	o.UpdatedAt = &v
}

// GetEnvironment returns the Environment field value
func (o *HelmResponse) GetEnvironment() ReferenceObject {
	if o == nil {
		var ret ReferenceObject
		return ret
	}

	return o.Environment
}

// GetEnvironmentOk returns a tuple with the Environment field value
// and a boolean to check if the value has been set.
func (o *HelmResponse) GetEnvironmentOk() (*ReferenceObject, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Environment, true
}

// SetEnvironment sets field value
func (o *HelmResponse) SetEnvironment(v ReferenceObject) {
	o.Environment = v
}

// GetName returns the Name field value
func (o *HelmResponse) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *HelmResponse) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *HelmResponse) SetName(v string) {
	o.Name = v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *HelmResponse) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HelmResponse) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *HelmResponse) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *HelmResponse) SetDescription(v string) {
	o.Description = &v
}

// GetTimeoutSec returns the TimeoutSec field value if set, zero value otherwise.
func (o *HelmResponse) GetTimeoutSec() int32 {
	if o == nil || IsNil(o.TimeoutSec) {
		var ret int32
		return ret
	}
	return *o.TimeoutSec
}

// GetTimeoutSecOk returns a tuple with the TimeoutSec field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HelmResponse) GetTimeoutSecOk() (*int32, bool) {
	if o == nil || IsNil(o.TimeoutSec) {
		return nil, false
	}
	return o.TimeoutSec, true
}

// HasTimeoutSec returns a boolean if a field has been set.
func (o *HelmResponse) HasTimeoutSec() bool {
	if o != nil && !IsNil(o.TimeoutSec) {
		return true
	}

	return false
}

// SetTimeoutSec gets a reference to the given int32 and assigns it to the TimeoutSec field.
func (o *HelmResponse) SetTimeoutSec(v int32) {
	o.TimeoutSec = &v
}

// GetAutoPreview returns the AutoPreview field value
func (o *HelmResponse) GetAutoPreview() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.AutoPreview
}

// GetAutoPreviewOk returns a tuple with the AutoPreview field value
// and a boolean to check if the value has been set.
func (o *HelmResponse) GetAutoPreviewOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AutoPreview, true
}

// SetAutoPreview sets field value
func (o *HelmResponse) SetAutoPreview(v bool) {
	o.AutoPreview = v
}

// GetAutoDeploy returns the AutoDeploy field value
func (o *HelmResponse) GetAutoDeploy() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.AutoDeploy
}

// GetAutoDeployOk returns a tuple with the AutoDeploy field value
// and a boolean to check if the value has been set.
func (o *HelmResponse) GetAutoDeployOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AutoDeploy, true
}

// SetAutoDeploy sets field value
func (o *HelmResponse) SetAutoDeploy(v bool) {
	o.AutoDeploy = v
}

// GetPorts returns the Ports field value if set, zero value otherwise.
func (o *HelmResponse) GetPorts() []HelmResponseAllOfPorts {
	if o == nil || IsNil(o.Ports) {
		var ret []HelmResponseAllOfPorts
		return ret
	}
	return o.Ports
}

// GetPortsOk returns a tuple with the Ports field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HelmResponse) GetPortsOk() ([]HelmResponseAllOfPorts, bool) {
	if o == nil || IsNil(o.Ports) {
		return nil, false
	}
	return o.Ports, true
}

// HasPorts returns a boolean if a field has been set.
func (o *HelmResponse) HasPorts() bool {
	if o != nil && !IsNil(o.Ports) {
		return true
	}

	return false
}

// SetPorts gets a reference to the given []HelmResponseAllOfPorts and assigns it to the Ports field.
func (o *HelmResponse) SetPorts(v []HelmResponseAllOfPorts) {
	o.Ports = v
}

// GetSource returns the Source field value
func (o *HelmResponse) GetSource() HelmResponseAllOfSource {
	if o == nil {
		var ret HelmResponseAllOfSource
		return ret
	}

	return o.Source
}

// GetSourceOk returns a tuple with the Source field value
// and a boolean to check if the value has been set.
func (o *HelmResponse) GetSourceOk() (*HelmResponseAllOfSource, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Source, true
}

// SetSource sets field value
func (o *HelmResponse) SetSource(v HelmResponseAllOfSource) {
	o.Source = v
}

// GetArguments returns the Arguments field value
func (o *HelmResponse) GetArguments() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.Arguments
}

// GetArgumentsOk returns a tuple with the Arguments field value
// and a boolean to check if the value has been set.
func (o *HelmResponse) GetArgumentsOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Arguments, true
}

// SetArguments sets field value
func (o *HelmResponse) SetArguments(v []string) {
	o.Arguments = v
}

// GetAllowClusterWideResources returns the AllowClusterWideResources field value
func (o *HelmResponse) GetAllowClusterWideResources() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.AllowClusterWideResources
}

// GetAllowClusterWideResourcesOk returns a tuple with the AllowClusterWideResources field value
// and a boolean to check if the value has been set.
func (o *HelmResponse) GetAllowClusterWideResourcesOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AllowClusterWideResources, true
}

// SetAllowClusterWideResources sets field value
func (o *HelmResponse) SetAllowClusterWideResources(v bool) {
	o.AllowClusterWideResources = v
}

// GetValuesOverride returns the ValuesOverride field value
func (o *HelmResponse) GetValuesOverride() HelmResponseAllOfValuesOverride {
	if o == nil {
		var ret HelmResponseAllOfValuesOverride
		return ret
	}

	return o.ValuesOverride
}

// GetValuesOverrideOk returns a tuple with the ValuesOverride field value
// and a boolean to check if the value has been set.
func (o *HelmResponse) GetValuesOverrideOk() (*HelmResponseAllOfValuesOverride, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ValuesOverride, true
}

// SetValuesOverride sets field value
func (o *HelmResponse) SetValuesOverride(v HelmResponseAllOfValuesOverride) {
	o.ValuesOverride = v
}

// GetIconUri returns the IconUri field value
func (o *HelmResponse) GetIconUri() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.IconUri
}

// GetIconUriOk returns a tuple with the IconUri field value
// and a boolean to check if the value has been set.
func (o *HelmResponse) GetIconUriOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.IconUri, true
}

// SetIconUri sets field value
func (o *HelmResponse) SetIconUri(v string) {
	o.IconUri = v
}

// GetServiceType returns the ServiceType field value if set, zero value otherwise.
func (o *HelmResponse) GetServiceType() ServiceTypeEnum {
	if o == nil || IsNil(o.ServiceType) {
		var ret ServiceTypeEnum
		return ret
	}
	return *o.ServiceType
}

// GetServiceTypeOk returns a tuple with the ServiceType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HelmResponse) GetServiceTypeOk() (*ServiceTypeEnum, bool) {
	if o == nil || IsNil(o.ServiceType) {
		return nil, false
	}
	return o.ServiceType, true
}

// HasServiceType returns a boolean if a field has been set.
func (o *HelmResponse) HasServiceType() bool {
	if o != nil && !IsNil(o.ServiceType) {
		return true
	}

	return false
}

// SetServiceType gets a reference to the given ServiceTypeEnum and assigns it to the ServiceType field.
func (o *HelmResponse) SetServiceType(v ServiceTypeEnum) {
	o.ServiceType = &v
}

func (o HelmResponse) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o HelmResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["created_at"] = o.CreatedAt
	if !IsNil(o.UpdatedAt) {
		toSerialize["updated_at"] = o.UpdatedAt
	}
	toSerialize["environment"] = o.Environment
	toSerialize["name"] = o.Name
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.TimeoutSec) {
		toSerialize["timeout_sec"] = o.TimeoutSec
	}
	toSerialize["auto_preview"] = o.AutoPreview
	toSerialize["auto_deploy"] = o.AutoDeploy
	if !IsNil(o.Ports) {
		toSerialize["ports"] = o.Ports
	}
	toSerialize["source"] = o.Source
	toSerialize["arguments"] = o.Arguments
	toSerialize["allow_cluster_wide_resources"] = o.AllowClusterWideResources
	toSerialize["values_override"] = o.ValuesOverride
	toSerialize["icon_uri"] = o.IconUri
	if !IsNil(o.ServiceType) {
		toSerialize["serviceType"] = o.ServiceType
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *HelmResponse) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"created_at",
		"environment",
		"name",
		"auto_preview",
		"auto_deploy",
		"source",
		"arguments",
		"allow_cluster_wide_resources",
		"values_override",
		"icon_uri",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varHelmResponse := _HelmResponse{}

	err = json.Unmarshal(data, &varHelmResponse)

	if err != nil {
		return err
	}

	*o = HelmResponse(varHelmResponse)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "id")
		delete(additionalProperties, "created_at")
		delete(additionalProperties, "updated_at")
		delete(additionalProperties, "environment")
		delete(additionalProperties, "name")
		delete(additionalProperties, "description")
		delete(additionalProperties, "timeout_sec")
		delete(additionalProperties, "auto_preview")
		delete(additionalProperties, "auto_deploy")
		delete(additionalProperties, "ports")
		delete(additionalProperties, "source")
		delete(additionalProperties, "arguments")
		delete(additionalProperties, "allow_cluster_wide_resources")
		delete(additionalProperties, "values_override")
		delete(additionalProperties, "icon_uri")
		delete(additionalProperties, "serviceType")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableHelmResponse struct {
	value *HelmResponse
	isSet bool
}

func (v NullableHelmResponse) Get() *HelmResponse {
	return v.value
}

func (v *NullableHelmResponse) Set(val *HelmResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableHelmResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableHelmResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableHelmResponse(val *HelmResponse) *NullableHelmResponse {
	return &NullableHelmResponse{value: val, isSet: true}
}

func (v NullableHelmResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableHelmResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
