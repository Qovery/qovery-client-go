/*
Qovery API

- Qovery is the fastest way to deploy your full-stack apps on any Cloud provider. - ℹ️ The API is stable and still in development.

API version: 1.0.4
Contact: support+api+documentation@qovery.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package qovery

import (
	"encoding/json"
	"fmt"
)

// OrganizationEventSubTargetType Type of the organization event
type OrganizationEventSubTargetType string

// List of OrganizationEventSubTargetType
const (
	ORGANIZATIONEVENTSUBTARGETTYPE_ADVANCED_SETTINGS          OrganizationEventSubTargetType = "ADVANCED_SETTINGS"
	ORGANIZATIONEVENTSUBTARGETTYPE_API_TOKEN                  OrganizationEventSubTargetType = "API_TOKEN"
	ORGANIZATIONEVENTSUBTARGETTYPE_BILLING_INFO               OrganizationEventSubTargetType = "BILLING_INFO"
	ORGANIZATIONEVENTSUBTARGETTYPE_CLOUD_PROVIDER_CREDENTIALS OrganizationEventSubTargetType = "CLOUD_PROVIDER_CREDENTIALS"
	ORGANIZATIONEVENTSUBTARGETTYPE_CLUSTER_CREDENTIALS        OrganizationEventSubTargetType = "CLUSTER_CREDENTIALS"
	ORGANIZATIONEVENTSUBTARGETTYPE_CLUSTER_ROUTING_TABLE      OrganizationEventSubTargetType = "CLUSTER_ROUTING_TABLE"
	ORGANIZATIONEVENTSUBTARGETTYPE_CONFIG                     OrganizationEventSubTargetType = "CONFIG"
	ORGANIZATIONEVENTSUBTARGETTYPE_CREDIT_CARD                OrganizationEventSubTargetType = "CREDIT_CARD"
	ORGANIZATIONEVENTSUBTARGETTYPE_CREDIT_CODE                OrganizationEventSubTargetType = "CREDIT_CODE"
	ORGANIZATIONEVENTSUBTARGETTYPE_CUSTOM_DOMAIN              OrganizationEventSubTargetType = "CUSTOM_DOMAIN"
	ORGANIZATIONEVENTSUBTARGETTYPE_CUSTOM_ROLE                OrganizationEventSubTargetType = "CUSTOM_ROLE"
	ORGANIZATIONEVENTSUBTARGETTYPE_DEPLOYMENT_RULE            OrganizationEventSubTargetType = "DEPLOYMENT_RULE"
	ORGANIZATIONEVENTSUBTARGETTYPE_DEPLOYMENT_STAGE           OrganizationEventSubTargetType = "DEPLOYMENT_STAGE"
	ORGANIZATIONEVENTSUBTARGETTYPE_GITHUB_APP                 OrganizationEventSubTargetType = "GITHUB_APP"
	ORGANIZATIONEVENTSUBTARGETTYPE_GIT_REPOSITORY             OrganizationEventSubTargetType = "GIT_REPOSITORY"
	ORGANIZATIONEVENTSUBTARGETTYPE_GIT_TOKEN                  OrganizationEventSubTargetType = "GIT_TOKEN"
	ORGANIZATIONEVENTSUBTARGETTYPE_INVITATION                 OrganizationEventSubTargetType = "INVITATION"
	ORGANIZATIONEVENTSUBTARGETTYPE_MEMBER_ROLE                OrganizationEventSubTargetType = "MEMBER_ROLE"
	ORGANIZATIONEVENTSUBTARGETTYPE_PLAN                       OrganizationEventSubTargetType = "PLAN"
	ORGANIZATIONEVENTSUBTARGETTYPE_SECRET                     OrganizationEventSubTargetType = "SECRET"
	ORGANIZATIONEVENTSUBTARGETTYPE_TERRAFORM                  OrganizationEventSubTargetType = "TERRAFORM"
	ORGANIZATIONEVENTSUBTARGETTYPE_TRANSFER_OWNERSHIP         OrganizationEventSubTargetType = "TRANSFER_OWNERSHIP"
	ORGANIZATIONEVENTSUBTARGETTYPE_VARIABLE                   OrganizationEventSubTargetType = "VARIABLE"
)

// All allowed values of OrganizationEventSubTargetType enum
var AllowedOrganizationEventSubTargetTypeEnumValues = []OrganizationEventSubTargetType{
	"ADVANCED_SETTINGS",
	"API_TOKEN",
	"BILLING_INFO",
	"CLOUD_PROVIDER_CREDENTIALS",
	"CLUSTER_CREDENTIALS",
	"CLUSTER_ROUTING_TABLE",
	"CONFIG",
	"CREDIT_CARD",
	"CREDIT_CODE",
	"CUSTOM_DOMAIN",
	"CUSTOM_ROLE",
	"DEPLOYMENT_RULE",
	"DEPLOYMENT_STAGE",
	"GITHUB_APP",
	"GIT_REPOSITORY",
	"GIT_TOKEN",
	"INVITATION",
	"MEMBER_ROLE",
	"PLAN",
	"SECRET",
	"TERRAFORM",
	"TRANSFER_OWNERSHIP",
	"VARIABLE",
}

func (v *OrganizationEventSubTargetType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := OrganizationEventSubTargetType(value)
	for _, existing := range AllowedOrganizationEventSubTargetTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid OrganizationEventSubTargetType", value)
}

// NewOrganizationEventSubTargetTypeFromValue returns a pointer to a valid OrganizationEventSubTargetType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewOrganizationEventSubTargetTypeFromValue(v string) (*OrganizationEventSubTargetType, error) {
	ev := OrganizationEventSubTargetType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for OrganizationEventSubTargetType: valid values are %v", v, AllowedOrganizationEventSubTargetTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v OrganizationEventSubTargetType) IsValid() bool {
	for _, existing := range AllowedOrganizationEventSubTargetTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to OrganizationEventSubTargetType value
func (v OrganizationEventSubTargetType) Ptr() *OrganizationEventSubTargetType {
	return &v
}

type NullableOrganizationEventSubTargetType struct {
	value *OrganizationEventSubTargetType
	isSet bool
}

func (v NullableOrganizationEventSubTargetType) Get() *OrganizationEventSubTargetType {
	return v.value
}

func (v *NullableOrganizationEventSubTargetType) Set(val *OrganizationEventSubTargetType) {
	v.value = val
	v.isSet = true
}

func (v NullableOrganizationEventSubTargetType) IsSet() bool {
	return v.isSet
}

func (v *NullableOrganizationEventSubTargetType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOrganizationEventSubTargetType(val *OrganizationEventSubTargetType) *NullableOrganizationEventSubTargetType {
	return &NullableOrganizationEventSubTargetType{value: val, isSet: true}
}

func (v NullableOrganizationEventSubTargetType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOrganizationEventSubTargetType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
