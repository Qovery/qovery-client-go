/*
Qovery API

- Qovery is the fastest way to deploy your full-stack apps on any Cloud provider. - ℹ️ The API is stable and still in development.

API version: 1.0.4
Contact: support+api+documentation@qovery.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package qovery

import (
	"encoding/json"
	"fmt"
)

// checks if the CustomDomainRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CustomDomainRequest{}

// CustomDomainRequest struct for CustomDomainRequest
type CustomDomainRequest struct {
	// your custom domain
	Domain string `json:"domain"`
	// to control if a certificate has to be generated for this custom domain by Qovery. The default value is `true`. This flag should be set to `false` if a CDN or other entities are managing the certificate for the specified domain and the traffic is proxied by the CDN to Qovery.
	GenerateCertificate bool `json:"generate_certificate"`
	// Indicates if the custom domain is behind a CDN (i.e Cloudflare). This will condition the way we are checking CNAME before & during a deployment: * If `true` then we only check the domain points to an IP * If `false` then we check that the domain resolves to the correct service Load Balancer
	UseCdn               *bool `json:"use_cdn,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _CustomDomainRequest CustomDomainRequest

// NewCustomDomainRequest instantiates a new CustomDomainRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCustomDomainRequest(domain string, generateCertificate bool) *CustomDomainRequest {
	this := CustomDomainRequest{}
	this.Domain = domain
	this.GenerateCertificate = generateCertificate
	return &this
}

// NewCustomDomainRequestWithDefaults instantiates a new CustomDomainRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCustomDomainRequestWithDefaults() *CustomDomainRequest {
	this := CustomDomainRequest{}
	return &this
}

// GetDomain returns the Domain field value
func (o *CustomDomainRequest) GetDomain() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Domain
}

// GetDomainOk returns a tuple with the Domain field value
// and a boolean to check if the value has been set.
func (o *CustomDomainRequest) GetDomainOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Domain, true
}

// SetDomain sets field value
func (o *CustomDomainRequest) SetDomain(v string) {
	o.Domain = v
}

// GetGenerateCertificate returns the GenerateCertificate field value
func (o *CustomDomainRequest) GetGenerateCertificate() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.GenerateCertificate
}

// GetGenerateCertificateOk returns a tuple with the GenerateCertificate field value
// and a boolean to check if the value has been set.
func (o *CustomDomainRequest) GetGenerateCertificateOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.GenerateCertificate, true
}

// SetGenerateCertificate sets field value
func (o *CustomDomainRequest) SetGenerateCertificate(v bool) {
	o.GenerateCertificate = v
}

// GetUseCdn returns the UseCdn field value if set, zero value otherwise.
func (o *CustomDomainRequest) GetUseCdn() bool {
	if o == nil || IsNil(o.UseCdn) {
		var ret bool
		return ret
	}
	return *o.UseCdn
}

// GetUseCdnOk returns a tuple with the UseCdn field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CustomDomainRequest) GetUseCdnOk() (*bool, bool) {
	if o == nil || IsNil(o.UseCdn) {
		return nil, false
	}
	return o.UseCdn, true
}

// HasUseCdn returns a boolean if a field has been set.
func (o *CustomDomainRequest) HasUseCdn() bool {
	if o != nil && !IsNil(o.UseCdn) {
		return true
	}

	return false
}

// SetUseCdn gets a reference to the given bool and assigns it to the UseCdn field.
func (o *CustomDomainRequest) SetUseCdn(v bool) {
	o.UseCdn = &v
}

func (o CustomDomainRequest) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CustomDomainRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["domain"] = o.Domain
	toSerialize["generate_certificate"] = o.GenerateCertificate
	if !IsNil(o.UseCdn) {
		toSerialize["use_cdn"] = o.UseCdn
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *CustomDomainRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"domain",
		"generate_certificate",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCustomDomainRequest := _CustomDomainRequest{}

	err = json.Unmarshal(data, &varCustomDomainRequest)

	if err != nil {
		return err
	}

	*o = CustomDomainRequest(varCustomDomainRequest)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "domain")
		delete(additionalProperties, "generate_certificate")
		delete(additionalProperties, "use_cdn")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableCustomDomainRequest struct {
	value *CustomDomainRequest
	isSet bool
}

func (v NullableCustomDomainRequest) Get() *CustomDomainRequest {
	return v.value
}

func (v *NullableCustomDomainRequest) Set(val *CustomDomainRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableCustomDomainRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableCustomDomainRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCustomDomainRequest(val *CustomDomainRequest) *NullableCustomDomainRequest {
	return &NullableCustomDomainRequest{value: val, isSet: true}
}

func (v NullableCustomDomainRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCustomDomainRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
