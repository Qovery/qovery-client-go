/*
Qovery API

- Qovery is the fastest way to deploy your full-stack apps on any Cloud provider. - ℹ️ The API is stable and still in development.

API version: 1.0.3
Contact: support+api+documentation@qovery.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package qovery

import (
	"encoding/json"
	"fmt"
)

// HelmDefaultValuesRequestAllOfSource - struct for HelmDefaultValuesRequestAllOfSource
type HelmDefaultValuesRequestAllOfSource struct {
	HelmRequestAllOfSourceOneOf  *HelmRequestAllOfSourceOneOf
	HelmRequestAllOfSourceOneOf1 *HelmRequestAllOfSourceOneOf1
}

// HelmRequestAllOfSourceOneOfAsHelmDefaultValuesRequestAllOfSource is a convenience function that returns HelmRequestAllOfSourceOneOf wrapped in HelmDefaultValuesRequestAllOfSource
func HelmRequestAllOfSourceOneOfAsHelmDefaultValuesRequestAllOfSource(v *HelmRequestAllOfSourceOneOf) HelmDefaultValuesRequestAllOfSource {
	return HelmDefaultValuesRequestAllOfSource{
		HelmRequestAllOfSourceOneOf: v,
	}
}

// HelmRequestAllOfSourceOneOf1AsHelmDefaultValuesRequestAllOfSource is a convenience function that returns HelmRequestAllOfSourceOneOf1 wrapped in HelmDefaultValuesRequestAllOfSource
func HelmRequestAllOfSourceOneOf1AsHelmDefaultValuesRequestAllOfSource(v *HelmRequestAllOfSourceOneOf1) HelmDefaultValuesRequestAllOfSource {
	return HelmDefaultValuesRequestAllOfSource{
		HelmRequestAllOfSourceOneOf1: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *HelmDefaultValuesRequestAllOfSource) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into HelmRequestAllOfSourceOneOf
	err = newStrictDecoder(data).Decode(&dst.HelmRequestAllOfSourceOneOf)
	if err == nil {
		jsonHelmRequestAllOfSourceOneOf, _ := json.Marshal(dst.HelmRequestAllOfSourceOneOf)
		if string(jsonHelmRequestAllOfSourceOneOf) == "{}" { // empty struct
			dst.HelmRequestAllOfSourceOneOf = nil
		} else {
			match++
		}
	} else {
		dst.HelmRequestAllOfSourceOneOf = nil
	}

	// try to unmarshal data into HelmRequestAllOfSourceOneOf1
	err = newStrictDecoder(data).Decode(&dst.HelmRequestAllOfSourceOneOf1)
	if err == nil {
		jsonHelmRequestAllOfSourceOneOf1, _ := json.Marshal(dst.HelmRequestAllOfSourceOneOf1)
		if string(jsonHelmRequestAllOfSourceOneOf1) == "{}" { // empty struct
			dst.HelmRequestAllOfSourceOneOf1 = nil
		} else {
			match++
		}
	} else {
		dst.HelmRequestAllOfSourceOneOf1 = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.HelmRequestAllOfSourceOneOf = nil
		dst.HelmRequestAllOfSourceOneOf1 = nil

		return fmt.Errorf("data matches more than one schema in oneOf(HelmDefaultValuesRequestAllOfSource)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(HelmDefaultValuesRequestAllOfSource)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src HelmDefaultValuesRequestAllOfSource) MarshalJSON() ([]byte, error) {
	if src.HelmRequestAllOfSourceOneOf != nil {
		return json.Marshal(&src.HelmRequestAllOfSourceOneOf)
	}

	if src.HelmRequestAllOfSourceOneOf1 != nil {
		return json.Marshal(&src.HelmRequestAllOfSourceOneOf1)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *HelmDefaultValuesRequestAllOfSource) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.HelmRequestAllOfSourceOneOf != nil {
		return obj.HelmRequestAllOfSourceOneOf
	}

	if obj.HelmRequestAllOfSourceOneOf1 != nil {
		return obj.HelmRequestAllOfSourceOneOf1
	}

	// all schemas are nil
	return nil
}

type NullableHelmDefaultValuesRequestAllOfSource struct {
	value *HelmDefaultValuesRequestAllOfSource
	isSet bool
}

func (v NullableHelmDefaultValuesRequestAllOfSource) Get() *HelmDefaultValuesRequestAllOfSource {
	return v.value
}

func (v *NullableHelmDefaultValuesRequestAllOfSource) Set(val *HelmDefaultValuesRequestAllOfSource) {
	v.value = val
	v.isSet = true
}

func (v NullableHelmDefaultValuesRequestAllOfSource) IsSet() bool {
	return v.isSet
}

func (v *NullableHelmDefaultValuesRequestAllOfSource) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableHelmDefaultValuesRequestAllOfSource(val *HelmDefaultValuesRequestAllOfSource) *NullableHelmDefaultValuesRequestAllOfSource {
	return &NullableHelmDefaultValuesRequestAllOfSource{value: val, isSet: true}
}

func (v NullableHelmDefaultValuesRequestAllOfSource) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableHelmDefaultValuesRequestAllOfSource) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
