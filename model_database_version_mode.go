/*
Qovery API

- Qovery is the fastest way to deploy your full-stack apps on any Cloud provider. - ℹ️ The API is stable and still in development.

API version: 1.0.4
Contact: support+api+documentation@qovery.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package qovery

import (
	"encoding/json"
)

// checks if the DatabaseVersionMode type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DatabaseVersionMode{}

// DatabaseVersionMode struct for DatabaseVersionMode
type DatabaseVersionMode struct {
	Name                 *string           `json:"name,omitempty"`
	SupportedMode        *DatabaseModeEnum `json:"supported_mode,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _DatabaseVersionMode DatabaseVersionMode

// NewDatabaseVersionMode instantiates a new DatabaseVersionMode object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDatabaseVersionMode() *DatabaseVersionMode {
	this := DatabaseVersionMode{}
	return &this
}

// NewDatabaseVersionModeWithDefaults instantiates a new DatabaseVersionMode object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDatabaseVersionModeWithDefaults() *DatabaseVersionMode {
	this := DatabaseVersionMode{}
	return &this
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *DatabaseVersionMode) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DatabaseVersionMode) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *DatabaseVersionMode) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *DatabaseVersionMode) SetName(v string) {
	o.Name = &v
}

// GetSupportedMode returns the SupportedMode field value if set, zero value otherwise.
func (o *DatabaseVersionMode) GetSupportedMode() DatabaseModeEnum {
	if o == nil || IsNil(o.SupportedMode) {
		var ret DatabaseModeEnum
		return ret
	}
	return *o.SupportedMode
}

// GetSupportedModeOk returns a tuple with the SupportedMode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DatabaseVersionMode) GetSupportedModeOk() (*DatabaseModeEnum, bool) {
	if o == nil || IsNil(o.SupportedMode) {
		return nil, false
	}
	return o.SupportedMode, true
}

// HasSupportedMode returns a boolean if a field has been set.
func (o *DatabaseVersionMode) HasSupportedMode() bool {
	if o != nil && !IsNil(o.SupportedMode) {
		return true
	}

	return false
}

// SetSupportedMode gets a reference to the given DatabaseModeEnum and assigns it to the SupportedMode field.
func (o *DatabaseVersionMode) SetSupportedMode(v DatabaseModeEnum) {
	o.SupportedMode = &v
}

func (o DatabaseVersionMode) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DatabaseVersionMode) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.SupportedMode) {
		toSerialize["supported_mode"] = o.SupportedMode
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *DatabaseVersionMode) UnmarshalJSON(data []byte) (err error) {
	varDatabaseVersionMode := _DatabaseVersionMode{}

	err = json.Unmarshal(data, &varDatabaseVersionMode)

	if err != nil {
		return err
	}

	*o = DatabaseVersionMode(varDatabaseVersionMode)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "name")
		delete(additionalProperties, "supported_mode")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableDatabaseVersionMode struct {
	value *DatabaseVersionMode
	isSet bool
}

func (v NullableDatabaseVersionMode) Get() *DatabaseVersionMode {
	return v.value
}

func (v *NullableDatabaseVersionMode) Set(val *DatabaseVersionMode) {
	v.value = val
	v.isSet = true
}

func (v NullableDatabaseVersionMode) IsSet() bool {
	return v.isSet
}

func (v *NullableDatabaseVersionMode) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDatabaseVersionMode(val *DatabaseVersionMode) *NullableDatabaseVersionMode {
	return &NullableDatabaseVersionMode{value: val, isSet: true}
}

func (v NullableDatabaseVersionMode) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDatabaseVersionMode) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
