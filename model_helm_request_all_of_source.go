/*
Qovery API

- Qovery is the fastest way to deploy your full-stack apps on any Cloud provider. - ℹ️ The API is stable and still in development.

API version: 1.0.3
Contact: support+api+documentation@qovery.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package qovery

import (
	"encoding/json"
)

// checks if the HelmRequestAllOfSource type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &HelmRequestAllOfSource{}

// HelmRequestAllOfSource struct for HelmRequestAllOfSource
type HelmRequestAllOfSource struct {
	GitRepository  NullableHelmGitRepositoryRequest             `json:"git_repository,omitempty"`
	HelmRepository NullableHelmRequestAllOfSourceHelmRepository `json:"helm_repository,omitempty"`
}

// NewHelmRequestAllOfSource instantiates a new HelmRequestAllOfSource object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewHelmRequestAllOfSource() *HelmRequestAllOfSource {
	this := HelmRequestAllOfSource{}
	return &this
}

// NewHelmRequestAllOfSourceWithDefaults instantiates a new HelmRequestAllOfSource object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewHelmRequestAllOfSourceWithDefaults() *HelmRequestAllOfSource {
	this := HelmRequestAllOfSource{}
	return &this
}

// GetGitRepository returns the GitRepository field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *HelmRequestAllOfSource) GetGitRepository() HelmGitRepositoryRequest {
	if o == nil || IsNil(o.GitRepository.Get()) {
		var ret HelmGitRepositoryRequest
		return ret
	}
	return *o.GitRepository.Get()
}

// GetGitRepositoryOk returns a tuple with the GitRepository field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *HelmRequestAllOfSource) GetGitRepositoryOk() (*HelmGitRepositoryRequest, bool) {
	if o == nil {
		return nil, false
	}
	return o.GitRepository.Get(), o.GitRepository.IsSet()
}

// HasGitRepository returns a boolean if a field has been set.
func (o *HelmRequestAllOfSource) HasGitRepository() bool {
	if o != nil && o.GitRepository.IsSet() {
		return true
	}

	return false
}

// SetGitRepository gets a reference to the given NullableHelmGitRepositoryRequest and assigns it to the GitRepository field.
func (o *HelmRequestAllOfSource) SetGitRepository(v HelmGitRepositoryRequest) {
	o.GitRepository.Set(&v)
}

// SetGitRepositoryNil sets the value for GitRepository to be an explicit nil
func (o *HelmRequestAllOfSource) SetGitRepositoryNil() {
	o.GitRepository.Set(nil)
}

// UnsetGitRepository ensures that no value is present for GitRepository, not even an explicit nil
func (o *HelmRequestAllOfSource) UnsetGitRepository() {
	o.GitRepository.Unset()
}

// GetHelmRepository returns the HelmRepository field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *HelmRequestAllOfSource) GetHelmRepository() HelmRequestAllOfSourceHelmRepository {
	if o == nil || IsNil(o.HelmRepository.Get()) {
		var ret HelmRequestAllOfSourceHelmRepository
		return ret
	}
	return *o.HelmRepository.Get()
}

// GetHelmRepositoryOk returns a tuple with the HelmRepository field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *HelmRequestAllOfSource) GetHelmRepositoryOk() (*HelmRequestAllOfSourceHelmRepository, bool) {
	if o == nil {
		return nil, false
	}
	return o.HelmRepository.Get(), o.HelmRepository.IsSet()
}

// HasHelmRepository returns a boolean if a field has been set.
func (o *HelmRequestAllOfSource) HasHelmRepository() bool {
	if o != nil && o.HelmRepository.IsSet() {
		return true
	}

	return false
}

// SetHelmRepository gets a reference to the given NullableHelmRequestAllOfSourceHelmRepository and assigns it to the HelmRepository field.
func (o *HelmRequestAllOfSource) SetHelmRepository(v HelmRequestAllOfSourceHelmRepository) {
	o.HelmRepository.Set(&v)
}

// SetHelmRepositoryNil sets the value for HelmRepository to be an explicit nil
func (o *HelmRequestAllOfSource) SetHelmRepositoryNil() {
	o.HelmRepository.Set(nil)
}

// UnsetHelmRepository ensures that no value is present for HelmRepository, not even an explicit nil
func (o *HelmRequestAllOfSource) UnsetHelmRepository() {
	o.HelmRepository.Unset()
}

func (o HelmRequestAllOfSource) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o HelmRequestAllOfSource) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.GitRepository.IsSet() {
		toSerialize["git_repository"] = o.GitRepository.Get()
	}
	if o.HelmRepository.IsSet() {
		toSerialize["helm_repository"] = o.HelmRepository.Get()
	}
	return toSerialize, nil
}

type NullableHelmRequestAllOfSource struct {
	value *HelmRequestAllOfSource
	isSet bool
}

func (v NullableHelmRequestAllOfSource) Get() *HelmRequestAllOfSource {
	return v.value
}

func (v *NullableHelmRequestAllOfSource) Set(val *HelmRequestAllOfSource) {
	v.value = val
	v.isSet = true
}

func (v NullableHelmRequestAllOfSource) IsSet() bool {
	return v.isSet
}

func (v *NullableHelmRequestAllOfSource) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableHelmRequestAllOfSource(val *HelmRequestAllOfSource) *NullableHelmRequestAllOfSource {
	return &NullableHelmRequestAllOfSource{value: val, isSet: true}
}

func (v NullableHelmRequestAllOfSource) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableHelmRequestAllOfSource) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
