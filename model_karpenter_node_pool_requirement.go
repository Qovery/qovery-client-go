/*
Qovery API

- Qovery is the fastest way to deploy your full-stack apps on any Cloud provider. - ℹ️ The API is stable and still in development.

API version: 1.0.3
Contact: support+api+documentation@qovery.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package qovery

import (
	"encoding/json"
	"fmt"
)

// checks if the KarpenterNodePoolRequirement type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &KarpenterNodePoolRequirement{}

// KarpenterNodePoolRequirement struct for KarpenterNodePoolRequirement
type KarpenterNodePoolRequirement struct {
	Key                  KarpenterNodePoolRequirementKey      `json:"key"`
	Operator             KarpenterNodePoolRequirementOperator `json:"operator"`
	Values               []string                             `json:"values"`
	AdditionalProperties map[string]interface{}
}

type _KarpenterNodePoolRequirement KarpenterNodePoolRequirement

// NewKarpenterNodePoolRequirement instantiates a new KarpenterNodePoolRequirement object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewKarpenterNodePoolRequirement(key KarpenterNodePoolRequirementKey, operator KarpenterNodePoolRequirementOperator, values []string) *KarpenterNodePoolRequirement {
	this := KarpenterNodePoolRequirement{}
	this.Key = key
	this.Operator = operator
	this.Values = values
	return &this
}

// NewKarpenterNodePoolRequirementWithDefaults instantiates a new KarpenterNodePoolRequirement object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewKarpenterNodePoolRequirementWithDefaults() *KarpenterNodePoolRequirement {
	this := KarpenterNodePoolRequirement{}
	return &this
}

// GetKey returns the Key field value
func (o *KarpenterNodePoolRequirement) GetKey() KarpenterNodePoolRequirementKey {
	if o == nil {
		var ret KarpenterNodePoolRequirementKey
		return ret
	}

	return o.Key
}

// GetKeyOk returns a tuple with the Key field value
// and a boolean to check if the value has been set.
func (o *KarpenterNodePoolRequirement) GetKeyOk() (*KarpenterNodePoolRequirementKey, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Key, true
}

// SetKey sets field value
func (o *KarpenterNodePoolRequirement) SetKey(v KarpenterNodePoolRequirementKey) {
	o.Key = v
}

// GetOperator returns the Operator field value
func (o *KarpenterNodePoolRequirement) GetOperator() KarpenterNodePoolRequirementOperator {
	if o == nil {
		var ret KarpenterNodePoolRequirementOperator
		return ret
	}

	return o.Operator
}

// GetOperatorOk returns a tuple with the Operator field value
// and a boolean to check if the value has been set.
func (o *KarpenterNodePoolRequirement) GetOperatorOk() (*KarpenterNodePoolRequirementOperator, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Operator, true
}

// SetOperator sets field value
func (o *KarpenterNodePoolRequirement) SetOperator(v KarpenterNodePoolRequirementOperator) {
	o.Operator = v
}

// GetValues returns the Values field value
func (o *KarpenterNodePoolRequirement) GetValues() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.Values
}

// GetValuesOk returns a tuple with the Values field value
// and a boolean to check if the value has been set.
func (o *KarpenterNodePoolRequirement) GetValuesOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Values, true
}

// SetValues sets field value
func (o *KarpenterNodePoolRequirement) SetValues(v []string) {
	o.Values = v
}

func (o KarpenterNodePoolRequirement) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o KarpenterNodePoolRequirement) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["key"] = o.Key
	toSerialize["operator"] = o.Operator
	toSerialize["values"] = o.Values

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *KarpenterNodePoolRequirement) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"key",
		"operator",
		"values",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varKarpenterNodePoolRequirement := _KarpenterNodePoolRequirement{}

	err = json.Unmarshal(data, &varKarpenterNodePoolRequirement)

	if err != nil {
		return err
	}

	*o = KarpenterNodePoolRequirement(varKarpenterNodePoolRequirement)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "key")
		delete(additionalProperties, "operator")
		delete(additionalProperties, "values")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableKarpenterNodePoolRequirement struct {
	value *KarpenterNodePoolRequirement
	isSet bool
}

func (v NullableKarpenterNodePoolRequirement) Get() *KarpenterNodePoolRequirement {
	return v.value
}

func (v *NullableKarpenterNodePoolRequirement) Set(val *KarpenterNodePoolRequirement) {
	v.value = val
	v.isSet = true
}

func (v NullableKarpenterNodePoolRequirement) IsSet() bool {
	return v.isSet
}

func (v *NullableKarpenterNodePoolRequirement) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableKarpenterNodePoolRequirement(val *KarpenterNodePoolRequirement) *NullableKarpenterNodePoolRequirement {
	return &NullableKarpenterNodePoolRequirement{value: val, isSet: true}
}

func (v NullableKarpenterNodePoolRequirement) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableKarpenterNodePoolRequirement) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
