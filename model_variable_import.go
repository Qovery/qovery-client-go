/*
Qovery API

- Qovery is the fastest way to deploy your full-stack apps on any Cloud provider. - ℹ️ The API is stable and still in development.

API version: 1.0.3
Contact: support+api+documentation@qovery.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package qovery

import (
	"encoding/json"
)

// checks if the VariableImport type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &VariableImport{}

// VariableImport struct for VariableImport
type VariableImport struct {
	TotalVariablesToImport      float32                                          `json:"total_variables_to_import"`
	SuccessfulImportedVariables []VariableImportSuccessfulImportedVariablesInner `json:"successful_imported_variables"`
}

// NewVariableImport instantiates a new VariableImport object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVariableImport(totalVariablesToImport float32, successfulImportedVariables []VariableImportSuccessfulImportedVariablesInner) *VariableImport {
	this := VariableImport{}
	this.TotalVariablesToImport = totalVariablesToImport
	this.SuccessfulImportedVariables = successfulImportedVariables
	return &this
}

// NewVariableImportWithDefaults instantiates a new VariableImport object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVariableImportWithDefaults() *VariableImport {
	this := VariableImport{}
	return &this
}

// GetTotalVariablesToImport returns the TotalVariablesToImport field value
func (o *VariableImport) GetTotalVariablesToImport() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.TotalVariablesToImport
}

// GetTotalVariablesToImportOk returns a tuple with the TotalVariablesToImport field value
// and a boolean to check if the value has been set.
func (o *VariableImport) GetTotalVariablesToImportOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TotalVariablesToImport, true
}

// SetTotalVariablesToImport sets field value
func (o *VariableImport) SetTotalVariablesToImport(v float32) {
	o.TotalVariablesToImport = v
}

// GetSuccessfulImportedVariables returns the SuccessfulImportedVariables field value
func (o *VariableImport) GetSuccessfulImportedVariables() []VariableImportSuccessfulImportedVariablesInner {
	if o == nil {
		var ret []VariableImportSuccessfulImportedVariablesInner
		return ret
	}

	return o.SuccessfulImportedVariables
}

// GetSuccessfulImportedVariablesOk returns a tuple with the SuccessfulImportedVariables field value
// and a boolean to check if the value has been set.
func (o *VariableImport) GetSuccessfulImportedVariablesOk() ([]VariableImportSuccessfulImportedVariablesInner, bool) {
	if o == nil {
		return nil, false
	}
	return o.SuccessfulImportedVariables, true
}

// SetSuccessfulImportedVariables sets field value
func (o *VariableImport) SetSuccessfulImportedVariables(v []VariableImportSuccessfulImportedVariablesInner) {
	o.SuccessfulImportedVariables = v
}

func (o VariableImport) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o VariableImport) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["total_variables_to_import"] = o.TotalVariablesToImport
	toSerialize["successful_imported_variables"] = o.SuccessfulImportedVariables
	return toSerialize, nil
}

type NullableVariableImport struct {
	value *VariableImport
	isSet bool
}

func (v NullableVariableImport) Get() *VariableImport {
	return v.value
}

func (v *NullableVariableImport) Set(val *VariableImport) {
	v.value = val
	v.isSet = true
}

func (v NullableVariableImport) IsSet() bool {
	return v.isSet
}

func (v *NullableVariableImport) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVariableImport(val *VariableImport) *NullableVariableImport {
	return &NullableVariableImport{value: val, isSet: true}
}

func (v NullableVariableImport) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVariableImport) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
