/*
Qovery API

- Qovery is the fastest way to deploy your full-stack apps on any Cloud provider. - ℹ️ The API is stable and still in development.

API version: 1.0.3
Contact: support+api+documentation@qovery.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package qovery

import (
	"encoding/json"
	"fmt"
)

// OrganizationEventOrigin Origin of the organization event
type OrganizationEventOrigin string

// List of OrganizationEventOrigin
const (
	ORGANIZATIONEVENTORIGIN_API                OrganizationEventOrigin = "API"
	ORGANIZATIONEVENTORIGIN_CLI                OrganizationEventOrigin = "CLI"
	ORGANIZATIONEVENTORIGIN_CONSOLE            OrganizationEventOrigin = "CONSOLE"
	ORGANIZATIONEVENTORIGIN_GIT                OrganizationEventOrigin = "GIT"
	ORGANIZATIONEVENTORIGIN_TERRAFORM_PROVIDER OrganizationEventOrigin = "TERRAFORM_PROVIDER"
)

// All allowed values of OrganizationEventOrigin enum
var AllowedOrganizationEventOriginEnumValues = []OrganizationEventOrigin{
	"API",
	"CLI",
	"CONSOLE",
	"GIT",
	"TERRAFORM_PROVIDER",
}

func (v *OrganizationEventOrigin) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := OrganizationEventOrigin(value)
	for _, existing := range AllowedOrganizationEventOriginEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid OrganizationEventOrigin", value)
}

// NewOrganizationEventOriginFromValue returns a pointer to a valid OrganizationEventOrigin
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewOrganizationEventOriginFromValue(v string) (*OrganizationEventOrigin, error) {
	ev := OrganizationEventOrigin(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for OrganizationEventOrigin: valid values are %v", v, AllowedOrganizationEventOriginEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v OrganizationEventOrigin) IsValid() bool {
	for _, existing := range AllowedOrganizationEventOriginEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to OrganizationEventOrigin value
func (v OrganizationEventOrigin) Ptr() *OrganizationEventOrigin {
	return &v
}

type NullableOrganizationEventOrigin struct {
	value *OrganizationEventOrigin
	isSet bool
}

func (v NullableOrganizationEventOrigin) Get() *OrganizationEventOrigin {
	return v.value
}

func (v *NullableOrganizationEventOrigin) Set(val *OrganizationEventOrigin) {
	v.value = val
	v.isSet = true
}

func (v NullableOrganizationEventOrigin) IsSet() bool {
	return v.isSet
}

func (v *NullableOrganizationEventOrigin) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOrganizationEventOrigin(val *OrganizationEventOrigin) *NullableOrganizationEventOrigin {
	return &NullableOrganizationEventOrigin{value: val, isSet: true}
}

func (v NullableOrganizationEventOrigin) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOrganizationEventOrigin) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
