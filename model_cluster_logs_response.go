/*
Qovery API

- Qovery is the fastest way to deploy your full-stack apps on any Cloud provider. - ℹ️ The API is stable and still in development.

API version: 1.0.4
Contact: support+api+documentation@qovery.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package qovery

import (
	"encoding/json"
)

// checks if the ClusterLogsResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ClusterLogsResponse{}

// ClusterLogsResponse struct for ClusterLogsResponse
type ClusterLogsResponse struct {
	Response             *string `json:"response,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _ClusterLogsResponse ClusterLogsResponse

// NewClusterLogsResponse instantiates a new ClusterLogsResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewClusterLogsResponse() *ClusterLogsResponse {
	this := ClusterLogsResponse{}
	return &this
}

// NewClusterLogsResponseWithDefaults instantiates a new ClusterLogsResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewClusterLogsResponseWithDefaults() *ClusterLogsResponse {
	this := ClusterLogsResponse{}
	return &this
}

// GetResponse returns the Response field value if set, zero value otherwise.
func (o *ClusterLogsResponse) GetResponse() string {
	if o == nil || IsNil(o.Response) {
		var ret string
		return ret
	}
	return *o.Response
}

// GetResponseOk returns a tuple with the Response field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ClusterLogsResponse) GetResponseOk() (*string, bool) {
	if o == nil || IsNil(o.Response) {
		return nil, false
	}
	return o.Response, true
}

// HasResponse returns a boolean if a field has been set.
func (o *ClusterLogsResponse) HasResponse() bool {
	if o != nil && !IsNil(o.Response) {
		return true
	}

	return false
}

// SetResponse gets a reference to the given string and assigns it to the Response field.
func (o *ClusterLogsResponse) SetResponse(v string) {
	o.Response = &v
}

func (o ClusterLogsResponse) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ClusterLogsResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Response) {
		toSerialize["response"] = o.Response
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *ClusterLogsResponse) UnmarshalJSON(data []byte) (err error) {
	varClusterLogsResponse := _ClusterLogsResponse{}

	err = json.Unmarshal(data, &varClusterLogsResponse)

	if err != nil {
		return err
	}

	*o = ClusterLogsResponse(varClusterLogsResponse)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "response")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableClusterLogsResponse struct {
	value *ClusterLogsResponse
	isSet bool
}

func (v NullableClusterLogsResponse) Get() *ClusterLogsResponse {
	return v.value
}

func (v *NullableClusterLogsResponse) Set(val *ClusterLogsResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableClusterLogsResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableClusterLogsResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableClusterLogsResponse(val *ClusterLogsResponse) *NullableClusterLogsResponse {
	return &NullableClusterLogsResponse{value: val, isSet: true}
}

func (v NullableClusterLogsResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableClusterLogsResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
