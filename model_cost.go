/*
Qovery API

- Qovery is the fastest way to deploy your full-stack apps on any Cloud provider. - ℹ️ The API is stable and still in development.

API version: 1.0.3
Contact: support+api+documentation@qovery.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package qovery

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the Cost type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Cost{}

// Cost struct for Cost
type Cost struct {
	TotalInCents int32   `json:"total_in_cents"`
	Total        float32 `json:"total"`
	CurrencyCode string  `json:"currency_code"`
}

type _Cost Cost

// NewCost instantiates a new Cost object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCost(totalInCents int32, total float32, currencyCode string) *Cost {
	this := Cost{}
	this.TotalInCents = totalInCents
	this.Total = total
	this.CurrencyCode = currencyCode
	return &this
}

// NewCostWithDefaults instantiates a new Cost object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCostWithDefaults() *Cost {
	this := Cost{}
	return &this
}

// GetTotalInCents returns the TotalInCents field value
func (o *Cost) GetTotalInCents() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.TotalInCents
}

// GetTotalInCentsOk returns a tuple with the TotalInCents field value
// and a boolean to check if the value has been set.
func (o *Cost) GetTotalInCentsOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TotalInCents, true
}

// SetTotalInCents sets field value
func (o *Cost) SetTotalInCents(v int32) {
	o.TotalInCents = v
}

// GetTotal returns the Total field value
func (o *Cost) GetTotal() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.Total
}

// GetTotalOk returns a tuple with the Total field value
// and a boolean to check if the value has been set.
func (o *Cost) GetTotalOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Total, true
}

// SetTotal sets field value
func (o *Cost) SetTotal(v float32) {
	o.Total = v
}

// GetCurrencyCode returns the CurrencyCode field value
func (o *Cost) GetCurrencyCode() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.CurrencyCode
}

// GetCurrencyCodeOk returns a tuple with the CurrencyCode field value
// and a boolean to check if the value has been set.
func (o *Cost) GetCurrencyCodeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CurrencyCode, true
}

// SetCurrencyCode sets field value
func (o *Cost) SetCurrencyCode(v string) {
	o.CurrencyCode = v
}

func (o Cost) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Cost) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["total_in_cents"] = o.TotalInCents
	toSerialize["total"] = o.Total
	toSerialize["currency_code"] = o.CurrencyCode
	return toSerialize, nil
}

func (o *Cost) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"total_in_cents",
		"total",
		"currency_code",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCost := _Cost{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varCost)

	if err != nil {
		return err
	}

	*o = Cost(varCost)

	return err
}

type NullableCost struct {
	value *Cost
	isSet bool
}

func (v NullableCost) Get() *Cost {
	return v.value
}

func (v *NullableCost) Set(val *Cost) {
	v.value = val
	v.isSet = true
}

func (v NullableCost) IsSet() bool {
	return v.isSet
}

func (v *NullableCost) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCost(val *Cost) *NullableCost {
	return &NullableCost{value: val, isSet: true}
}

func (v NullableCost) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCost) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
