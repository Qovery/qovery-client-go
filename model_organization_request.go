/*
Qovery API

- Qovery is the fastest way to deploy your full-stack apps on any Cloud provider. - ℹ️ The API is stable and still in development.

API version: 1.0.3
Contact: support+api+documentation@qovery.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package qovery

import (
	"encoding/json"
	"fmt"
)

// checks if the OrganizationRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &OrganizationRequest{}

// OrganizationRequest struct for OrganizationRequest
type OrganizationRequest struct {
	// name is case insensitive
	Name                 string   `json:"name"`
	Description          *string  `json:"description,omitempty"`
	Plan                 PlanEnum `json:"plan"`
	WebsiteUrl           *string  `json:"website_url,omitempty"`
	Repository           *string  `json:"repository,omitempty"`
	LogoUrl              *string  `json:"logo_url,omitempty"`
	IconUrl              *string  `json:"icon_url,omitempty"`
	AdminEmails          []string `json:"admin_emails,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _OrganizationRequest OrganizationRequest

// NewOrganizationRequest instantiates a new OrganizationRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewOrganizationRequest(name string, plan PlanEnum) *OrganizationRequest {
	this := OrganizationRequest{}
	this.Name = name
	this.Plan = plan
	return &this
}

// NewOrganizationRequestWithDefaults instantiates a new OrganizationRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewOrganizationRequestWithDefaults() *OrganizationRequest {
	this := OrganizationRequest{}
	return &this
}

// GetName returns the Name field value
func (o *OrganizationRequest) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *OrganizationRequest) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *OrganizationRequest) SetName(v string) {
	o.Name = v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *OrganizationRequest) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrganizationRequest) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *OrganizationRequest) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *OrganizationRequest) SetDescription(v string) {
	o.Description = &v
}

// GetPlan returns the Plan field value
func (o *OrganizationRequest) GetPlan() PlanEnum {
	if o == nil {
		var ret PlanEnum
		return ret
	}

	return o.Plan
}

// GetPlanOk returns a tuple with the Plan field value
// and a boolean to check if the value has been set.
func (o *OrganizationRequest) GetPlanOk() (*PlanEnum, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Plan, true
}

// SetPlan sets field value
func (o *OrganizationRequest) SetPlan(v PlanEnum) {
	o.Plan = v
}

// GetWebsiteUrl returns the WebsiteUrl field value if set, zero value otherwise.
func (o *OrganizationRequest) GetWebsiteUrl() string {
	if o == nil || IsNil(o.WebsiteUrl) {
		var ret string
		return ret
	}
	return *o.WebsiteUrl
}

// GetWebsiteUrlOk returns a tuple with the WebsiteUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrganizationRequest) GetWebsiteUrlOk() (*string, bool) {
	if o == nil || IsNil(o.WebsiteUrl) {
		return nil, false
	}
	return o.WebsiteUrl, true
}

// HasWebsiteUrl returns a boolean if a field has been set.
func (o *OrganizationRequest) HasWebsiteUrl() bool {
	if o != nil && !IsNil(o.WebsiteUrl) {
		return true
	}

	return false
}

// SetWebsiteUrl gets a reference to the given string and assigns it to the WebsiteUrl field.
func (o *OrganizationRequest) SetWebsiteUrl(v string) {
	o.WebsiteUrl = &v
}

// GetRepository returns the Repository field value if set, zero value otherwise.
func (o *OrganizationRequest) GetRepository() string {
	if o == nil || IsNil(o.Repository) {
		var ret string
		return ret
	}
	return *o.Repository
}

// GetRepositoryOk returns a tuple with the Repository field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrganizationRequest) GetRepositoryOk() (*string, bool) {
	if o == nil || IsNil(o.Repository) {
		return nil, false
	}
	return o.Repository, true
}

// HasRepository returns a boolean if a field has been set.
func (o *OrganizationRequest) HasRepository() bool {
	if o != nil && !IsNil(o.Repository) {
		return true
	}

	return false
}

// SetRepository gets a reference to the given string and assigns it to the Repository field.
func (o *OrganizationRequest) SetRepository(v string) {
	o.Repository = &v
}

// GetLogoUrl returns the LogoUrl field value if set, zero value otherwise.
func (o *OrganizationRequest) GetLogoUrl() string {
	if o == nil || IsNil(o.LogoUrl) {
		var ret string
		return ret
	}
	return *o.LogoUrl
}

// GetLogoUrlOk returns a tuple with the LogoUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrganizationRequest) GetLogoUrlOk() (*string, bool) {
	if o == nil || IsNil(o.LogoUrl) {
		return nil, false
	}
	return o.LogoUrl, true
}

// HasLogoUrl returns a boolean if a field has been set.
func (o *OrganizationRequest) HasLogoUrl() bool {
	if o != nil && !IsNil(o.LogoUrl) {
		return true
	}

	return false
}

// SetLogoUrl gets a reference to the given string and assigns it to the LogoUrl field.
func (o *OrganizationRequest) SetLogoUrl(v string) {
	o.LogoUrl = &v
}

// GetIconUrl returns the IconUrl field value if set, zero value otherwise.
func (o *OrganizationRequest) GetIconUrl() string {
	if o == nil || IsNil(o.IconUrl) {
		var ret string
		return ret
	}
	return *o.IconUrl
}

// GetIconUrlOk returns a tuple with the IconUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrganizationRequest) GetIconUrlOk() (*string, bool) {
	if o == nil || IsNil(o.IconUrl) {
		return nil, false
	}
	return o.IconUrl, true
}

// HasIconUrl returns a boolean if a field has been set.
func (o *OrganizationRequest) HasIconUrl() bool {
	if o != nil && !IsNil(o.IconUrl) {
		return true
	}

	return false
}

// SetIconUrl gets a reference to the given string and assigns it to the IconUrl field.
func (o *OrganizationRequest) SetIconUrl(v string) {
	o.IconUrl = &v
}

// GetAdminEmails returns the AdminEmails field value if set, zero value otherwise.
func (o *OrganizationRequest) GetAdminEmails() []string {
	if o == nil || IsNil(o.AdminEmails) {
		var ret []string
		return ret
	}
	return o.AdminEmails
}

// GetAdminEmailsOk returns a tuple with the AdminEmails field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrganizationRequest) GetAdminEmailsOk() ([]string, bool) {
	if o == nil || IsNil(o.AdminEmails) {
		return nil, false
	}
	return o.AdminEmails, true
}

// HasAdminEmails returns a boolean if a field has been set.
func (o *OrganizationRequest) HasAdminEmails() bool {
	if o != nil && !IsNil(o.AdminEmails) {
		return true
	}

	return false
}

// SetAdminEmails gets a reference to the given []string and assigns it to the AdminEmails field.
func (o *OrganizationRequest) SetAdminEmails(v []string) {
	o.AdminEmails = v
}

func (o OrganizationRequest) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o OrganizationRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["name"] = o.Name
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	toSerialize["plan"] = o.Plan
	if !IsNil(o.WebsiteUrl) {
		toSerialize["website_url"] = o.WebsiteUrl
	}
	if !IsNil(o.Repository) {
		toSerialize["repository"] = o.Repository
	}
	if !IsNil(o.LogoUrl) {
		toSerialize["logo_url"] = o.LogoUrl
	}
	if !IsNil(o.IconUrl) {
		toSerialize["icon_url"] = o.IconUrl
	}
	if !IsNil(o.AdminEmails) {
		toSerialize["admin_emails"] = o.AdminEmails
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *OrganizationRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"name",
		"plan",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varOrganizationRequest := _OrganizationRequest{}

	err = json.Unmarshal(data, &varOrganizationRequest)

	if err != nil {
		return err
	}

	*o = OrganizationRequest(varOrganizationRequest)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "name")
		delete(additionalProperties, "description")
		delete(additionalProperties, "plan")
		delete(additionalProperties, "website_url")
		delete(additionalProperties, "repository")
		delete(additionalProperties, "logo_url")
		delete(additionalProperties, "icon_url")
		delete(additionalProperties, "admin_emails")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableOrganizationRequest struct {
	value *OrganizationRequest
	isSet bool
}

func (v NullableOrganizationRequest) Get() *OrganizationRequest {
	return v.value
}

func (v *NullableOrganizationRequest) Set(val *OrganizationRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableOrganizationRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableOrganizationRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOrganizationRequest(val *OrganizationRequest) *NullableOrganizationRequest {
	return &NullableOrganizationRequest{value: val, isSet: true}
}

func (v NullableOrganizationRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOrganizationRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
