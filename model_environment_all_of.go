/*
Qovery API

- Qovery is the fastest way to deploy your full-stack apps on any Cloud provider. - ℹ️ The API is stable and still in development.

API version: 1.0.3
Contact: support+api+documentation@qovery.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package qovery

import (
	"encoding/json"
)

// EnvironmentAllOf struct for EnvironmentAllOf
type EnvironmentAllOf struct {
	// name is case insensitive
	Name    string           `json:"name"`
	Project *ReferenceObject `json:"project,omitempty"`
	// uuid of the user that made the last update
	LastUpdatedBy *string                       `json:"last_updated_by,omitempty"`
	CloudProvider EnvironmentAllOfCloudProvider `json:"cloud_provider"`
	Mode          EnvironmentModeEnum           `json:"mode"`
	ClusterId     string                        `json:"cluster_id"`
	ClusterName   *string                       `json:"cluster_name,omitempty"`
}

// NewEnvironmentAllOf instantiates a new EnvironmentAllOf object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEnvironmentAllOf(name string, cloudProvider EnvironmentAllOfCloudProvider, mode EnvironmentModeEnum, clusterId string) *EnvironmentAllOf {
	this := EnvironmentAllOf{}
	this.Name = name
	this.CloudProvider = cloudProvider
	this.Mode = mode
	this.ClusterId = clusterId
	return &this
}

// NewEnvironmentAllOfWithDefaults instantiates a new EnvironmentAllOf object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEnvironmentAllOfWithDefaults() *EnvironmentAllOf {
	this := EnvironmentAllOf{}
	return &this
}

// GetName returns the Name field value
func (o *EnvironmentAllOf) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *EnvironmentAllOf) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *EnvironmentAllOf) SetName(v string) {
	o.Name = v
}

// GetProject returns the Project field value if set, zero value otherwise.
func (o *EnvironmentAllOf) GetProject() ReferenceObject {
	if o == nil || o.Project == nil {
		var ret ReferenceObject
		return ret
	}
	return *o.Project
}

// GetProjectOk returns a tuple with the Project field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EnvironmentAllOf) GetProjectOk() (*ReferenceObject, bool) {
	if o == nil || o.Project == nil {
		return nil, false
	}
	return o.Project, true
}

// HasProject returns a boolean if a field has been set.
func (o *EnvironmentAllOf) HasProject() bool {
	if o != nil && o.Project != nil {
		return true
	}

	return false
}

// SetProject gets a reference to the given ReferenceObject and assigns it to the Project field.
func (o *EnvironmentAllOf) SetProject(v ReferenceObject) {
	o.Project = &v
}

// GetLastUpdatedBy returns the LastUpdatedBy field value if set, zero value otherwise.
func (o *EnvironmentAllOf) GetLastUpdatedBy() string {
	if o == nil || o.LastUpdatedBy == nil {
		var ret string
		return ret
	}
	return *o.LastUpdatedBy
}

// GetLastUpdatedByOk returns a tuple with the LastUpdatedBy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EnvironmentAllOf) GetLastUpdatedByOk() (*string, bool) {
	if o == nil || o.LastUpdatedBy == nil {
		return nil, false
	}
	return o.LastUpdatedBy, true
}

// HasLastUpdatedBy returns a boolean if a field has been set.
func (o *EnvironmentAllOf) HasLastUpdatedBy() bool {
	if o != nil && o.LastUpdatedBy != nil {
		return true
	}

	return false
}

// SetLastUpdatedBy gets a reference to the given string and assigns it to the LastUpdatedBy field.
func (o *EnvironmentAllOf) SetLastUpdatedBy(v string) {
	o.LastUpdatedBy = &v
}

// GetCloudProvider returns the CloudProvider field value
func (o *EnvironmentAllOf) GetCloudProvider() EnvironmentAllOfCloudProvider {
	if o == nil {
		var ret EnvironmentAllOfCloudProvider
		return ret
	}

	return o.CloudProvider
}

// GetCloudProviderOk returns a tuple with the CloudProvider field value
// and a boolean to check if the value has been set.
func (o *EnvironmentAllOf) GetCloudProviderOk() (*EnvironmentAllOfCloudProvider, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CloudProvider, true
}

// SetCloudProvider sets field value
func (o *EnvironmentAllOf) SetCloudProvider(v EnvironmentAllOfCloudProvider) {
	o.CloudProvider = v
}

// GetMode returns the Mode field value
func (o *EnvironmentAllOf) GetMode() EnvironmentModeEnum {
	if o == nil {
		var ret EnvironmentModeEnum
		return ret
	}

	return o.Mode
}

// GetModeOk returns a tuple with the Mode field value
// and a boolean to check if the value has been set.
func (o *EnvironmentAllOf) GetModeOk() (*EnvironmentModeEnum, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Mode, true
}

// SetMode sets field value
func (o *EnvironmentAllOf) SetMode(v EnvironmentModeEnum) {
	o.Mode = v
}

// GetClusterId returns the ClusterId field value
func (o *EnvironmentAllOf) GetClusterId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ClusterId
}

// GetClusterIdOk returns a tuple with the ClusterId field value
// and a boolean to check if the value has been set.
func (o *EnvironmentAllOf) GetClusterIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ClusterId, true
}

// SetClusterId sets field value
func (o *EnvironmentAllOf) SetClusterId(v string) {
	o.ClusterId = v
}

// GetClusterName returns the ClusterName field value if set, zero value otherwise.
func (o *EnvironmentAllOf) GetClusterName() string {
	if o == nil || o.ClusterName == nil {
		var ret string
		return ret
	}
	return *o.ClusterName
}

// GetClusterNameOk returns a tuple with the ClusterName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EnvironmentAllOf) GetClusterNameOk() (*string, bool) {
	if o == nil || o.ClusterName == nil {
		return nil, false
	}
	return o.ClusterName, true
}

// HasClusterName returns a boolean if a field has been set.
func (o *EnvironmentAllOf) HasClusterName() bool {
	if o != nil && o.ClusterName != nil {
		return true
	}

	return false
}

// SetClusterName gets a reference to the given string and assigns it to the ClusterName field.
func (o *EnvironmentAllOf) SetClusterName(v string) {
	o.ClusterName = &v
}

func (o EnvironmentAllOf) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["name"] = o.Name
	}
	if o.Project != nil {
		toSerialize["project"] = o.Project
	}
	if o.LastUpdatedBy != nil {
		toSerialize["last_updated_by"] = o.LastUpdatedBy
	}
	if true {
		toSerialize["cloud_provider"] = o.CloudProvider
	}
	if true {
		toSerialize["mode"] = o.Mode
	}
	if true {
		toSerialize["cluster_id"] = o.ClusterId
	}
	if o.ClusterName != nil {
		toSerialize["cluster_name"] = o.ClusterName
	}
	return json.Marshal(toSerialize)
}

type NullableEnvironmentAllOf struct {
	value *EnvironmentAllOf
	isSet bool
}

func (v NullableEnvironmentAllOf) Get() *EnvironmentAllOf {
	return v.value
}

func (v *NullableEnvironmentAllOf) Set(val *EnvironmentAllOf) {
	v.value = val
	v.isSet = true
}

func (v NullableEnvironmentAllOf) IsSet() bool {
	return v.isSet
}

func (v *NullableEnvironmentAllOf) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEnvironmentAllOf(val *EnvironmentAllOf) *NullableEnvironmentAllOf {
	return &NullableEnvironmentAllOf{value: val, isSet: true}
}

func (v NullableEnvironmentAllOf) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEnvironmentAllOf) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
