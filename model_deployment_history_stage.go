/*
Qovery API

- Qovery is the fastest way to deploy your full-stack apps on any Cloud provider. - ℹ️ The API is stable and still in development.

API version: 1.0.4
Contact: support+api+documentation@qovery.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package qovery

import (
	"encoding/json"
	"fmt"
)

// checks if the DeploymentHistoryStage type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DeploymentHistoryStage{}

// DeploymentHistoryStage struct for DeploymentHistoryStage
type DeploymentHistoryStage struct {
	Name                 string                     `json:"name"`
	Status               StageStatusEnum            `json:"status"`
	Duration             string                     `json:"duration"`
	Services             []DeploymentHistoryService `json:"services"`
	AdditionalProperties map[string]interface{}
}

type _DeploymentHistoryStage DeploymentHistoryStage

// NewDeploymentHistoryStage instantiates a new DeploymentHistoryStage object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDeploymentHistoryStage(name string, status StageStatusEnum, duration string, services []DeploymentHistoryService) *DeploymentHistoryStage {
	this := DeploymentHistoryStage{}
	this.Name = name
	this.Status = status
	this.Duration = duration
	this.Services = services
	return &this
}

// NewDeploymentHistoryStageWithDefaults instantiates a new DeploymentHistoryStage object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDeploymentHistoryStageWithDefaults() *DeploymentHistoryStage {
	this := DeploymentHistoryStage{}
	return &this
}

// GetName returns the Name field value
func (o *DeploymentHistoryStage) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *DeploymentHistoryStage) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *DeploymentHistoryStage) SetName(v string) {
	o.Name = v
}

// GetStatus returns the Status field value
func (o *DeploymentHistoryStage) GetStatus() StageStatusEnum {
	if o == nil {
		var ret StageStatusEnum
		return ret
	}

	return o.Status
}

// GetStatusOk returns a tuple with the Status field value
// and a boolean to check if the value has been set.
func (o *DeploymentHistoryStage) GetStatusOk() (*StageStatusEnum, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Status, true
}

// SetStatus sets field value
func (o *DeploymentHistoryStage) SetStatus(v StageStatusEnum) {
	o.Status = v
}

// GetDuration returns the Duration field value
func (o *DeploymentHistoryStage) GetDuration() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Duration
}

// GetDurationOk returns a tuple with the Duration field value
// and a boolean to check if the value has been set.
func (o *DeploymentHistoryStage) GetDurationOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Duration, true
}

// SetDuration sets field value
func (o *DeploymentHistoryStage) SetDuration(v string) {
	o.Duration = v
}

// GetServices returns the Services field value
func (o *DeploymentHistoryStage) GetServices() []DeploymentHistoryService {
	if o == nil {
		var ret []DeploymentHistoryService
		return ret
	}

	return o.Services
}

// GetServicesOk returns a tuple with the Services field value
// and a boolean to check if the value has been set.
func (o *DeploymentHistoryStage) GetServicesOk() ([]DeploymentHistoryService, bool) {
	if o == nil {
		return nil, false
	}
	return o.Services, true
}

// SetServices sets field value
func (o *DeploymentHistoryStage) SetServices(v []DeploymentHistoryService) {
	o.Services = v
}

func (o DeploymentHistoryStage) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DeploymentHistoryStage) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["name"] = o.Name
	toSerialize["status"] = o.Status
	toSerialize["duration"] = o.Duration
	toSerialize["services"] = o.Services

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *DeploymentHistoryStage) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"name",
		"status",
		"duration",
		"services",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varDeploymentHistoryStage := _DeploymentHistoryStage{}

	err = json.Unmarshal(data, &varDeploymentHistoryStage)

	if err != nil {
		return err
	}

	*o = DeploymentHistoryStage(varDeploymentHistoryStage)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "name")
		delete(additionalProperties, "status")
		delete(additionalProperties, "duration")
		delete(additionalProperties, "services")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableDeploymentHistoryStage struct {
	value *DeploymentHistoryStage
	isSet bool
}

func (v NullableDeploymentHistoryStage) Get() *DeploymentHistoryStage {
	return v.value
}

func (v *NullableDeploymentHistoryStage) Set(val *DeploymentHistoryStage) {
	v.value = val
	v.isSet = true
}

func (v NullableDeploymentHistoryStage) IsSet() bool {
	return v.isSet
}

func (v *NullableDeploymentHistoryStage) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDeploymentHistoryStage(val *DeploymentHistoryStage) *NullableDeploymentHistoryStage {
	return &NullableDeploymentHistoryStage{value: val, isSet: true}
}

func (v NullableDeploymentHistoryStage) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDeploymentHistoryStage) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
