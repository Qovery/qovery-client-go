/*
Qovery API

- Qovery is the fastest way to deploy your full-stack apps on any Cloud provider. - ℹ️ The API is stable and still in development.

API version: 1.0.3
Contact: support+api+documentation@qovery.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package qovery

import (
	"encoding/json"
	"fmt"
)

// ServiceStepMetricNameEnum The name of the deployment step at the service level: - REGISTRY_CREATE_REPOSITORY: The step to create the repository in the registry. - GIT_CLONE: The step to clone the source code repository.  - BUILD: The step to build the source code. - DEPLOYMENT: The step to deploy the service.  - ROUTER_DEPLOYMENT: The step to deploy the router.
type ServiceStepMetricNameEnum string

// List of ServiceStepMetricNameEnum
const (
	SERVICESTEPMETRICNAMEENUM_REGISTRY_CREATE_REPOSITORY ServiceStepMetricNameEnum = "REGISTRY_CREATE_REPOSITORY"
	SERVICESTEPMETRICNAMEENUM_GIT_CLONE                  ServiceStepMetricNameEnum = "GIT_CLONE"
	SERVICESTEPMETRICNAMEENUM_BUILD                      ServiceStepMetricNameEnum = "BUILD"
	SERVICESTEPMETRICNAMEENUM_DEPLOYMENT                 ServiceStepMetricNameEnum = "DEPLOYMENT"
	SERVICESTEPMETRICNAMEENUM_ROUTER_DEPLOYMENT          ServiceStepMetricNameEnum = "ROUTER_DEPLOYMENT"
)

// All allowed values of ServiceStepMetricNameEnum enum
var AllowedServiceStepMetricNameEnumEnumValues = []ServiceStepMetricNameEnum{
	"REGISTRY_CREATE_REPOSITORY",
	"GIT_CLONE",
	"BUILD",
	"DEPLOYMENT",
	"ROUTER_DEPLOYMENT",
}

func (v *ServiceStepMetricNameEnum) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ServiceStepMetricNameEnum(value)
	for _, existing := range AllowedServiceStepMetricNameEnumEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ServiceStepMetricNameEnum", value)
}

// NewServiceStepMetricNameEnumFromValue returns a pointer to a valid ServiceStepMetricNameEnum
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewServiceStepMetricNameEnumFromValue(v string) (*ServiceStepMetricNameEnum, error) {
	ev := ServiceStepMetricNameEnum(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ServiceStepMetricNameEnum: valid values are %v", v, AllowedServiceStepMetricNameEnumEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ServiceStepMetricNameEnum) IsValid() bool {
	for _, existing := range AllowedServiceStepMetricNameEnumEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to ServiceStepMetricNameEnum value
func (v ServiceStepMetricNameEnum) Ptr() *ServiceStepMetricNameEnum {
	return &v
}

type NullableServiceStepMetricNameEnum struct {
	value *ServiceStepMetricNameEnum
	isSet bool
}

func (v NullableServiceStepMetricNameEnum) Get() *ServiceStepMetricNameEnum {
	return v.value
}

func (v *NullableServiceStepMetricNameEnum) Set(val *ServiceStepMetricNameEnum) {
	v.value = val
	v.isSet = true
}

func (v NullableServiceStepMetricNameEnum) IsSet() bool {
	return v.isSet
}

func (v *NullableServiceStepMetricNameEnum) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableServiceStepMetricNameEnum(val *ServiceStepMetricNameEnum) *NullableServiceStepMetricNameEnum {
	return &NullableServiceStepMetricNameEnum{value: val, isSet: true}
}

func (v NullableServiceStepMetricNameEnum) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableServiceStepMetricNameEnum) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
