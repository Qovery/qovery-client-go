/*
Qovery API

- Qovery is the fastest way to deploy your full-stack apps on any Cloud provider. - ℹ️ The API is stable and still in development.

API version: 1.0.2
Contact: support+api+documentation@qovery.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package qovery

import (
	"encoding/json"
)

// ProjectProjectIdDeploymentRuleOrderProjectDeploymentRuleIdsInOrder struct for ProjectProjectIdDeploymentRuleOrderProjectDeploymentRuleIdsInOrder
type ProjectProjectIdDeploymentRuleOrderProjectDeploymentRuleIdsInOrder struct {
	// project deployment rule id
	Id string `json:"id"`
}

// NewProjectProjectIdDeploymentRuleOrderProjectDeploymentRuleIdsInOrder instantiates a new ProjectProjectIdDeploymentRuleOrderProjectDeploymentRuleIdsInOrder object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewProjectProjectIdDeploymentRuleOrderProjectDeploymentRuleIdsInOrder(id string) *ProjectProjectIdDeploymentRuleOrderProjectDeploymentRuleIdsInOrder {
	this := ProjectProjectIdDeploymentRuleOrderProjectDeploymentRuleIdsInOrder{}
	this.Id = id
	return &this
}

// NewProjectProjectIdDeploymentRuleOrderProjectDeploymentRuleIdsInOrderWithDefaults instantiates a new ProjectProjectIdDeploymentRuleOrderProjectDeploymentRuleIdsInOrder object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewProjectProjectIdDeploymentRuleOrderProjectDeploymentRuleIdsInOrderWithDefaults() *ProjectProjectIdDeploymentRuleOrderProjectDeploymentRuleIdsInOrder {
	this := ProjectProjectIdDeploymentRuleOrderProjectDeploymentRuleIdsInOrder{}
	return &this
}

// GetId returns the Id field value
func (o *ProjectProjectIdDeploymentRuleOrderProjectDeploymentRuleIdsInOrder) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *ProjectProjectIdDeploymentRuleOrderProjectDeploymentRuleIdsInOrder) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *ProjectProjectIdDeploymentRuleOrderProjectDeploymentRuleIdsInOrder) SetId(v string) {
	o.Id = v
}

func (o ProjectProjectIdDeploymentRuleOrderProjectDeploymentRuleIdsInOrder) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["id"] = o.Id
	}
	return json.Marshal(toSerialize)
}

type NullableProjectProjectIdDeploymentRuleOrderProjectDeploymentRuleIdsInOrder struct {
	value *ProjectProjectIdDeploymentRuleOrderProjectDeploymentRuleIdsInOrder
	isSet bool
}

func (v NullableProjectProjectIdDeploymentRuleOrderProjectDeploymentRuleIdsInOrder) Get() *ProjectProjectIdDeploymentRuleOrderProjectDeploymentRuleIdsInOrder {
	return v.value
}

func (v *NullableProjectProjectIdDeploymentRuleOrderProjectDeploymentRuleIdsInOrder) Set(val *ProjectProjectIdDeploymentRuleOrderProjectDeploymentRuleIdsInOrder) {
	v.value = val
	v.isSet = true
}

func (v NullableProjectProjectIdDeploymentRuleOrderProjectDeploymentRuleIdsInOrder) IsSet() bool {
	return v.isSet
}

func (v *NullableProjectProjectIdDeploymentRuleOrderProjectDeploymentRuleIdsInOrder) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableProjectProjectIdDeploymentRuleOrderProjectDeploymentRuleIdsInOrder(val *ProjectProjectIdDeploymentRuleOrderProjectDeploymentRuleIdsInOrder) *NullableProjectProjectIdDeploymentRuleOrderProjectDeploymentRuleIdsInOrder {
	return &NullableProjectProjectIdDeploymentRuleOrderProjectDeploymentRuleIdsInOrder{value: val, isSet: true}
}

func (v NullableProjectProjectIdDeploymentRuleOrderProjectDeploymentRuleIdsInOrder) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableProjectProjectIdDeploymentRuleOrderProjectDeploymentRuleIdsInOrder) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
