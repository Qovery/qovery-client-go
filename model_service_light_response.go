/*
Qovery API

- Qovery is the fastest way to deploy your full-stack apps on any Cloud provider. - ℹ️ The API is stable and still in development.

API version: 1.0.3
Contact: support+api+documentation@qovery.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package qovery

import (
	"encoding/json"
	"fmt"
)

// checks if the ServiceLightResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ServiceLightResponse{}

// ServiceLightResponse struct for ServiceLightResponse
type ServiceLightResponse struct {
	Id                   string          `json:"id"`
	Name                 string          `json:"name"`
	Description          string          `json:"description"`
	IconUri              string          `json:"icon_uri"`
	ServiceType          ServiceTypeEnum `json:"service_type"`
	ProjectId            string          `json:"project_id"`
	ProjectName          string          `json:"project_name"`
	EnvironmentId        string          `json:"environment_id"`
	EnvironmentName      string          `json:"environment_name"`
	AdditionalProperties map[string]interface{}
}

type _ServiceLightResponse ServiceLightResponse

// NewServiceLightResponse instantiates a new ServiceLightResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewServiceLightResponse(id string, name string, description string, iconUri string, serviceType ServiceTypeEnum, projectId string, projectName string, environmentId string, environmentName string) *ServiceLightResponse {
	this := ServiceLightResponse{}
	this.Id = id
	this.Name = name
	this.Description = description
	this.IconUri = iconUri
	this.ServiceType = serviceType
	this.ProjectId = projectId
	this.ProjectName = projectName
	this.EnvironmentId = environmentId
	this.EnvironmentName = environmentName
	return &this
}

// NewServiceLightResponseWithDefaults instantiates a new ServiceLightResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewServiceLightResponseWithDefaults() *ServiceLightResponse {
	this := ServiceLightResponse{}
	return &this
}

// GetId returns the Id field value
func (o *ServiceLightResponse) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *ServiceLightResponse) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *ServiceLightResponse) SetId(v string) {
	o.Id = v
}

// GetName returns the Name field value
func (o *ServiceLightResponse) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *ServiceLightResponse) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *ServiceLightResponse) SetName(v string) {
	o.Name = v
}

// GetDescription returns the Description field value
func (o *ServiceLightResponse) GetDescription() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Description
}

// GetDescriptionOk returns a tuple with the Description field value
// and a boolean to check if the value has been set.
func (o *ServiceLightResponse) GetDescriptionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Description, true
}

// SetDescription sets field value
func (o *ServiceLightResponse) SetDescription(v string) {
	o.Description = v
}

// GetIconUri returns the IconUri field value
func (o *ServiceLightResponse) GetIconUri() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.IconUri
}

// GetIconUriOk returns a tuple with the IconUri field value
// and a boolean to check if the value has been set.
func (o *ServiceLightResponse) GetIconUriOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.IconUri, true
}

// SetIconUri sets field value
func (o *ServiceLightResponse) SetIconUri(v string) {
	o.IconUri = v
}

// GetServiceType returns the ServiceType field value
func (o *ServiceLightResponse) GetServiceType() ServiceTypeEnum {
	if o == nil {
		var ret ServiceTypeEnum
		return ret
	}

	return o.ServiceType
}

// GetServiceTypeOk returns a tuple with the ServiceType field value
// and a boolean to check if the value has been set.
func (o *ServiceLightResponse) GetServiceTypeOk() (*ServiceTypeEnum, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ServiceType, true
}

// SetServiceType sets field value
func (o *ServiceLightResponse) SetServiceType(v ServiceTypeEnum) {
	o.ServiceType = v
}

// GetProjectId returns the ProjectId field value
func (o *ServiceLightResponse) GetProjectId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ProjectId
}

// GetProjectIdOk returns a tuple with the ProjectId field value
// and a boolean to check if the value has been set.
func (o *ServiceLightResponse) GetProjectIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ProjectId, true
}

// SetProjectId sets field value
func (o *ServiceLightResponse) SetProjectId(v string) {
	o.ProjectId = v
}

// GetProjectName returns the ProjectName field value
func (o *ServiceLightResponse) GetProjectName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ProjectName
}

// GetProjectNameOk returns a tuple with the ProjectName field value
// and a boolean to check if the value has been set.
func (o *ServiceLightResponse) GetProjectNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ProjectName, true
}

// SetProjectName sets field value
func (o *ServiceLightResponse) SetProjectName(v string) {
	o.ProjectName = v
}

// GetEnvironmentId returns the EnvironmentId field value
func (o *ServiceLightResponse) GetEnvironmentId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.EnvironmentId
}

// GetEnvironmentIdOk returns a tuple with the EnvironmentId field value
// and a boolean to check if the value has been set.
func (o *ServiceLightResponse) GetEnvironmentIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.EnvironmentId, true
}

// SetEnvironmentId sets field value
func (o *ServiceLightResponse) SetEnvironmentId(v string) {
	o.EnvironmentId = v
}

// GetEnvironmentName returns the EnvironmentName field value
func (o *ServiceLightResponse) GetEnvironmentName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.EnvironmentName
}

// GetEnvironmentNameOk returns a tuple with the EnvironmentName field value
// and a boolean to check if the value has been set.
func (o *ServiceLightResponse) GetEnvironmentNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.EnvironmentName, true
}

// SetEnvironmentName sets field value
func (o *ServiceLightResponse) SetEnvironmentName(v string) {
	o.EnvironmentName = v
}

func (o ServiceLightResponse) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ServiceLightResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["name"] = o.Name
	toSerialize["description"] = o.Description
	toSerialize["icon_uri"] = o.IconUri
	toSerialize["service_type"] = o.ServiceType
	toSerialize["project_id"] = o.ProjectId
	toSerialize["project_name"] = o.ProjectName
	toSerialize["environment_id"] = o.EnvironmentId
	toSerialize["environment_name"] = o.EnvironmentName

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *ServiceLightResponse) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"name",
		"description",
		"icon_uri",
		"service_type",
		"project_id",
		"project_name",
		"environment_id",
		"environment_name",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varServiceLightResponse := _ServiceLightResponse{}

	err = json.Unmarshal(data, &varServiceLightResponse)

	if err != nil {
		return err
	}

	*o = ServiceLightResponse(varServiceLightResponse)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "id")
		delete(additionalProperties, "name")
		delete(additionalProperties, "description")
		delete(additionalProperties, "icon_uri")
		delete(additionalProperties, "service_type")
		delete(additionalProperties, "project_id")
		delete(additionalProperties, "project_name")
		delete(additionalProperties, "environment_id")
		delete(additionalProperties, "environment_name")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableServiceLightResponse struct {
	value *ServiceLightResponse
	isSet bool
}

func (v NullableServiceLightResponse) Get() *ServiceLightResponse {
	return v.value
}

func (v *NullableServiceLightResponse) Set(val *ServiceLightResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableServiceLightResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableServiceLightResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableServiceLightResponse(val *ServiceLightResponse) *NullableServiceLightResponse {
	return &NullableServiceLightResponse{value: val, isSet: true}
}

func (v NullableServiceLightResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableServiceLightResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
