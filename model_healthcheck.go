/*
Qovery API

- Qovery is the fastest way to deploy your full-stack apps on any Cloud provider. - ℹ️ The API is stable and still in development.

API version: 1.0.3
Contact: support+api+documentation@qovery.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package qovery

import (
	"encoding/json"
)

// checks if the Healthcheck type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Healthcheck{}

// Healthcheck struct for Healthcheck
type Healthcheck struct {
	ReadinessProbe NullableProbe `json:"readiness_probe,omitempty"`
	LivenessProbe  NullableProbe `json:"liveness_probe,omitempty"`
}

// NewHealthcheck instantiates a new Healthcheck object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewHealthcheck() *Healthcheck {
	this := Healthcheck{}
	return &this
}

// NewHealthcheckWithDefaults instantiates a new Healthcheck object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewHealthcheckWithDefaults() *Healthcheck {
	this := Healthcheck{}
	return &this
}

// GetReadinessProbe returns the ReadinessProbe field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Healthcheck) GetReadinessProbe() Probe {
	if o == nil || IsNil(o.ReadinessProbe.Get()) {
		var ret Probe
		return ret
	}
	return *o.ReadinessProbe.Get()
}

// GetReadinessProbeOk returns a tuple with the ReadinessProbe field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Healthcheck) GetReadinessProbeOk() (*Probe, bool) {
	if o == nil {
		return nil, false
	}
	return o.ReadinessProbe.Get(), o.ReadinessProbe.IsSet()
}

// HasReadinessProbe returns a boolean if a field has been set.
func (o *Healthcheck) HasReadinessProbe() bool {
	if o != nil && o.ReadinessProbe.IsSet() {
		return true
	}

	return false
}

// SetReadinessProbe gets a reference to the given NullableProbe and assigns it to the ReadinessProbe field.
func (o *Healthcheck) SetReadinessProbe(v Probe) {
	o.ReadinessProbe.Set(&v)
}

// SetReadinessProbeNil sets the value for ReadinessProbe to be an explicit nil
func (o *Healthcheck) SetReadinessProbeNil() {
	o.ReadinessProbe.Set(nil)
}

// UnsetReadinessProbe ensures that no value is present for ReadinessProbe, not even an explicit nil
func (o *Healthcheck) UnsetReadinessProbe() {
	o.ReadinessProbe.Unset()
}

// GetLivenessProbe returns the LivenessProbe field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Healthcheck) GetLivenessProbe() Probe {
	if o == nil || IsNil(o.LivenessProbe.Get()) {
		var ret Probe
		return ret
	}
	return *o.LivenessProbe.Get()
}

// GetLivenessProbeOk returns a tuple with the LivenessProbe field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Healthcheck) GetLivenessProbeOk() (*Probe, bool) {
	if o == nil {
		return nil, false
	}
	return o.LivenessProbe.Get(), o.LivenessProbe.IsSet()
}

// HasLivenessProbe returns a boolean if a field has been set.
func (o *Healthcheck) HasLivenessProbe() bool {
	if o != nil && o.LivenessProbe.IsSet() {
		return true
	}

	return false
}

// SetLivenessProbe gets a reference to the given NullableProbe and assigns it to the LivenessProbe field.
func (o *Healthcheck) SetLivenessProbe(v Probe) {
	o.LivenessProbe.Set(&v)
}

// SetLivenessProbeNil sets the value for LivenessProbe to be an explicit nil
func (o *Healthcheck) SetLivenessProbeNil() {
	o.LivenessProbe.Set(nil)
}

// UnsetLivenessProbe ensures that no value is present for LivenessProbe, not even an explicit nil
func (o *Healthcheck) UnsetLivenessProbe() {
	o.LivenessProbe.Unset()
}

func (o Healthcheck) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Healthcheck) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.ReadinessProbe.IsSet() {
		toSerialize["readiness_probe"] = o.ReadinessProbe.Get()
	}
	if o.LivenessProbe.IsSet() {
		toSerialize["liveness_probe"] = o.LivenessProbe.Get()
	}
	return toSerialize, nil
}

type NullableHealthcheck struct {
	value *Healthcheck
	isSet bool
}

func (v NullableHealthcheck) Get() *Healthcheck {
	return v.value
}

func (v *NullableHealthcheck) Set(val *Healthcheck) {
	v.value = val
	v.isSet = true
}

func (v NullableHealthcheck) IsSet() bool {
	return v.isSet
}

func (v *NullableHealthcheck) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableHealthcheck(val *Healthcheck) *NullableHealthcheck {
	return &NullableHealthcheck{value: val, isSet: true}
}

func (v NullableHealthcheck) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableHealthcheck) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
