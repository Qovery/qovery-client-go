/*
Qovery API

- Qovery is the fastest way to deploy your full-stack apps on any Cloud provider. - ℹ️ The API is stable and still in development.

API version: 1.0.3
Contact: support+api+documentation@qovery.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package qovery

import (
	"encoding/json"
)

// Healthcheck struct for Healthcheck
type Healthcheck struct {
	ReadinessProbe *Probe `json:"readiness_probe,omitempty"`
	LivenessProbe  *Probe `json:"liveness_probe,omitempty"`
}

// NewHealthcheck instantiates a new Healthcheck object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewHealthcheck() *Healthcheck {
	this := Healthcheck{}
	return &this
}

// NewHealthcheckWithDefaults instantiates a new Healthcheck object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewHealthcheckWithDefaults() *Healthcheck {
	this := Healthcheck{}
	return &this
}

// GetReadinessProbe returns the ReadinessProbe field value if set, zero value otherwise.
func (o *Healthcheck) GetReadinessProbe() Probe {
	if o == nil || o.ReadinessProbe == nil {
		var ret Probe
		return ret
	}
	return *o.ReadinessProbe
}

// GetReadinessProbeOk returns a tuple with the ReadinessProbe field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Healthcheck) GetReadinessProbeOk() (*Probe, bool) {
	if o == nil || o.ReadinessProbe == nil {
		return nil, false
	}
	return o.ReadinessProbe, true
}

// HasReadinessProbe returns a boolean if a field has been set.
func (o *Healthcheck) HasReadinessProbe() bool {
	if o != nil && o.ReadinessProbe != nil {
		return true
	}

	return false
}

// SetReadinessProbe gets a reference to the given Probe and assigns it to the ReadinessProbe field.
func (o *Healthcheck) SetReadinessProbe(v Probe) {
	o.ReadinessProbe = &v
}

// GetLivenessProbe returns the LivenessProbe field value if set, zero value otherwise.
func (o *Healthcheck) GetLivenessProbe() Probe {
	if o == nil || o.LivenessProbe == nil {
		var ret Probe
		return ret
	}
	return *o.LivenessProbe
}

// GetLivenessProbeOk returns a tuple with the LivenessProbe field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Healthcheck) GetLivenessProbeOk() (*Probe, bool) {
	if o == nil || o.LivenessProbe == nil {
		return nil, false
	}
	return o.LivenessProbe, true
}

// HasLivenessProbe returns a boolean if a field has been set.
func (o *Healthcheck) HasLivenessProbe() bool {
	if o != nil && o.LivenessProbe != nil {
		return true
	}

	return false
}

// SetLivenessProbe gets a reference to the given Probe and assigns it to the LivenessProbe field.
func (o *Healthcheck) SetLivenessProbe(v Probe) {
	o.LivenessProbe = &v
}

func (o Healthcheck) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.ReadinessProbe != nil {
		toSerialize["readiness_probe"] = o.ReadinessProbe
	}
	if o.LivenessProbe != nil {
		toSerialize["liveness_probe"] = o.LivenessProbe
	}
	return json.Marshal(toSerialize)
}

type NullableHealthcheck struct {
	value *Healthcheck
	isSet bool
}

func (v NullableHealthcheck) Get() *Healthcheck {
	return v.value
}

func (v *NullableHealthcheck) Set(val *Healthcheck) {
	v.value = val
	v.isSet = true
}

func (v NullableHealthcheck) IsSet() bool {
	return v.isSet
}

func (v *NullableHealthcheck) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableHealthcheck(val *Healthcheck) *NullableHealthcheck {
	return &NullableHealthcheck{value: val, isSet: true}
}

func (v NullableHealthcheck) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableHealthcheck) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
