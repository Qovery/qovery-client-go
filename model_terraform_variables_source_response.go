/*
Qovery API

- Qovery is the fastest way to deploy your full-stack apps on any Cloud provider. - ℹ️ The API is stable and still in development.

API version: 1.0.3
Contact: support+api+documentation@qovery.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package qovery

import (
	"encoding/json"
	"fmt"
)

// checks if the TerraformVariablesSourceResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TerraformVariablesSourceResponse{}

// TerraformVariablesSourceResponse struct for TerraformVariablesSourceResponse
type TerraformVariablesSourceResponse struct {
	TfVarFilePaths       []string               `json:"tf_var_file_paths"`
	TfVars               []TerraformVarKeyValue `json:"tf_vars"`
	AdditionalProperties map[string]interface{}
}

type _TerraformVariablesSourceResponse TerraformVariablesSourceResponse

// NewTerraformVariablesSourceResponse instantiates a new TerraformVariablesSourceResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTerraformVariablesSourceResponse(tfVarFilePaths []string, tfVars []TerraformVarKeyValue) *TerraformVariablesSourceResponse {
	this := TerraformVariablesSourceResponse{}
	this.TfVarFilePaths = tfVarFilePaths
	this.TfVars = tfVars
	return &this
}

// NewTerraformVariablesSourceResponseWithDefaults instantiates a new TerraformVariablesSourceResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTerraformVariablesSourceResponseWithDefaults() *TerraformVariablesSourceResponse {
	this := TerraformVariablesSourceResponse{}
	return &this
}

// GetTfVarFilePaths returns the TfVarFilePaths field value
func (o *TerraformVariablesSourceResponse) GetTfVarFilePaths() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.TfVarFilePaths
}

// GetTfVarFilePathsOk returns a tuple with the TfVarFilePaths field value
// and a boolean to check if the value has been set.
func (o *TerraformVariablesSourceResponse) GetTfVarFilePathsOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.TfVarFilePaths, true
}

// SetTfVarFilePaths sets field value
func (o *TerraformVariablesSourceResponse) SetTfVarFilePaths(v []string) {
	o.TfVarFilePaths = v
}

// GetTfVars returns the TfVars field value
func (o *TerraformVariablesSourceResponse) GetTfVars() []TerraformVarKeyValue {
	if o == nil {
		var ret []TerraformVarKeyValue
		return ret
	}

	return o.TfVars
}

// GetTfVarsOk returns a tuple with the TfVars field value
// and a boolean to check if the value has been set.
func (o *TerraformVariablesSourceResponse) GetTfVarsOk() ([]TerraformVarKeyValue, bool) {
	if o == nil {
		return nil, false
	}
	return o.TfVars, true
}

// SetTfVars sets field value
func (o *TerraformVariablesSourceResponse) SetTfVars(v []TerraformVarKeyValue) {
	o.TfVars = v
}

func (o TerraformVariablesSourceResponse) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TerraformVariablesSourceResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["tf_var_file_paths"] = o.TfVarFilePaths
	toSerialize["tf_vars"] = o.TfVars

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *TerraformVariablesSourceResponse) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"tf_var_file_paths",
		"tf_vars",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varTerraformVariablesSourceResponse := _TerraformVariablesSourceResponse{}

	err = json.Unmarshal(data, &varTerraformVariablesSourceResponse)

	if err != nil {
		return err
	}

	*o = TerraformVariablesSourceResponse(varTerraformVariablesSourceResponse)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "tf_var_file_paths")
		delete(additionalProperties, "tf_vars")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableTerraformVariablesSourceResponse struct {
	value *TerraformVariablesSourceResponse
	isSet bool
}

func (v NullableTerraformVariablesSourceResponse) Get() *TerraformVariablesSourceResponse {
	return v.value
}

func (v *NullableTerraformVariablesSourceResponse) Set(val *TerraformVariablesSourceResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableTerraformVariablesSourceResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableTerraformVariablesSourceResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTerraformVariablesSourceResponse(val *TerraformVariablesSourceResponse) *NullableTerraformVariablesSourceResponse {
	return &NullableTerraformVariablesSourceResponse{value: val, isSet: true}
}

func (v NullableTerraformVariablesSourceResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTerraformVariablesSourceResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
