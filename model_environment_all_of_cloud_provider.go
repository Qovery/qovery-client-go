/*
Qovery API

- Qovery is the fastest way to deploy your full-stack apps on any Cloud provider. - ℹ️ The API is stable and still in development.

API version: 1.0.4
Contact: support+api+documentation@qovery.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package qovery

import (
	"encoding/json"
)

// checks if the EnvironmentAllOfCloudProvider type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &EnvironmentAllOfCloudProvider{}

// EnvironmentAllOfCloudProvider struct for EnvironmentAllOfCloudProvider
type EnvironmentAllOfCloudProvider struct {
	Provider             *string `json:"provider,omitempty"`
	Cluster              *string `json:"cluster,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _EnvironmentAllOfCloudProvider EnvironmentAllOfCloudProvider

// NewEnvironmentAllOfCloudProvider instantiates a new EnvironmentAllOfCloudProvider object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEnvironmentAllOfCloudProvider() *EnvironmentAllOfCloudProvider {
	this := EnvironmentAllOfCloudProvider{}
	return &this
}

// NewEnvironmentAllOfCloudProviderWithDefaults instantiates a new EnvironmentAllOfCloudProvider object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEnvironmentAllOfCloudProviderWithDefaults() *EnvironmentAllOfCloudProvider {
	this := EnvironmentAllOfCloudProvider{}
	return &this
}

// GetProvider returns the Provider field value if set, zero value otherwise.
func (o *EnvironmentAllOfCloudProvider) GetProvider() string {
	if o == nil || IsNil(o.Provider) {
		var ret string
		return ret
	}
	return *o.Provider
}

// GetProviderOk returns a tuple with the Provider field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EnvironmentAllOfCloudProvider) GetProviderOk() (*string, bool) {
	if o == nil || IsNil(o.Provider) {
		return nil, false
	}
	return o.Provider, true
}

// HasProvider returns a boolean if a field has been set.
func (o *EnvironmentAllOfCloudProvider) HasProvider() bool {
	if o != nil && !IsNil(o.Provider) {
		return true
	}

	return false
}

// SetProvider gets a reference to the given string and assigns it to the Provider field.
func (o *EnvironmentAllOfCloudProvider) SetProvider(v string) {
	o.Provider = &v
}

// GetCluster returns the Cluster field value if set, zero value otherwise.
func (o *EnvironmentAllOfCloudProvider) GetCluster() string {
	if o == nil || IsNil(o.Cluster) {
		var ret string
		return ret
	}
	return *o.Cluster
}

// GetClusterOk returns a tuple with the Cluster field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EnvironmentAllOfCloudProvider) GetClusterOk() (*string, bool) {
	if o == nil || IsNil(o.Cluster) {
		return nil, false
	}
	return o.Cluster, true
}

// HasCluster returns a boolean if a field has been set.
func (o *EnvironmentAllOfCloudProvider) HasCluster() bool {
	if o != nil && !IsNil(o.Cluster) {
		return true
	}

	return false
}

// SetCluster gets a reference to the given string and assigns it to the Cluster field.
func (o *EnvironmentAllOfCloudProvider) SetCluster(v string) {
	o.Cluster = &v
}

func (o EnvironmentAllOfCloudProvider) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o EnvironmentAllOfCloudProvider) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Provider) {
		toSerialize["provider"] = o.Provider
	}
	if !IsNil(o.Cluster) {
		toSerialize["cluster"] = o.Cluster
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *EnvironmentAllOfCloudProvider) UnmarshalJSON(data []byte) (err error) {
	varEnvironmentAllOfCloudProvider := _EnvironmentAllOfCloudProvider{}

	err = json.Unmarshal(data, &varEnvironmentAllOfCloudProvider)

	if err != nil {
		return err
	}

	*o = EnvironmentAllOfCloudProvider(varEnvironmentAllOfCloudProvider)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "provider")
		delete(additionalProperties, "cluster")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableEnvironmentAllOfCloudProvider struct {
	value *EnvironmentAllOfCloudProvider
	isSet bool
}

func (v NullableEnvironmentAllOfCloudProvider) Get() *EnvironmentAllOfCloudProvider {
	return v.value
}

func (v *NullableEnvironmentAllOfCloudProvider) Set(val *EnvironmentAllOfCloudProvider) {
	v.value = val
	v.isSet = true
}

func (v NullableEnvironmentAllOfCloudProvider) IsSet() bool {
	return v.isSet
}

func (v *NullableEnvironmentAllOfCloudProvider) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEnvironmentAllOfCloudProvider(val *EnvironmentAllOfCloudProvider) *NullableEnvironmentAllOfCloudProvider {
	return &NullableEnvironmentAllOfCloudProvider{value: val, isSet: true}
}

func (v NullableEnvironmentAllOfCloudProvider) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEnvironmentAllOfCloudProvider) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
