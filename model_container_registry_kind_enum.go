/*
Qovery API

- Qovery is the fastest way to deploy your full-stack apps on any Cloud provider. - ℹ️ The API is stable and still in development.

API version: 1.0.3
Contact: support+api+documentation@qovery.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package qovery

import (
	"encoding/json"
	"fmt"
)

// ContainerRegistryKindEnum The type of your container registry
type ContainerRegistryKindEnum string

// List of ContainerRegistryKindEnum
const (
	CONTAINERREGISTRYKINDENUM_ECR                   ContainerRegistryKindEnum = "ECR"
	CONTAINERREGISTRYKINDENUM_SCALEWAY_CR           ContainerRegistryKindEnum = "SCALEWAY_CR"
	CONTAINERREGISTRYKINDENUM_DOCKER_HUB            ContainerRegistryKindEnum = "DOCKER_HUB"
	CONTAINERREGISTRYKINDENUM_GITHUB_CR             ContainerRegistryKindEnum = "GITHUB_CR"
	CONTAINERREGISTRYKINDENUM_GITLAB_CR             ContainerRegistryKindEnum = "GITLAB_CR"
	CONTAINERREGISTRYKINDENUM_PUBLIC_ECR            ContainerRegistryKindEnum = "PUBLIC_ECR"
	CONTAINERREGISTRYKINDENUM_DOCR                  ContainerRegistryKindEnum = "DOCR"
	CONTAINERREGISTRYKINDENUM_GENERIC_CR            ContainerRegistryKindEnum = "GENERIC_CR"
	CONTAINERREGISTRYKINDENUM_GCP_ARTIFACT_REGISTRY ContainerRegistryKindEnum = "GCP_ARTIFACT_REGISTRY"
)

// All allowed values of ContainerRegistryKindEnum enum
var AllowedContainerRegistryKindEnumEnumValues = []ContainerRegistryKindEnum{
	"ECR",
	"SCALEWAY_CR",
	"DOCKER_HUB",
	"GITHUB_CR",
	"GITLAB_CR",
	"PUBLIC_ECR",
	"DOCR",
	"GENERIC_CR",
	"GCP_ARTIFACT_REGISTRY",
}

func (v *ContainerRegistryKindEnum) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ContainerRegistryKindEnum(value)
	for _, existing := range AllowedContainerRegistryKindEnumEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ContainerRegistryKindEnum", value)
}

// NewContainerRegistryKindEnumFromValue returns a pointer to a valid ContainerRegistryKindEnum
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewContainerRegistryKindEnumFromValue(v string) (*ContainerRegistryKindEnum, error) {
	ev := ContainerRegistryKindEnum(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ContainerRegistryKindEnum: valid values are %v", v, AllowedContainerRegistryKindEnumEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ContainerRegistryKindEnum) IsValid() bool {
	for _, existing := range AllowedContainerRegistryKindEnumEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to ContainerRegistryKindEnum value
func (v ContainerRegistryKindEnum) Ptr() *ContainerRegistryKindEnum {
	return &v
}

type NullableContainerRegistryKindEnum struct {
	value *ContainerRegistryKindEnum
	isSet bool
}

func (v NullableContainerRegistryKindEnum) Get() *ContainerRegistryKindEnum {
	return v.value
}

func (v *NullableContainerRegistryKindEnum) Set(val *ContainerRegistryKindEnum) {
	v.value = val
	v.isSet = true
}

func (v NullableContainerRegistryKindEnum) IsSet() bool {
	return v.isSet
}

func (v *NullableContainerRegistryKindEnum) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableContainerRegistryKindEnum(val *ContainerRegistryKindEnum) *NullableContainerRegistryKindEnum {
	return &NullableContainerRegistryKindEnum{value: val, isSet: true}
}

func (v NullableContainerRegistryKindEnum) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableContainerRegistryKindEnum) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
