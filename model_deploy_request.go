/*
Qovery API

- Qovery is the fastest way to deploy your full-stack apps on any Cloud provider. - ℹ️ The API is stable and still in development.

API version: 1.0.4
Contact: support+api+documentation@qovery.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package qovery

import (
	"encoding/json"
	"fmt"
)

// checks if the DeployRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DeployRequest{}

// DeployRequest struct for DeployRequest
type DeployRequest struct {
	// Commit ID to deploy
	GitCommitId          string `json:"git_commit_id"`
	AdditionalProperties map[string]interface{}
}

type _DeployRequest DeployRequest

// NewDeployRequest instantiates a new DeployRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDeployRequest(gitCommitId string) *DeployRequest {
	this := DeployRequest{}
	this.GitCommitId = gitCommitId
	return &this
}

// NewDeployRequestWithDefaults instantiates a new DeployRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDeployRequestWithDefaults() *DeployRequest {
	this := DeployRequest{}
	return &this
}

// GetGitCommitId returns the GitCommitId field value
func (o *DeployRequest) GetGitCommitId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.GitCommitId
}

// GetGitCommitIdOk returns a tuple with the GitCommitId field value
// and a boolean to check if the value has been set.
func (o *DeployRequest) GetGitCommitIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.GitCommitId, true
}

// SetGitCommitId sets field value
func (o *DeployRequest) SetGitCommitId(v string) {
	o.GitCommitId = v
}

func (o DeployRequest) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DeployRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["git_commit_id"] = o.GitCommitId

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *DeployRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"git_commit_id",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varDeployRequest := _DeployRequest{}

	err = json.Unmarshal(data, &varDeployRequest)

	if err != nil {
		return err
	}

	*o = DeployRequest(varDeployRequest)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "git_commit_id")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableDeployRequest struct {
	value *DeployRequest
	isSet bool
}

func (v NullableDeployRequest) Get() *DeployRequest {
	return v.value
}

func (v *NullableDeployRequest) Set(val *DeployRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableDeployRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableDeployRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDeployRequest(val *DeployRequest) *NullableDeployRequest {
	return &NullableDeployRequest{value: val, isSet: true}
}

func (v NullableDeployRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDeployRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
