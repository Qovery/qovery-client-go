/*
Qovery API

- Qovery is the fastest way to deploy your full-stack apps on any Cloud provider. - ℹ️ The API is stable and still in development.

API version: 1.0.4
Contact: support+api+documentation@qovery.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package qovery

import (
	"encoding/json"
	"fmt"
)

// CreateEnvironmentModeEnum the model 'CreateEnvironmentModeEnum'
type CreateEnvironmentModeEnum string

// List of CreateEnvironmentModeEnum
const (
	CREATEENVIRONMENTMODEENUM_DEVELOPMENT CreateEnvironmentModeEnum = "DEVELOPMENT"
	CREATEENVIRONMENTMODEENUM_PRODUCTION  CreateEnvironmentModeEnum = "PRODUCTION"
	CREATEENVIRONMENTMODEENUM_STAGING     CreateEnvironmentModeEnum = "STAGING"
)

// All allowed values of CreateEnvironmentModeEnum enum
var AllowedCreateEnvironmentModeEnumEnumValues = []CreateEnvironmentModeEnum{
	"DEVELOPMENT",
	"PRODUCTION",
	"STAGING",
}

func (v *CreateEnvironmentModeEnum) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := CreateEnvironmentModeEnum(value)
	for _, existing := range AllowedCreateEnvironmentModeEnumEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid CreateEnvironmentModeEnum", value)
}

// NewCreateEnvironmentModeEnumFromValue returns a pointer to a valid CreateEnvironmentModeEnum
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewCreateEnvironmentModeEnumFromValue(v string) (*CreateEnvironmentModeEnum, error) {
	ev := CreateEnvironmentModeEnum(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for CreateEnvironmentModeEnum: valid values are %v", v, AllowedCreateEnvironmentModeEnumEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v CreateEnvironmentModeEnum) IsValid() bool {
	for _, existing := range AllowedCreateEnvironmentModeEnumEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to CreateEnvironmentModeEnum value
func (v CreateEnvironmentModeEnum) Ptr() *CreateEnvironmentModeEnum {
	return &v
}

type NullableCreateEnvironmentModeEnum struct {
	value *CreateEnvironmentModeEnum
	isSet bool
}

func (v NullableCreateEnvironmentModeEnum) Get() *CreateEnvironmentModeEnum {
	return v.value
}

func (v *NullableCreateEnvironmentModeEnum) Set(val *CreateEnvironmentModeEnum) {
	v.value = val
	v.isSet = true
}

func (v NullableCreateEnvironmentModeEnum) IsSet() bool {
	return v.isSet
}

func (v *NullableCreateEnvironmentModeEnum) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCreateEnvironmentModeEnum(val *CreateEnvironmentModeEnum) *NullableCreateEnvironmentModeEnum {
	return &NullableCreateEnvironmentModeEnum{value: val, isSet: true}
}

func (v NullableCreateEnvironmentModeEnum) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCreateEnvironmentModeEnum) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
