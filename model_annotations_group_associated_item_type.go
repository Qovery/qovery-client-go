/*
Qovery API

- Qovery is the fastest way to deploy your full-stack apps on any Cloud provider. - ℹ️ The API is stable and still in development.

API version: 1.0.3
Contact: support+api+documentation@qovery.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package qovery

import (
	"encoding/json"
	"fmt"
)

// AnnotationsGroupAssociatedItemType Annotations Group Associated Item Type
type AnnotationsGroupAssociatedItemType string

// List of AnnotationsGroupAssociatedItemType
const (
	ANNOTATIONSGROUPASSOCIATEDITEMTYPE_APPLICATION AnnotationsGroupAssociatedItemType = "APPLICATION"
	ANNOTATIONSGROUPASSOCIATEDITEMTYPE_DATABASE    AnnotationsGroupAssociatedItemType = "DATABASE"
	ANNOTATIONSGROUPASSOCIATEDITEMTYPE_CONTAINER   AnnotationsGroupAssociatedItemType = "CONTAINER"
	ANNOTATIONSGROUPASSOCIATEDITEMTYPE_LIFECYCLE   AnnotationsGroupAssociatedItemType = "LIFECYCLE"
	ANNOTATIONSGROUPASSOCIATEDITEMTYPE_ENVIRONMENT AnnotationsGroupAssociatedItemType = "ENVIRONMENT"
	ANNOTATIONSGROUPASSOCIATEDITEMTYPE_CLUSTER     AnnotationsGroupAssociatedItemType = "CLUSTER"
	ANNOTATIONSGROUPASSOCIATEDITEMTYPE_CRON        AnnotationsGroupAssociatedItemType = "CRON"
)

// All allowed values of AnnotationsGroupAssociatedItemType enum
var AllowedAnnotationsGroupAssociatedItemTypeEnumValues = []AnnotationsGroupAssociatedItemType{
	"APPLICATION",
	"DATABASE",
	"CONTAINER",
	"LIFECYCLE",
	"ENVIRONMENT",
	"CLUSTER",
	"CRON",
}

func (v *AnnotationsGroupAssociatedItemType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := AnnotationsGroupAssociatedItemType(value)
	for _, existing := range AllowedAnnotationsGroupAssociatedItemTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid AnnotationsGroupAssociatedItemType", value)
}

// NewAnnotationsGroupAssociatedItemTypeFromValue returns a pointer to a valid AnnotationsGroupAssociatedItemType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewAnnotationsGroupAssociatedItemTypeFromValue(v string) (*AnnotationsGroupAssociatedItemType, error) {
	ev := AnnotationsGroupAssociatedItemType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for AnnotationsGroupAssociatedItemType: valid values are %v", v, AllowedAnnotationsGroupAssociatedItemTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v AnnotationsGroupAssociatedItemType) IsValid() bool {
	for _, existing := range AllowedAnnotationsGroupAssociatedItemTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to AnnotationsGroupAssociatedItemType value
func (v AnnotationsGroupAssociatedItemType) Ptr() *AnnotationsGroupAssociatedItemType {
	return &v
}

type NullableAnnotationsGroupAssociatedItemType struct {
	value *AnnotationsGroupAssociatedItemType
	isSet bool
}

func (v NullableAnnotationsGroupAssociatedItemType) Get() *AnnotationsGroupAssociatedItemType {
	return v.value
}

func (v *NullableAnnotationsGroupAssociatedItemType) Set(val *AnnotationsGroupAssociatedItemType) {
	v.value = val
	v.isSet = true
}

func (v NullableAnnotationsGroupAssociatedItemType) IsSet() bool {
	return v.isSet
}

func (v *NullableAnnotationsGroupAssociatedItemType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAnnotationsGroupAssociatedItemType(val *AnnotationsGroupAssociatedItemType) *NullableAnnotationsGroupAssociatedItemType {
	return &NullableAnnotationsGroupAssociatedItemType{value: val, isSet: true}
}

func (v NullableAnnotationsGroupAssociatedItemType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAnnotationsGroupAssociatedItemType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
