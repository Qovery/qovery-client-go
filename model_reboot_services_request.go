/*
Qovery API

- Qovery is the fastest way to deploy your full-stack apps on any Cloud provider. - ℹ️ The API is stable and still in development.

API version: 1.0.4
Contact: support+api+documentation@qovery.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package qovery

import (
	"encoding/json"
)

// checks if the RebootServicesRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RebootServicesRequest{}

// RebootServicesRequest struct for RebootServicesRequest
type RebootServicesRequest struct {
	ApplicationIds       []string `json:"application_ids,omitempty"`
	DatabaseIds          []string `json:"database_ids,omitempty"`
	ContainerIds         []string `json:"container_ids,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _RebootServicesRequest RebootServicesRequest

// NewRebootServicesRequest instantiates a new RebootServicesRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRebootServicesRequest() *RebootServicesRequest {
	this := RebootServicesRequest{}
	return &this
}

// NewRebootServicesRequestWithDefaults instantiates a new RebootServicesRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRebootServicesRequestWithDefaults() *RebootServicesRequest {
	this := RebootServicesRequest{}
	return &this
}

// GetApplicationIds returns the ApplicationIds field value if set, zero value otherwise.
func (o *RebootServicesRequest) GetApplicationIds() []string {
	if o == nil || IsNil(o.ApplicationIds) {
		var ret []string
		return ret
	}
	return o.ApplicationIds
}

// GetApplicationIdsOk returns a tuple with the ApplicationIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RebootServicesRequest) GetApplicationIdsOk() ([]string, bool) {
	if o == nil || IsNil(o.ApplicationIds) {
		return nil, false
	}
	return o.ApplicationIds, true
}

// HasApplicationIds returns a boolean if a field has been set.
func (o *RebootServicesRequest) HasApplicationIds() bool {
	if o != nil && !IsNil(o.ApplicationIds) {
		return true
	}

	return false
}

// SetApplicationIds gets a reference to the given []string and assigns it to the ApplicationIds field.
func (o *RebootServicesRequest) SetApplicationIds(v []string) {
	o.ApplicationIds = v
}

// GetDatabaseIds returns the DatabaseIds field value if set, zero value otherwise.
func (o *RebootServicesRequest) GetDatabaseIds() []string {
	if o == nil || IsNil(o.DatabaseIds) {
		var ret []string
		return ret
	}
	return o.DatabaseIds
}

// GetDatabaseIdsOk returns a tuple with the DatabaseIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RebootServicesRequest) GetDatabaseIdsOk() ([]string, bool) {
	if o == nil || IsNil(o.DatabaseIds) {
		return nil, false
	}
	return o.DatabaseIds, true
}

// HasDatabaseIds returns a boolean if a field has been set.
func (o *RebootServicesRequest) HasDatabaseIds() bool {
	if o != nil && !IsNil(o.DatabaseIds) {
		return true
	}

	return false
}

// SetDatabaseIds gets a reference to the given []string and assigns it to the DatabaseIds field.
func (o *RebootServicesRequest) SetDatabaseIds(v []string) {
	o.DatabaseIds = v
}

// GetContainerIds returns the ContainerIds field value if set, zero value otherwise.
func (o *RebootServicesRequest) GetContainerIds() []string {
	if o == nil || IsNil(o.ContainerIds) {
		var ret []string
		return ret
	}
	return o.ContainerIds
}

// GetContainerIdsOk returns a tuple with the ContainerIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RebootServicesRequest) GetContainerIdsOk() ([]string, bool) {
	if o == nil || IsNil(o.ContainerIds) {
		return nil, false
	}
	return o.ContainerIds, true
}

// HasContainerIds returns a boolean if a field has been set.
func (o *RebootServicesRequest) HasContainerIds() bool {
	if o != nil && !IsNil(o.ContainerIds) {
		return true
	}

	return false
}

// SetContainerIds gets a reference to the given []string and assigns it to the ContainerIds field.
func (o *RebootServicesRequest) SetContainerIds(v []string) {
	o.ContainerIds = v
}

func (o RebootServicesRequest) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RebootServicesRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ApplicationIds) {
		toSerialize["application_ids"] = o.ApplicationIds
	}
	if !IsNil(o.DatabaseIds) {
		toSerialize["database_ids"] = o.DatabaseIds
	}
	if !IsNil(o.ContainerIds) {
		toSerialize["container_ids"] = o.ContainerIds
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *RebootServicesRequest) UnmarshalJSON(data []byte) (err error) {
	varRebootServicesRequest := _RebootServicesRequest{}

	err = json.Unmarshal(data, &varRebootServicesRequest)

	if err != nil {
		return err
	}

	*o = RebootServicesRequest(varRebootServicesRequest)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "application_ids")
		delete(additionalProperties, "database_ids")
		delete(additionalProperties, "container_ids")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableRebootServicesRequest struct {
	value *RebootServicesRequest
	isSet bool
}

func (v NullableRebootServicesRequest) Get() *RebootServicesRequest {
	return v.value
}

func (v *NullableRebootServicesRequest) Set(val *RebootServicesRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableRebootServicesRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableRebootServicesRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRebootServicesRequest(val *RebootServicesRequest) *NullableRebootServicesRequest {
	return &NullableRebootServicesRequest{value: val, isSet: true}
}

func (v NullableRebootServicesRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRebootServicesRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
