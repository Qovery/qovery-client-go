/*
Qovery API

- Qovery is the fastest way to deploy your full-stack apps on any Cloud provider. - ℹ️ The API is stable and still in development.

API version: 1.0.3
Contact: support+api+documentation@qovery.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package qovery

import (
	"encoding/json"
)

// checks if the ProbeType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ProbeType{}

// ProbeType struct for ProbeType
type ProbeType struct {
	Tcp                  *ProbeTypeTcp  `json:"tcp,omitempty"`
	Http                 *ProbeTypeHttp `json:"http,omitempty"`
	Exec                 *ProbeTypeExec `json:"exec,omitempty"`
	Grpc                 *ProbeTypeGrpc `json:"grpc,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _ProbeType ProbeType

// NewProbeType instantiates a new ProbeType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewProbeType() *ProbeType {
	this := ProbeType{}
	return &this
}

// NewProbeTypeWithDefaults instantiates a new ProbeType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewProbeTypeWithDefaults() *ProbeType {
	this := ProbeType{}
	return &this
}

// GetTcp returns the Tcp field value if set, zero value otherwise.
func (o *ProbeType) GetTcp() ProbeTypeTcp {
	if o == nil || IsNil(o.Tcp) {
		var ret ProbeTypeTcp
		return ret
	}
	return *o.Tcp
}

// GetTcpOk returns a tuple with the Tcp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProbeType) GetTcpOk() (*ProbeTypeTcp, bool) {
	if o == nil || IsNil(o.Tcp) {
		return nil, false
	}
	return o.Tcp, true
}

// HasTcp returns a boolean if a field has been set.
func (o *ProbeType) HasTcp() bool {
	if o != nil && !IsNil(o.Tcp) {
		return true
	}

	return false
}

// SetTcp gets a reference to the given ProbeTypeTcp and assigns it to the Tcp field.
func (o *ProbeType) SetTcp(v ProbeTypeTcp) {
	o.Tcp = &v
}

// GetHttp returns the Http field value if set, zero value otherwise.
func (o *ProbeType) GetHttp() ProbeTypeHttp {
	if o == nil || IsNil(o.Http) {
		var ret ProbeTypeHttp
		return ret
	}
	return *o.Http
}

// GetHttpOk returns a tuple with the Http field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProbeType) GetHttpOk() (*ProbeTypeHttp, bool) {
	if o == nil || IsNil(o.Http) {
		return nil, false
	}
	return o.Http, true
}

// HasHttp returns a boolean if a field has been set.
func (o *ProbeType) HasHttp() bool {
	if o != nil && !IsNil(o.Http) {
		return true
	}

	return false
}

// SetHttp gets a reference to the given ProbeTypeHttp and assigns it to the Http field.
func (o *ProbeType) SetHttp(v ProbeTypeHttp) {
	o.Http = &v
}

// GetExec returns the Exec field value if set, zero value otherwise.
func (o *ProbeType) GetExec() ProbeTypeExec {
	if o == nil || IsNil(o.Exec) {
		var ret ProbeTypeExec
		return ret
	}
	return *o.Exec
}

// GetExecOk returns a tuple with the Exec field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProbeType) GetExecOk() (*ProbeTypeExec, bool) {
	if o == nil || IsNil(o.Exec) {
		return nil, false
	}
	return o.Exec, true
}

// HasExec returns a boolean if a field has been set.
func (o *ProbeType) HasExec() bool {
	if o != nil && !IsNil(o.Exec) {
		return true
	}

	return false
}

// SetExec gets a reference to the given ProbeTypeExec and assigns it to the Exec field.
func (o *ProbeType) SetExec(v ProbeTypeExec) {
	o.Exec = &v
}

// GetGrpc returns the Grpc field value if set, zero value otherwise.
func (o *ProbeType) GetGrpc() ProbeTypeGrpc {
	if o == nil || IsNil(o.Grpc) {
		var ret ProbeTypeGrpc
		return ret
	}
	return *o.Grpc
}

// GetGrpcOk returns a tuple with the Grpc field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProbeType) GetGrpcOk() (*ProbeTypeGrpc, bool) {
	if o == nil || IsNil(o.Grpc) {
		return nil, false
	}
	return o.Grpc, true
}

// HasGrpc returns a boolean if a field has been set.
func (o *ProbeType) HasGrpc() bool {
	if o != nil && !IsNil(o.Grpc) {
		return true
	}

	return false
}

// SetGrpc gets a reference to the given ProbeTypeGrpc and assigns it to the Grpc field.
func (o *ProbeType) SetGrpc(v ProbeTypeGrpc) {
	o.Grpc = &v
}

func (o ProbeType) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ProbeType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Tcp) {
		toSerialize["tcp"] = o.Tcp
	}
	if !IsNil(o.Http) {
		toSerialize["http"] = o.Http
	}
	if !IsNil(o.Exec) {
		toSerialize["exec"] = o.Exec
	}
	if !IsNil(o.Grpc) {
		toSerialize["grpc"] = o.Grpc
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *ProbeType) UnmarshalJSON(data []byte) (err error) {
	varProbeType := _ProbeType{}

	err = json.Unmarshal(data, &varProbeType)

	if err != nil {
		return err
	}

	*o = ProbeType(varProbeType)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "tcp")
		delete(additionalProperties, "http")
		delete(additionalProperties, "exec")
		delete(additionalProperties, "grpc")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableProbeType struct {
	value *ProbeType
	isSet bool
}

func (v NullableProbeType) Get() *ProbeType {
	return v.value
}

func (v *NullableProbeType) Set(val *ProbeType) {
	v.value = val
	v.isSet = true
}

func (v NullableProbeType) IsSet() bool {
	return v.isSet
}

func (v *NullableProbeType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableProbeType(val *ProbeType) *NullableProbeType {
	return &NullableProbeType{value: val, isSet: true}
}

func (v NullableProbeType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableProbeType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
