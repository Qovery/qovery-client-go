/*
Qovery API

- Qovery is the fastest way to deploy your full-stack apps on any Cloud provider. - ℹ️ The API is stable and still in development.

API version: 1.0.4
Contact: support+api+documentation@qovery.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package qovery

import (
	"encoding/json"
	"fmt"
)

// checks if the CreateEnvironmentRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CreateEnvironmentRequest{}

// CreateEnvironmentRequest struct for CreateEnvironmentRequest
type CreateEnvironmentRequest struct {
	// name is case insensitive
	Name                 string                     `json:"name"`
	Cluster              *string                    `json:"cluster,omitempty"`
	Mode                 *CreateEnvironmentModeEnum `json:"mode,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _CreateEnvironmentRequest CreateEnvironmentRequest

// NewCreateEnvironmentRequest instantiates a new CreateEnvironmentRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCreateEnvironmentRequest(name string) *CreateEnvironmentRequest {
	this := CreateEnvironmentRequest{}
	this.Name = name
	return &this
}

// NewCreateEnvironmentRequestWithDefaults instantiates a new CreateEnvironmentRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCreateEnvironmentRequestWithDefaults() *CreateEnvironmentRequest {
	this := CreateEnvironmentRequest{}
	return &this
}

// GetName returns the Name field value
func (o *CreateEnvironmentRequest) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *CreateEnvironmentRequest) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *CreateEnvironmentRequest) SetName(v string) {
	o.Name = v
}

// GetCluster returns the Cluster field value if set, zero value otherwise.
func (o *CreateEnvironmentRequest) GetCluster() string {
	if o == nil || IsNil(o.Cluster) {
		var ret string
		return ret
	}
	return *o.Cluster
}

// GetClusterOk returns a tuple with the Cluster field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateEnvironmentRequest) GetClusterOk() (*string, bool) {
	if o == nil || IsNil(o.Cluster) {
		return nil, false
	}
	return o.Cluster, true
}

// HasCluster returns a boolean if a field has been set.
func (o *CreateEnvironmentRequest) HasCluster() bool {
	if o != nil && !IsNil(o.Cluster) {
		return true
	}

	return false
}

// SetCluster gets a reference to the given string and assigns it to the Cluster field.
func (o *CreateEnvironmentRequest) SetCluster(v string) {
	o.Cluster = &v
}

// GetMode returns the Mode field value if set, zero value otherwise.
func (o *CreateEnvironmentRequest) GetMode() CreateEnvironmentModeEnum {
	if o == nil || IsNil(o.Mode) {
		var ret CreateEnvironmentModeEnum
		return ret
	}
	return *o.Mode
}

// GetModeOk returns a tuple with the Mode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateEnvironmentRequest) GetModeOk() (*CreateEnvironmentModeEnum, bool) {
	if o == nil || IsNil(o.Mode) {
		return nil, false
	}
	return o.Mode, true
}

// HasMode returns a boolean if a field has been set.
func (o *CreateEnvironmentRequest) HasMode() bool {
	if o != nil && !IsNil(o.Mode) {
		return true
	}

	return false
}

// SetMode gets a reference to the given CreateEnvironmentModeEnum and assigns it to the Mode field.
func (o *CreateEnvironmentRequest) SetMode(v CreateEnvironmentModeEnum) {
	o.Mode = &v
}

func (o CreateEnvironmentRequest) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CreateEnvironmentRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["name"] = o.Name
	if !IsNil(o.Cluster) {
		toSerialize["cluster"] = o.Cluster
	}
	if !IsNil(o.Mode) {
		toSerialize["mode"] = o.Mode
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *CreateEnvironmentRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"name",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCreateEnvironmentRequest := _CreateEnvironmentRequest{}

	err = json.Unmarshal(data, &varCreateEnvironmentRequest)

	if err != nil {
		return err
	}

	*o = CreateEnvironmentRequest(varCreateEnvironmentRequest)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "name")
		delete(additionalProperties, "cluster")
		delete(additionalProperties, "mode")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableCreateEnvironmentRequest struct {
	value *CreateEnvironmentRequest
	isSet bool
}

func (v NullableCreateEnvironmentRequest) Get() *CreateEnvironmentRequest {
	return v.value
}

func (v *NullableCreateEnvironmentRequest) Set(val *CreateEnvironmentRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableCreateEnvironmentRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableCreateEnvironmentRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCreateEnvironmentRequest(val *CreateEnvironmentRequest) *NullableCreateEnvironmentRequest {
	return &NullableCreateEnvironmentRequest{value: val, isSet: true}
}

func (v NullableCreateEnvironmentRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCreateEnvironmentRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
