/*
Qovery API

- Qovery is the fastest way to deploy your full-stack apps on any Cloud provider. - ℹ️ The API is stable and still in development.

API version: 1.0.3
Contact: support+api+documentation@qovery.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package qovery

import (
	"encoding/json"
	"fmt"
	"time"
)

// checks if the EnvironmentLogs type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &EnvironmentLogs{}

// EnvironmentLogs struct for EnvironmentLogs
type EnvironmentLogs struct {
	Type                 string                  `json:"type"`
	Timestamp            time.Time               `json:"timestamp"`
	Details              EnvironmentLogsDetails  `json:"details"`
	Error                *EnvironmentLogsError   `json:"error,omitempty"`
	Message              *EnvironmentLogsMessage `json:"message,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _EnvironmentLogs EnvironmentLogs

// NewEnvironmentLogs instantiates a new EnvironmentLogs object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEnvironmentLogs(type_ string, timestamp time.Time, details EnvironmentLogsDetails) *EnvironmentLogs {
	this := EnvironmentLogs{}
	this.Type = type_
	this.Timestamp = timestamp
	this.Details = details
	return &this
}

// NewEnvironmentLogsWithDefaults instantiates a new EnvironmentLogs object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEnvironmentLogsWithDefaults() *EnvironmentLogs {
	this := EnvironmentLogs{}
	return &this
}

// GetType returns the Type field value
func (o *EnvironmentLogs) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *EnvironmentLogs) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *EnvironmentLogs) SetType(v string) {
	o.Type = v
}

// GetTimestamp returns the Timestamp field value
func (o *EnvironmentLogs) GetTimestamp() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.Timestamp
}

// GetTimestampOk returns a tuple with the Timestamp field value
// and a boolean to check if the value has been set.
func (o *EnvironmentLogs) GetTimestampOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Timestamp, true
}

// SetTimestamp sets field value
func (o *EnvironmentLogs) SetTimestamp(v time.Time) {
	o.Timestamp = v
}

// GetDetails returns the Details field value
func (o *EnvironmentLogs) GetDetails() EnvironmentLogsDetails {
	if o == nil {
		var ret EnvironmentLogsDetails
		return ret
	}

	return o.Details
}

// GetDetailsOk returns a tuple with the Details field value
// and a boolean to check if the value has been set.
func (o *EnvironmentLogs) GetDetailsOk() (*EnvironmentLogsDetails, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Details, true
}

// SetDetails sets field value
func (o *EnvironmentLogs) SetDetails(v EnvironmentLogsDetails) {
	o.Details = v
}

// GetError returns the Error field value if set, zero value otherwise.
func (o *EnvironmentLogs) GetError() EnvironmentLogsError {
	if o == nil || IsNil(o.Error) {
		var ret EnvironmentLogsError
		return ret
	}
	return *o.Error
}

// GetErrorOk returns a tuple with the Error field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EnvironmentLogs) GetErrorOk() (*EnvironmentLogsError, bool) {
	if o == nil || IsNil(o.Error) {
		return nil, false
	}
	return o.Error, true
}

// HasError returns a boolean if a field has been set.
func (o *EnvironmentLogs) HasError() bool {
	if o != nil && !IsNil(o.Error) {
		return true
	}

	return false
}

// SetError gets a reference to the given EnvironmentLogsError and assigns it to the Error field.
func (o *EnvironmentLogs) SetError(v EnvironmentLogsError) {
	o.Error = &v
}

// GetMessage returns the Message field value if set, zero value otherwise.
func (o *EnvironmentLogs) GetMessage() EnvironmentLogsMessage {
	if o == nil || IsNil(o.Message) {
		var ret EnvironmentLogsMessage
		return ret
	}
	return *o.Message
}

// GetMessageOk returns a tuple with the Message field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EnvironmentLogs) GetMessageOk() (*EnvironmentLogsMessage, bool) {
	if o == nil || IsNil(o.Message) {
		return nil, false
	}
	return o.Message, true
}

// HasMessage returns a boolean if a field has been set.
func (o *EnvironmentLogs) HasMessage() bool {
	if o != nil && !IsNil(o.Message) {
		return true
	}

	return false
}

// SetMessage gets a reference to the given EnvironmentLogsMessage and assigns it to the Message field.
func (o *EnvironmentLogs) SetMessage(v EnvironmentLogsMessage) {
	o.Message = &v
}

func (o EnvironmentLogs) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o EnvironmentLogs) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["type"] = o.Type
	toSerialize["timestamp"] = o.Timestamp
	toSerialize["details"] = o.Details
	if !IsNil(o.Error) {
		toSerialize["error"] = o.Error
	}
	if !IsNil(o.Message) {
		toSerialize["message"] = o.Message
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *EnvironmentLogs) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"type",
		"timestamp",
		"details",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varEnvironmentLogs := _EnvironmentLogs{}

	err = json.Unmarshal(data, &varEnvironmentLogs)

	if err != nil {
		return err
	}

	*o = EnvironmentLogs(varEnvironmentLogs)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "type")
		delete(additionalProperties, "timestamp")
		delete(additionalProperties, "details")
		delete(additionalProperties, "error")
		delete(additionalProperties, "message")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableEnvironmentLogs struct {
	value *EnvironmentLogs
	isSet bool
}

func (v NullableEnvironmentLogs) Get() *EnvironmentLogs {
	return v.value
}

func (v *NullableEnvironmentLogs) Set(val *EnvironmentLogs) {
	v.value = val
	v.isSet = true
}

func (v NullableEnvironmentLogs) IsSet() bool {
	return v.isSet
}

func (v *NullableEnvironmentLogs) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEnvironmentLogs(val *EnvironmentLogs) *NullableEnvironmentLogs {
	return &NullableEnvironmentLogs{value: val, isSet: true}
}

func (v NullableEnvironmentLogs) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEnvironmentLogs) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
