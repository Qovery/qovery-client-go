/*
Qovery API

- Qovery is the fastest way to deploy your full-stack apps on any Cloud provider. - ℹ️ The API is stable and still in development.

API version: 1.0.3
Contact: support+api+documentation@qovery.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package qovery

import (
	"encoding/json"
	"fmt"
)

// DeploymentRestrictionModeEnum Match mode will rebuild app only if specified items are updated. Exclude mode will not rebuild app if specified items are updated.
type DeploymentRestrictionModeEnum string

// List of DeploymentRestrictionModeEnum
const (
	DEPLOYMENTRESTRICTIONMODEENUM_EXCLUDE DeploymentRestrictionModeEnum = "EXCLUDE"
	DEPLOYMENTRESTRICTIONMODEENUM_MATCH   DeploymentRestrictionModeEnum = "MATCH"
)

// All allowed values of DeploymentRestrictionModeEnum enum
var AllowedDeploymentRestrictionModeEnumEnumValues = []DeploymentRestrictionModeEnum{
	"EXCLUDE",
	"MATCH",
}

func (v *DeploymentRestrictionModeEnum) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := DeploymentRestrictionModeEnum(value)
	for _, existing := range AllowedDeploymentRestrictionModeEnumEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid DeploymentRestrictionModeEnum", value)
}

// NewDeploymentRestrictionModeEnumFromValue returns a pointer to a valid DeploymentRestrictionModeEnum
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewDeploymentRestrictionModeEnumFromValue(v string) (*DeploymentRestrictionModeEnum, error) {
	ev := DeploymentRestrictionModeEnum(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for DeploymentRestrictionModeEnum: valid values are %v", v, AllowedDeploymentRestrictionModeEnumEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v DeploymentRestrictionModeEnum) IsValid() bool {
	for _, existing := range AllowedDeploymentRestrictionModeEnumEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to DeploymentRestrictionModeEnum value
func (v DeploymentRestrictionModeEnum) Ptr() *DeploymentRestrictionModeEnum {
	return &v
}

type NullableDeploymentRestrictionModeEnum struct {
	value *DeploymentRestrictionModeEnum
	isSet bool
}

func (v NullableDeploymentRestrictionModeEnum) Get() *DeploymentRestrictionModeEnum {
	return v.value
}

func (v *NullableDeploymentRestrictionModeEnum) Set(val *DeploymentRestrictionModeEnum) {
	v.value = val
	v.isSet = true
}

func (v NullableDeploymentRestrictionModeEnum) IsSet() bool {
	return v.isSet
}

func (v *NullableDeploymentRestrictionModeEnum) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDeploymentRestrictionModeEnum(val *DeploymentRestrictionModeEnum) *NullableDeploymentRestrictionModeEnum {
	return &NullableDeploymentRestrictionModeEnum{value: val, isSet: true}
}

func (v NullableDeploymentRestrictionModeEnum) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDeploymentRestrictionModeEnum) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
