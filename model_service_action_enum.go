/*
Qovery API

- Qovery is the fastest way to deploy your full-stack apps on any Cloud provider. - ℹ️ The API is stable and still in development.

API version: 1.0.4
Contact: support+api+documentation@qovery.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package qovery

import (
	"encoding/json"
	"fmt"
)

// ServiceActionEnum the model 'ServiceActionEnum'
type ServiceActionEnum string

// List of ServiceActionEnum
const (
	SERVICEACTIONENUM_DEPLOY  ServiceActionEnum = "DEPLOY"
	SERVICEACTIONENUM_DELETE  ServiceActionEnum = "DELETE"
	SERVICEACTIONENUM_RESTART ServiceActionEnum = "RESTART"
	SERVICEACTIONENUM_STOP    ServiceActionEnum = "STOP"
	SERVICEACTIONENUM_UNKNOWN ServiceActionEnum = "UNKNOWN"
)

// All allowed values of ServiceActionEnum enum
var AllowedServiceActionEnumEnumValues = []ServiceActionEnum{
	"DEPLOY",
	"DELETE",
	"RESTART",
	"STOP",
	"UNKNOWN",
}

func (v *ServiceActionEnum) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ServiceActionEnum(value)
	for _, existing := range AllowedServiceActionEnumEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ServiceActionEnum", value)
}

// NewServiceActionEnumFromValue returns a pointer to a valid ServiceActionEnum
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewServiceActionEnumFromValue(v string) (*ServiceActionEnum, error) {
	ev := ServiceActionEnum(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ServiceActionEnum: valid values are %v", v, AllowedServiceActionEnumEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ServiceActionEnum) IsValid() bool {
	for _, existing := range AllowedServiceActionEnumEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to ServiceActionEnum value
func (v ServiceActionEnum) Ptr() *ServiceActionEnum {
	return &v
}

type NullableServiceActionEnum struct {
	value *ServiceActionEnum
	isSet bool
}

func (v NullableServiceActionEnum) Get() *ServiceActionEnum {
	return v.value
}

func (v *NullableServiceActionEnum) Set(val *ServiceActionEnum) {
	v.value = val
	v.isSet = true
}

func (v NullableServiceActionEnum) IsSet() bool {
	return v.isSet
}

func (v *NullableServiceActionEnum) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableServiceActionEnum(val *ServiceActionEnum) *NullableServiceActionEnum {
	return &NullableServiceActionEnum{value: val, isSet: true}
}

func (v NullableServiceActionEnum) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableServiceActionEnum) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
