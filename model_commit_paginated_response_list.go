/*
Qovery API

- Qovery is the fastest way to deploy your full-stack apps on any Cloud provider. - ℹ️ The API is stable and still in development.

API version: 1.0.3
Contact: support+api+documentation@qovery.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package qovery

import (
	"encoding/json"
	"fmt"
)

// checks if the CommitPaginatedResponseList type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CommitPaginatedResponseList{}

// CommitPaginatedResponseList struct for CommitPaginatedResponseList
type CommitPaginatedResponseList struct {
	Page                 float32  `json:"page"`
	PageSize             float32  `json:"page_size"`
	Results              []Commit `json:"results,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _CommitPaginatedResponseList CommitPaginatedResponseList

// NewCommitPaginatedResponseList instantiates a new CommitPaginatedResponseList object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCommitPaginatedResponseList(page float32, pageSize float32) *CommitPaginatedResponseList {
	this := CommitPaginatedResponseList{}
	this.Page = page
	this.PageSize = pageSize
	return &this
}

// NewCommitPaginatedResponseListWithDefaults instantiates a new CommitPaginatedResponseList object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCommitPaginatedResponseListWithDefaults() *CommitPaginatedResponseList {
	this := CommitPaginatedResponseList{}
	return &this
}

// GetPage returns the Page field value
func (o *CommitPaginatedResponseList) GetPage() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.Page
}

// GetPageOk returns a tuple with the Page field value
// and a boolean to check if the value has been set.
func (o *CommitPaginatedResponseList) GetPageOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Page, true
}

// SetPage sets field value
func (o *CommitPaginatedResponseList) SetPage(v float32) {
	o.Page = v
}

// GetPageSize returns the PageSize field value
func (o *CommitPaginatedResponseList) GetPageSize() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.PageSize
}

// GetPageSizeOk returns a tuple with the PageSize field value
// and a boolean to check if the value has been set.
func (o *CommitPaginatedResponseList) GetPageSizeOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.PageSize, true
}

// SetPageSize sets field value
func (o *CommitPaginatedResponseList) SetPageSize(v float32) {
	o.PageSize = v
}

// GetResults returns the Results field value if set, zero value otherwise.
func (o *CommitPaginatedResponseList) GetResults() []Commit {
	if o == nil || IsNil(o.Results) {
		var ret []Commit
		return ret
	}
	return o.Results
}

// GetResultsOk returns a tuple with the Results field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CommitPaginatedResponseList) GetResultsOk() ([]Commit, bool) {
	if o == nil || IsNil(o.Results) {
		return nil, false
	}
	return o.Results, true
}

// HasResults returns a boolean if a field has been set.
func (o *CommitPaginatedResponseList) HasResults() bool {
	if o != nil && !IsNil(o.Results) {
		return true
	}

	return false
}

// SetResults gets a reference to the given []Commit and assigns it to the Results field.
func (o *CommitPaginatedResponseList) SetResults(v []Commit) {
	o.Results = v
}

func (o CommitPaginatedResponseList) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CommitPaginatedResponseList) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["page"] = o.Page
	toSerialize["page_size"] = o.PageSize
	if !IsNil(o.Results) {
		toSerialize["results"] = o.Results
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *CommitPaginatedResponseList) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"page",
		"page_size",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCommitPaginatedResponseList := _CommitPaginatedResponseList{}

	err = json.Unmarshal(data, &varCommitPaginatedResponseList)

	if err != nil {
		return err
	}

	*o = CommitPaginatedResponseList(varCommitPaginatedResponseList)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "page")
		delete(additionalProperties, "page_size")
		delete(additionalProperties, "results")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableCommitPaginatedResponseList struct {
	value *CommitPaginatedResponseList
	isSet bool
}

func (v NullableCommitPaginatedResponseList) Get() *CommitPaginatedResponseList {
	return v.value
}

func (v *NullableCommitPaginatedResponseList) Set(val *CommitPaginatedResponseList) {
	v.value = val
	v.isSet = true
}

func (v NullableCommitPaginatedResponseList) IsSet() bool {
	return v.isSet
}

func (v *NullableCommitPaginatedResponseList) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCommitPaginatedResponseList(val *CommitPaginatedResponseList) *NullableCommitPaginatedResponseList {
	return &NullableCommitPaginatedResponseList{value: val, isSet: true}
}

func (v NullableCommitPaginatedResponseList) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCommitPaginatedResponseList) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
