/*
Qovery API

- Qovery is the fastest way to deploy your full-stack apps on any Cloud provider. - ℹ️ The API is stable and still in development.

API version: 1.0.3
Contact: support+api+documentation@qovery.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package qovery

import (
	"encoding/json"
)

// MetricRestart struct for MetricRestart
type MetricRestart struct {
	Results []MetricRestartResultsInner `json:"results,omitempty"`
}

// NewMetricRestart instantiates a new MetricRestart object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMetricRestart() *MetricRestart {
	this := MetricRestart{}
	return &this
}

// NewMetricRestartWithDefaults instantiates a new MetricRestart object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMetricRestartWithDefaults() *MetricRestart {
	this := MetricRestart{}
	return &this
}

// GetResults returns the Results field value if set, zero value otherwise.
func (o *MetricRestart) GetResults() []MetricRestartResultsInner {
	if o == nil || o.Results == nil {
		var ret []MetricRestartResultsInner
		return ret
	}
	return o.Results
}

// GetResultsOk returns a tuple with the Results field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MetricRestart) GetResultsOk() ([]MetricRestartResultsInner, bool) {
	if o == nil || o.Results == nil {
		return nil, false
	}
	return o.Results, true
}

// HasResults returns a boolean if a field has been set.
func (o *MetricRestart) HasResults() bool {
	if o != nil && o.Results != nil {
		return true
	}

	return false
}

// SetResults gets a reference to the given []MetricRestartResultsInner and assigns it to the Results field.
func (o *MetricRestart) SetResults(v []MetricRestartResultsInner) {
	o.Results = v
}

func (o MetricRestart) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Results != nil {
		toSerialize["results"] = o.Results
	}
	return json.Marshal(toSerialize)
}

type NullableMetricRestart struct {
	value *MetricRestart
	isSet bool
}

func (v NullableMetricRestart) Get() *MetricRestart {
	return v.value
}

func (v *NullableMetricRestart) Set(val *MetricRestart) {
	v.value = val
	v.isSet = true
}

func (v NullableMetricRestart) IsSet() bool {
	return v.isSet
}

func (v *NullableMetricRestart) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMetricRestart(val *MetricRestart) *NullableMetricRestart {
	return &NullableMetricRestart{value: val, isSet: true}
}

func (v NullableMetricRestart) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMetricRestart) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
