/*
Qovery API

- Qovery is the fastest way to deploy your full-stack apps on any Cloud provider. - ℹ️ The API is stable and still in development.

API version: 1.0.3
Contact: support+api+documentation@qovery.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package qovery

import (
	"encoding/json"
)

// checks if the HelmResponseAllOfSourceRepositoryRepository type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &HelmResponseAllOfSourceRepositoryRepository{}

// HelmResponseAllOfSourceRepositoryRepository struct for HelmResponseAllOfSourceRepositoryRepository
type HelmResponseAllOfSourceRepositoryRepository struct {
	// The id of the helm repository
	Id *string `json:"id,omitempty"`
	// The name of the helm repository
	Name *string `json:"name,omitempty"`
	// The url the helm repository
	Url *string `json:"url,omitempty"`
}

// NewHelmResponseAllOfSourceRepositoryRepository instantiates a new HelmResponseAllOfSourceRepositoryRepository object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewHelmResponseAllOfSourceRepositoryRepository() *HelmResponseAllOfSourceRepositoryRepository {
	this := HelmResponseAllOfSourceRepositoryRepository{}
	return &this
}

// NewHelmResponseAllOfSourceRepositoryRepositoryWithDefaults instantiates a new HelmResponseAllOfSourceRepositoryRepository object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewHelmResponseAllOfSourceRepositoryRepositoryWithDefaults() *HelmResponseAllOfSourceRepositoryRepository {
	this := HelmResponseAllOfSourceRepositoryRepository{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *HelmResponseAllOfSourceRepositoryRepository) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HelmResponseAllOfSourceRepositoryRepository) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *HelmResponseAllOfSourceRepositoryRepository) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *HelmResponseAllOfSourceRepositoryRepository) SetId(v string) {
	o.Id = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *HelmResponseAllOfSourceRepositoryRepository) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HelmResponseAllOfSourceRepositoryRepository) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *HelmResponseAllOfSourceRepositoryRepository) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *HelmResponseAllOfSourceRepositoryRepository) SetName(v string) {
	o.Name = &v
}

// GetUrl returns the Url field value if set, zero value otherwise.
func (o *HelmResponseAllOfSourceRepositoryRepository) GetUrl() string {
	if o == nil || IsNil(o.Url) {
		var ret string
		return ret
	}
	return *o.Url
}

// GetUrlOk returns a tuple with the Url field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HelmResponseAllOfSourceRepositoryRepository) GetUrlOk() (*string, bool) {
	if o == nil || IsNil(o.Url) {
		return nil, false
	}
	return o.Url, true
}

// HasUrl returns a boolean if a field has been set.
func (o *HelmResponseAllOfSourceRepositoryRepository) HasUrl() bool {
	if o != nil && !IsNil(o.Url) {
		return true
	}

	return false
}

// SetUrl gets a reference to the given string and assigns it to the Url field.
func (o *HelmResponseAllOfSourceRepositoryRepository) SetUrl(v string) {
	o.Url = &v
}

func (o HelmResponseAllOfSourceRepositoryRepository) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o HelmResponseAllOfSourceRepositoryRepository) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Url) {
		toSerialize["url"] = o.Url
	}
	return toSerialize, nil
}

type NullableHelmResponseAllOfSourceRepositoryRepository struct {
	value *HelmResponseAllOfSourceRepositoryRepository
	isSet bool
}

func (v NullableHelmResponseAllOfSourceRepositoryRepository) Get() *HelmResponseAllOfSourceRepositoryRepository {
	return v.value
}

func (v *NullableHelmResponseAllOfSourceRepositoryRepository) Set(val *HelmResponseAllOfSourceRepositoryRepository) {
	v.value = val
	v.isSet = true
}

func (v NullableHelmResponseAllOfSourceRepositoryRepository) IsSet() bool {
	return v.isSet
}

func (v *NullableHelmResponseAllOfSourceRepositoryRepository) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableHelmResponseAllOfSourceRepositoryRepository(val *HelmResponseAllOfSourceRepositoryRepository) *NullableHelmResponseAllOfSourceRepositoryRepository {
	return &NullableHelmResponseAllOfSourceRepositoryRepository{value: val, isSet: true}
}

func (v NullableHelmResponseAllOfSourceRepositoryRepository) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableHelmResponseAllOfSourceRepositoryRepository) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
