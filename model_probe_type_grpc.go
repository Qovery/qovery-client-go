/*
Qovery API

- Qovery is the fastest way to deploy your full-stack apps on any Cloud provider. - ℹ️ The API is stable and still in development.

API version: 1.0.3
Contact: support+api+documentation@qovery.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package qovery

import (
	"encoding/json"
)

// ProbeTypeGrpc struct for ProbeTypeGrpc
type ProbeTypeGrpc struct {
	Service NullableString `json:"service,omitempty"`
	Port    *int32         `json:"port,omitempty"`
}

// NewProbeTypeGrpc instantiates a new ProbeTypeGrpc object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewProbeTypeGrpc() *ProbeTypeGrpc {
	this := ProbeTypeGrpc{}
	return &this
}

// NewProbeTypeGrpcWithDefaults instantiates a new ProbeTypeGrpc object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewProbeTypeGrpcWithDefaults() *ProbeTypeGrpc {
	this := ProbeTypeGrpc{}
	return &this
}

// GetService returns the Service field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ProbeTypeGrpc) GetService() string {
	if o == nil || o.Service.Get() == nil {
		var ret string
		return ret
	}
	return *o.Service.Get()
}

// GetServiceOk returns a tuple with the Service field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ProbeTypeGrpc) GetServiceOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Service.Get(), o.Service.IsSet()
}

// HasService returns a boolean if a field has been set.
func (o *ProbeTypeGrpc) HasService() bool {
	if o != nil && o.Service.IsSet() {
		return true
	}

	return false
}

// SetService gets a reference to the given NullableString and assigns it to the Service field.
func (o *ProbeTypeGrpc) SetService(v string) {
	o.Service.Set(&v)
}

// SetServiceNil sets the value for Service to be an explicit nil
func (o *ProbeTypeGrpc) SetServiceNil() {
	o.Service.Set(nil)
}

// UnsetService ensures that no value is present for Service, not even an explicit nil
func (o *ProbeTypeGrpc) UnsetService() {
	o.Service.Unset()
}

// GetPort returns the Port field value if set, zero value otherwise.
func (o *ProbeTypeGrpc) GetPort() int32 {
	if o == nil || o.Port == nil {
		var ret int32
		return ret
	}
	return *o.Port
}

// GetPortOk returns a tuple with the Port field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProbeTypeGrpc) GetPortOk() (*int32, bool) {
	if o == nil || o.Port == nil {
		return nil, false
	}
	return o.Port, true
}

// HasPort returns a boolean if a field has been set.
func (o *ProbeTypeGrpc) HasPort() bool {
	if o != nil && o.Port != nil {
		return true
	}

	return false
}

// SetPort gets a reference to the given int32 and assigns it to the Port field.
func (o *ProbeTypeGrpc) SetPort(v int32) {
	o.Port = &v
}

func (o ProbeTypeGrpc) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Service.IsSet() {
		toSerialize["service"] = o.Service.Get()
	}
	if o.Port != nil {
		toSerialize["port"] = o.Port
	}
	return json.Marshal(toSerialize)
}

type NullableProbeTypeGrpc struct {
	value *ProbeTypeGrpc
	isSet bool
}

func (v NullableProbeTypeGrpc) Get() *ProbeTypeGrpc {
	return v.value
}

func (v *NullableProbeTypeGrpc) Set(val *ProbeTypeGrpc) {
	v.value = val
	v.isSet = true
}

func (v NullableProbeTypeGrpc) IsSet() bool {
	return v.isSet
}

func (v *NullableProbeTypeGrpc) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableProbeTypeGrpc(val *ProbeTypeGrpc) *NullableProbeTypeGrpc {
	return &NullableProbeTypeGrpc{value: val, isSet: true}
}

func (v NullableProbeTypeGrpc) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableProbeTypeGrpc) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
