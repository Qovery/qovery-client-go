/*
Qovery API

- Qovery is the fastest way to deploy your full-stack apps on any Cloud provider. - ℹ️ The API is stable and still in development.

API version: 1.0.3
Contact: support+api+documentation@qovery.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package qovery

import (
	"encoding/json"
	"fmt"
)

// checks if the HelmResponseAllOfSourceOneOf type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &HelmResponseAllOfSourceOneOf{}

// HelmResponseAllOfSourceOneOf struct for HelmResponseAllOfSourceOneOf
type HelmResponseAllOfSourceOneOf struct {
	Git                  HelmSourceGitResponse `json:"git"`
	AdditionalProperties map[string]interface{}
}

type _HelmResponseAllOfSourceOneOf HelmResponseAllOfSourceOneOf

// NewHelmResponseAllOfSourceOneOf instantiates a new HelmResponseAllOfSourceOneOf object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewHelmResponseAllOfSourceOneOf(git HelmSourceGitResponse) *HelmResponseAllOfSourceOneOf {
	this := HelmResponseAllOfSourceOneOf{}
	this.Git = git
	return &this
}

// NewHelmResponseAllOfSourceOneOfWithDefaults instantiates a new HelmResponseAllOfSourceOneOf object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewHelmResponseAllOfSourceOneOfWithDefaults() *HelmResponseAllOfSourceOneOf {
	this := HelmResponseAllOfSourceOneOf{}
	return &this
}

// GetGit returns the Git field value
func (o *HelmResponseAllOfSourceOneOf) GetGit() HelmSourceGitResponse {
	if o == nil {
		var ret HelmSourceGitResponse
		return ret
	}

	return o.Git
}

// GetGitOk returns a tuple with the Git field value
// and a boolean to check if the value has been set.
func (o *HelmResponseAllOfSourceOneOf) GetGitOk() (*HelmSourceGitResponse, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Git, true
}

// SetGit sets field value
func (o *HelmResponseAllOfSourceOneOf) SetGit(v HelmSourceGitResponse) {
	o.Git = v
}

func (o HelmResponseAllOfSourceOneOf) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o HelmResponseAllOfSourceOneOf) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["git"] = o.Git

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *HelmResponseAllOfSourceOneOf) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"git",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varHelmResponseAllOfSourceOneOf := _HelmResponseAllOfSourceOneOf{}

	err = json.Unmarshal(data, &varHelmResponseAllOfSourceOneOf)

	if err != nil {
		return err
	}

	*o = HelmResponseAllOfSourceOneOf(varHelmResponseAllOfSourceOneOf)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "git")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableHelmResponseAllOfSourceOneOf struct {
	value *HelmResponseAllOfSourceOneOf
	isSet bool
}

func (v NullableHelmResponseAllOfSourceOneOf) Get() *HelmResponseAllOfSourceOneOf {
	return v.value
}

func (v *NullableHelmResponseAllOfSourceOneOf) Set(val *HelmResponseAllOfSourceOneOf) {
	v.value = val
	v.isSet = true
}

func (v NullableHelmResponseAllOfSourceOneOf) IsSet() bool {
	return v.isSet
}

func (v *NullableHelmResponseAllOfSourceOneOf) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableHelmResponseAllOfSourceOneOf(val *HelmResponseAllOfSourceOneOf) *NullableHelmResponseAllOfSourceOneOf {
	return &NullableHelmResponseAllOfSourceOneOf{value: val, isSet: true}
}

func (v NullableHelmResponseAllOfSourceOneOf) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableHelmResponseAllOfSourceOneOf) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
