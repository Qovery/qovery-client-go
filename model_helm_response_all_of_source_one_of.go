/*
Qovery API

- Qovery is the fastest way to deploy your full-stack apps on any Cloud provider. - ℹ️ The API is stable and still in development.

API version: 1.0.3
Contact: support+api+documentation@qovery.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package qovery

import (
	"encoding/json"
)

// checks if the HelmResponseAllOfSourceOneOf type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &HelmResponseAllOfSourceOneOf{}

// HelmResponseAllOfSourceOneOf struct for HelmResponseAllOfSourceOneOf
type HelmResponseAllOfSourceOneOf struct {
	Git *HelmResponseAllOfSourceOneOfGit `json:"git,omitempty"`
}

// NewHelmResponseAllOfSourceOneOf instantiates a new HelmResponseAllOfSourceOneOf object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewHelmResponseAllOfSourceOneOf() *HelmResponseAllOfSourceOneOf {
	this := HelmResponseAllOfSourceOneOf{}
	return &this
}

// NewHelmResponseAllOfSourceOneOfWithDefaults instantiates a new HelmResponseAllOfSourceOneOf object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewHelmResponseAllOfSourceOneOfWithDefaults() *HelmResponseAllOfSourceOneOf {
	this := HelmResponseAllOfSourceOneOf{}
	return &this
}

// GetGit returns the Git field value if set, zero value otherwise.
func (o *HelmResponseAllOfSourceOneOf) GetGit() HelmResponseAllOfSourceOneOfGit {
	if o == nil || IsNil(o.Git) {
		var ret HelmResponseAllOfSourceOneOfGit
		return ret
	}
	return *o.Git
}

// GetGitOk returns a tuple with the Git field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HelmResponseAllOfSourceOneOf) GetGitOk() (*HelmResponseAllOfSourceOneOfGit, bool) {
	if o == nil || IsNil(o.Git) {
		return nil, false
	}
	return o.Git, true
}

// HasGit returns a boolean if a field has been set.
func (o *HelmResponseAllOfSourceOneOf) HasGit() bool {
	if o != nil && !IsNil(o.Git) {
		return true
	}

	return false
}

// SetGit gets a reference to the given HelmResponseAllOfSourceOneOfGit and assigns it to the Git field.
func (o *HelmResponseAllOfSourceOneOf) SetGit(v HelmResponseAllOfSourceOneOfGit) {
	o.Git = &v
}

func (o HelmResponseAllOfSourceOneOf) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o HelmResponseAllOfSourceOneOf) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Git) {
		toSerialize["git"] = o.Git
	}
	return toSerialize, nil
}

type NullableHelmResponseAllOfSourceOneOf struct {
	value *HelmResponseAllOfSourceOneOf
	isSet bool
}

func (v NullableHelmResponseAllOfSourceOneOf) Get() *HelmResponseAllOfSourceOneOf {
	return v.value
}

func (v *NullableHelmResponseAllOfSourceOneOf) Set(val *HelmResponseAllOfSourceOneOf) {
	v.value = val
	v.isSet = true
}

func (v NullableHelmResponseAllOfSourceOneOf) IsSet() bool {
	return v.isSet
}

func (v *NullableHelmResponseAllOfSourceOneOf) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableHelmResponseAllOfSourceOneOf(val *HelmResponseAllOfSourceOneOf) *NullableHelmResponseAllOfSourceOneOf {
	return &NullableHelmResponseAllOfSourceOneOf{value: val, isSet: true}
}

func (v NullableHelmResponseAllOfSourceOneOf) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableHelmResponseAllOfSourceOneOf) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
