/*
Qovery API

- Qovery is the fastest way to deploy your full-stack apps on any Cloud provider. - ℹ️ The API is stable and still in development.

API version: 1.0.3
Contact: support+api+documentation@qovery.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package qovery

import (
	"encoding/json"
	"fmt"
)

// AwsCredentialsRequest - struct for AwsCredentialsRequest
type AwsCredentialsRequest struct {
	AwsRoleCredentialsRequest   *AwsRoleCredentialsRequest
	AwsStaticCredentialsRequest *AwsStaticCredentialsRequest
}

// AwsRoleCredentialsRequestAsAwsCredentialsRequest is a convenience function that returns AwsRoleCredentialsRequest wrapped in AwsCredentialsRequest
func AwsRoleCredentialsRequestAsAwsCredentialsRequest(v *AwsRoleCredentialsRequest) AwsCredentialsRequest {
	return AwsCredentialsRequest{
		AwsRoleCredentialsRequest: v,
	}
}

// AwsStaticCredentialsRequestAsAwsCredentialsRequest is a convenience function that returns AwsStaticCredentialsRequest wrapped in AwsCredentialsRequest
func AwsStaticCredentialsRequestAsAwsCredentialsRequest(v *AwsStaticCredentialsRequest) AwsCredentialsRequest {
	return AwsCredentialsRequest{
		AwsStaticCredentialsRequest: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *AwsCredentialsRequest) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into AwsRoleCredentialsRequest
	err = json.Unmarshal(data, &dst.AwsRoleCredentialsRequest)
	if err == nil {
		jsonAwsRoleCredentialsRequest, _ := json.Marshal(dst.AwsRoleCredentialsRequest)
		if string(jsonAwsRoleCredentialsRequest) == "{}" { // empty struct
			dst.AwsRoleCredentialsRequest = nil
		} else {
			match++
		}
	} else {
		dst.AwsRoleCredentialsRequest = nil
	}

	// try to unmarshal data into AwsStaticCredentialsRequest
	err = json.Unmarshal(data, &dst.AwsStaticCredentialsRequest)
	if err == nil {
		jsonAwsStaticCredentialsRequest, _ := json.Marshal(dst.AwsStaticCredentialsRequest)
		if string(jsonAwsStaticCredentialsRequest) == "{}" { // empty struct
			dst.AwsStaticCredentialsRequest = nil
		} else {
			match++
		}
	} else {
		dst.AwsStaticCredentialsRequest = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.AwsRoleCredentialsRequest = nil
		dst.AwsStaticCredentialsRequest = nil

		return fmt.Errorf("data matches more than one schema in oneOf(AwsCredentialsRequest)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(AwsCredentialsRequest)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src AwsCredentialsRequest) MarshalJSON() ([]byte, error) {
	if src.AwsRoleCredentialsRequest != nil {
		return json.Marshal(&src.AwsRoleCredentialsRequest)
	}

	if src.AwsStaticCredentialsRequest != nil {
		return json.Marshal(&src.AwsStaticCredentialsRequest)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *AwsCredentialsRequest) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.AwsRoleCredentialsRequest != nil {
		return obj.AwsRoleCredentialsRequest
	}

	if obj.AwsStaticCredentialsRequest != nil {
		return obj.AwsStaticCredentialsRequest
	}

	// all schemas are nil
	return nil
}

type NullableAwsCredentialsRequest struct {
	value *AwsCredentialsRequest
	isSet bool
}

func (v NullableAwsCredentialsRequest) Get() *AwsCredentialsRequest {
	return v.value
}

func (v *NullableAwsCredentialsRequest) Set(val *AwsCredentialsRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableAwsCredentialsRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableAwsCredentialsRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAwsCredentialsRequest(val *AwsCredentialsRequest) *NullableAwsCredentialsRequest {
	return &NullableAwsCredentialsRequest{value: val, isSet: true}
}

func (v NullableAwsCredentialsRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAwsCredentialsRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
