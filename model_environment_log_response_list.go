/*
Qovery API

- Qovery is the fastest way to deploy your full-stack apps on any Cloud provider. - ℹ️ The API is stable and still in development.

API version: 1.0.4
Contact: support+api+documentation@qovery.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package qovery

import (
	"encoding/json"
)

// checks if the EnvironmentLogResponseList type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &EnvironmentLogResponseList{}

// EnvironmentLogResponseList struct for EnvironmentLogResponseList
type EnvironmentLogResponseList struct {
	Results              []EnvironmentLog `json:"results,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _EnvironmentLogResponseList EnvironmentLogResponseList

// NewEnvironmentLogResponseList instantiates a new EnvironmentLogResponseList object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEnvironmentLogResponseList() *EnvironmentLogResponseList {
	this := EnvironmentLogResponseList{}
	return &this
}

// NewEnvironmentLogResponseListWithDefaults instantiates a new EnvironmentLogResponseList object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEnvironmentLogResponseListWithDefaults() *EnvironmentLogResponseList {
	this := EnvironmentLogResponseList{}
	return &this
}

// GetResults returns the Results field value if set, zero value otherwise.
func (o *EnvironmentLogResponseList) GetResults() []EnvironmentLog {
	if o == nil || IsNil(o.Results) {
		var ret []EnvironmentLog
		return ret
	}
	return o.Results
}

// GetResultsOk returns a tuple with the Results field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EnvironmentLogResponseList) GetResultsOk() ([]EnvironmentLog, bool) {
	if o == nil || IsNil(o.Results) {
		return nil, false
	}
	return o.Results, true
}

// HasResults returns a boolean if a field has been set.
func (o *EnvironmentLogResponseList) HasResults() bool {
	if o != nil && !IsNil(o.Results) {
		return true
	}

	return false
}

// SetResults gets a reference to the given []EnvironmentLog and assigns it to the Results field.
func (o *EnvironmentLogResponseList) SetResults(v []EnvironmentLog) {
	o.Results = v
}

func (o EnvironmentLogResponseList) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o EnvironmentLogResponseList) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Results) {
		toSerialize["results"] = o.Results
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *EnvironmentLogResponseList) UnmarshalJSON(data []byte) (err error) {
	varEnvironmentLogResponseList := _EnvironmentLogResponseList{}

	err = json.Unmarshal(data, &varEnvironmentLogResponseList)

	if err != nil {
		return err
	}

	*o = EnvironmentLogResponseList(varEnvironmentLogResponseList)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "results")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableEnvironmentLogResponseList struct {
	value *EnvironmentLogResponseList
	isSet bool
}

func (v NullableEnvironmentLogResponseList) Get() *EnvironmentLogResponseList {
	return v.value
}

func (v *NullableEnvironmentLogResponseList) Set(val *EnvironmentLogResponseList) {
	v.value = val
	v.isSet = true
}

func (v NullableEnvironmentLogResponseList) IsSet() bool {
	return v.isSet
}

func (v *NullableEnvironmentLogResponseList) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEnvironmentLogResponseList(val *EnvironmentLogResponseList) *NullableEnvironmentLogResponseList {
	return &NullableEnvironmentLogResponseList{value: val, isSet: true}
}

func (v NullableEnvironmentLogResponseList) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEnvironmentLogResponseList) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
