/*
Qovery API

- Qovery is the fastest way to deploy your full-stack apps on any Cloud provider. - ℹ️ The API is stable and still in development.

API version: 1.0.3
Contact: support+api+documentation@qovery.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package qovery

import (
	"encoding/json"
	"fmt"
)

// CustomDomainStatusEnum the model 'CustomDomainStatusEnum'
type CustomDomainStatusEnum string

// List of CustomDomainStatusEnum
const (
	CUSTOMDOMAINSTATUSENUM_DEPLOYING CustomDomainStatusEnum = "deploying"
	CUSTOMDOMAINSTATUSENUM_CHECKING  CustomDomainStatusEnum = "checking"
	CUSTOMDOMAINSTATUSENUM_READY     CustomDomainStatusEnum = "ready"
	CUSTOMDOMAINSTATUSENUM_ERROR     CustomDomainStatusEnum = "error"
)

// All allowed values of CustomDomainStatusEnum enum
var AllowedCustomDomainStatusEnumEnumValues = []CustomDomainStatusEnum{
	"deploying",
	"checking",
	"ready",
	"error",
}

func (v *CustomDomainStatusEnum) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := CustomDomainStatusEnum(value)
	for _, existing := range AllowedCustomDomainStatusEnumEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid CustomDomainStatusEnum", value)
}

// NewCustomDomainStatusEnumFromValue returns a pointer to a valid CustomDomainStatusEnum
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewCustomDomainStatusEnumFromValue(v string) (*CustomDomainStatusEnum, error) {
	ev := CustomDomainStatusEnum(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for CustomDomainStatusEnum: valid values are %v", v, AllowedCustomDomainStatusEnumEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v CustomDomainStatusEnum) IsValid() bool {
	for _, existing := range AllowedCustomDomainStatusEnumEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to CustomDomainStatusEnum value
func (v CustomDomainStatusEnum) Ptr() *CustomDomainStatusEnum {
	return &v
}

type NullableCustomDomainStatusEnum struct {
	value *CustomDomainStatusEnum
	isSet bool
}

func (v NullableCustomDomainStatusEnum) Get() *CustomDomainStatusEnum {
	return v.value
}

func (v *NullableCustomDomainStatusEnum) Set(val *CustomDomainStatusEnum) {
	v.value = val
	v.isSet = true
}

func (v NullableCustomDomainStatusEnum) IsSet() bool {
	return v.isSet
}

func (v *NullableCustomDomainStatusEnum) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCustomDomainStatusEnum(val *CustomDomainStatusEnum) *NullableCustomDomainStatusEnum {
	return &NullableCustomDomainStatusEnum{value: val, isSet: true}
}

func (v NullableCustomDomainStatusEnum) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCustomDomainStatusEnum) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
