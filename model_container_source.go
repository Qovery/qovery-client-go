/*
Qovery API

- Qovery is the fastest way to deploy your full-stack apps on any Cloud provider. - ℹ️ The API is stable and still in development.

API version: 1.0.3
Contact: support+api+documentation@qovery.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package qovery

import (
	"encoding/json"
	"fmt"
)

// checks if the ContainerSource type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ContainerSource{}

// ContainerSource struct for ContainerSource
type ContainerSource struct {
	// The image name pattern differs according to chosen container registry provider: * `ECR`: `repository` * `SCALEWAY_CR`: `namespace/image` * `DOCKER_HUB`: `image` or `repository/image` * `PUBLIC_ECR`: `registry_alias/repository`
	ImageName string `json:"image_name"`
	// tag of the image container
	Tag string `json:"tag"`
	// tag of the image container
	RegistryId           *string                                  `json:"registry_id,omitempty"`
	Registry             ContainerRegistryProviderDetailsResponse `json:"registry"`
	AdditionalProperties map[string]interface{}
}

type _ContainerSource ContainerSource

// NewContainerSource instantiates a new ContainerSource object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewContainerSource(imageName string, tag string, registry ContainerRegistryProviderDetailsResponse) *ContainerSource {
	this := ContainerSource{}
	this.ImageName = imageName
	this.Tag = tag
	this.Registry = registry
	return &this
}

// NewContainerSourceWithDefaults instantiates a new ContainerSource object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewContainerSourceWithDefaults() *ContainerSource {
	this := ContainerSource{}
	return &this
}

// GetImageName returns the ImageName field value
func (o *ContainerSource) GetImageName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ImageName
}

// GetImageNameOk returns a tuple with the ImageName field value
// and a boolean to check if the value has been set.
func (o *ContainerSource) GetImageNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ImageName, true
}

// SetImageName sets field value
func (o *ContainerSource) SetImageName(v string) {
	o.ImageName = v
}

// GetTag returns the Tag field value
func (o *ContainerSource) GetTag() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Tag
}

// GetTagOk returns a tuple with the Tag field value
// and a boolean to check if the value has been set.
func (o *ContainerSource) GetTagOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Tag, true
}

// SetTag sets field value
func (o *ContainerSource) SetTag(v string) {
	o.Tag = v
}

// GetRegistryId returns the RegistryId field value if set, zero value otherwise.
func (o *ContainerSource) GetRegistryId() string {
	if o == nil || IsNil(o.RegistryId) {
		var ret string
		return ret
	}
	return *o.RegistryId
}

// GetRegistryIdOk returns a tuple with the RegistryId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ContainerSource) GetRegistryIdOk() (*string, bool) {
	if o == nil || IsNil(o.RegistryId) {
		return nil, false
	}
	return o.RegistryId, true
}

// HasRegistryId returns a boolean if a field has been set.
func (o *ContainerSource) HasRegistryId() bool {
	if o != nil && !IsNil(o.RegistryId) {
		return true
	}

	return false
}

// SetRegistryId gets a reference to the given string and assigns it to the RegistryId field.
func (o *ContainerSource) SetRegistryId(v string) {
	o.RegistryId = &v
}

// GetRegistry returns the Registry field value
func (o *ContainerSource) GetRegistry() ContainerRegistryProviderDetailsResponse {
	if o == nil {
		var ret ContainerRegistryProviderDetailsResponse
		return ret
	}

	return o.Registry
}

// GetRegistryOk returns a tuple with the Registry field value
// and a boolean to check if the value has been set.
func (o *ContainerSource) GetRegistryOk() (*ContainerRegistryProviderDetailsResponse, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Registry, true
}

// SetRegistry sets field value
func (o *ContainerSource) SetRegistry(v ContainerRegistryProviderDetailsResponse) {
	o.Registry = v
}

func (o ContainerSource) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ContainerSource) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["image_name"] = o.ImageName
	toSerialize["tag"] = o.Tag
	if !IsNil(o.RegistryId) {
		toSerialize["registry_id"] = o.RegistryId
	}
	toSerialize["registry"] = o.Registry

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *ContainerSource) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"image_name",
		"tag",
		"registry",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varContainerSource := _ContainerSource{}

	err = json.Unmarshal(data, &varContainerSource)

	if err != nil {
		return err
	}

	*o = ContainerSource(varContainerSource)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "image_name")
		delete(additionalProperties, "tag")
		delete(additionalProperties, "registry_id")
		delete(additionalProperties, "registry")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableContainerSource struct {
	value *ContainerSource
	isSet bool
}

func (v NullableContainerSource) Get() *ContainerSource {
	return v.value
}

func (v *NullableContainerSource) Set(val *ContainerSource) {
	v.value = val
	v.isSet = true
}

func (v NullableContainerSource) IsSet() bool {
	return v.isSet
}

func (v *NullableContainerSource) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableContainerSource(val *ContainerSource) *NullableContainerSource {
	return &NullableContainerSource{value: val, isSet: true}
}

func (v NullableContainerSource) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableContainerSource) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
