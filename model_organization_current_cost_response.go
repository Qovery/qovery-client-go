/*
[BETA] Qovery API

- Qovery is the fastest way to deploy your full-stack apps on any Cloud provider. - ℹ️ The API is in Beta and still in progress. Some endpoints are not available yet.  # Authentication  <!-- ReDoc-Inject: <security-definitions> -->

API version: 1.0.0
Contact: support+api+documentation@qovery.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package qovery

import (
	"encoding/json"
)

// OrganizationCurrentCostResponse struct for OrganizationCurrentCostResponse
type OrganizationCurrentCostResponse struct {
	Plan *string `json:"plan,omitempty"`
	// number of days remaining before the end of the trial period
	RemainingTrialDay *int32 `json:"remaining_trial_day,omitempty"`
	RemainingCredits *RemainingCredits `json:"remaining_credits,omitempty"`
	Cost *Cost `json:"cost,omitempty"`
	PaidUsage *PaidUsageResponse `json:"paid_usage,omitempty"`
	CommunityUsage *CommunityUsageResponse `json:"community_usage,omitempty"`
}

// NewOrganizationCurrentCostResponse instantiates a new OrganizationCurrentCostResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewOrganizationCurrentCostResponse() *OrganizationCurrentCostResponse {
	this := OrganizationCurrentCostResponse{}
	return &this
}

// NewOrganizationCurrentCostResponseWithDefaults instantiates a new OrganizationCurrentCostResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewOrganizationCurrentCostResponseWithDefaults() *OrganizationCurrentCostResponse {
	this := OrganizationCurrentCostResponse{}
	return &this
}

// GetPlan returns the Plan field value if set, zero value otherwise.
func (o *OrganizationCurrentCostResponse) GetPlan() string {
	if o == nil || o.Plan == nil {
		var ret string
		return ret
	}
	return *o.Plan
}

// GetPlanOk returns a tuple with the Plan field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrganizationCurrentCostResponse) GetPlanOk() (*string, bool) {
	if o == nil || o.Plan == nil {
		return nil, false
	}
	return o.Plan, true
}

// HasPlan returns a boolean if a field has been set.
func (o *OrganizationCurrentCostResponse) HasPlan() bool {
	if o != nil && o.Plan != nil {
		return true
	}

	return false
}

// SetPlan gets a reference to the given string and assigns it to the Plan field.
func (o *OrganizationCurrentCostResponse) SetPlan(v string) {
	o.Plan = &v
}

// GetRemainingTrialDay returns the RemainingTrialDay field value if set, zero value otherwise.
func (o *OrganizationCurrentCostResponse) GetRemainingTrialDay() int32 {
	if o == nil || o.RemainingTrialDay == nil {
		var ret int32
		return ret
	}
	return *o.RemainingTrialDay
}

// GetRemainingTrialDayOk returns a tuple with the RemainingTrialDay field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrganizationCurrentCostResponse) GetRemainingTrialDayOk() (*int32, bool) {
	if o == nil || o.RemainingTrialDay == nil {
		return nil, false
	}
	return o.RemainingTrialDay, true
}

// HasRemainingTrialDay returns a boolean if a field has been set.
func (o *OrganizationCurrentCostResponse) HasRemainingTrialDay() bool {
	if o != nil && o.RemainingTrialDay != nil {
		return true
	}

	return false
}

// SetRemainingTrialDay gets a reference to the given int32 and assigns it to the RemainingTrialDay field.
func (o *OrganizationCurrentCostResponse) SetRemainingTrialDay(v int32) {
	o.RemainingTrialDay = &v
}

// GetRemainingCredits returns the RemainingCredits field value if set, zero value otherwise.
func (o *OrganizationCurrentCostResponse) GetRemainingCredits() RemainingCredits {
	if o == nil || o.RemainingCredits == nil {
		var ret RemainingCredits
		return ret
	}
	return *o.RemainingCredits
}

// GetRemainingCreditsOk returns a tuple with the RemainingCredits field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrganizationCurrentCostResponse) GetRemainingCreditsOk() (*RemainingCredits, bool) {
	if o == nil || o.RemainingCredits == nil {
		return nil, false
	}
	return o.RemainingCredits, true
}

// HasRemainingCredits returns a boolean if a field has been set.
func (o *OrganizationCurrentCostResponse) HasRemainingCredits() bool {
	if o != nil && o.RemainingCredits != nil {
		return true
	}

	return false
}

// SetRemainingCredits gets a reference to the given RemainingCredits and assigns it to the RemainingCredits field.
func (o *OrganizationCurrentCostResponse) SetRemainingCredits(v RemainingCredits) {
	o.RemainingCredits = &v
}

// GetCost returns the Cost field value if set, zero value otherwise.
func (o *OrganizationCurrentCostResponse) GetCost() Cost {
	if o == nil || o.Cost == nil {
		var ret Cost
		return ret
	}
	return *o.Cost
}

// GetCostOk returns a tuple with the Cost field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrganizationCurrentCostResponse) GetCostOk() (*Cost, bool) {
	if o == nil || o.Cost == nil {
		return nil, false
	}
	return o.Cost, true
}

// HasCost returns a boolean if a field has been set.
func (o *OrganizationCurrentCostResponse) HasCost() bool {
	if o != nil && o.Cost != nil {
		return true
	}

	return false
}

// SetCost gets a reference to the given Cost and assigns it to the Cost field.
func (o *OrganizationCurrentCostResponse) SetCost(v Cost) {
	o.Cost = &v
}

// GetPaidUsage returns the PaidUsage field value if set, zero value otherwise.
func (o *OrganizationCurrentCostResponse) GetPaidUsage() PaidUsageResponse {
	if o == nil || o.PaidUsage == nil {
		var ret PaidUsageResponse
		return ret
	}
	return *o.PaidUsage
}

// GetPaidUsageOk returns a tuple with the PaidUsage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrganizationCurrentCostResponse) GetPaidUsageOk() (*PaidUsageResponse, bool) {
	if o == nil || o.PaidUsage == nil {
		return nil, false
	}
	return o.PaidUsage, true
}

// HasPaidUsage returns a boolean if a field has been set.
func (o *OrganizationCurrentCostResponse) HasPaidUsage() bool {
	if o != nil && o.PaidUsage != nil {
		return true
	}

	return false
}

// SetPaidUsage gets a reference to the given PaidUsageResponse and assigns it to the PaidUsage field.
func (o *OrganizationCurrentCostResponse) SetPaidUsage(v PaidUsageResponse) {
	o.PaidUsage = &v
}

// GetCommunityUsage returns the CommunityUsage field value if set, zero value otherwise.
func (o *OrganizationCurrentCostResponse) GetCommunityUsage() CommunityUsageResponse {
	if o == nil || o.CommunityUsage == nil {
		var ret CommunityUsageResponse
		return ret
	}
	return *o.CommunityUsage
}

// GetCommunityUsageOk returns a tuple with the CommunityUsage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrganizationCurrentCostResponse) GetCommunityUsageOk() (*CommunityUsageResponse, bool) {
	if o == nil || o.CommunityUsage == nil {
		return nil, false
	}
	return o.CommunityUsage, true
}

// HasCommunityUsage returns a boolean if a field has been set.
func (o *OrganizationCurrentCostResponse) HasCommunityUsage() bool {
	if o != nil && o.CommunityUsage != nil {
		return true
	}

	return false
}

// SetCommunityUsage gets a reference to the given CommunityUsageResponse and assigns it to the CommunityUsage field.
func (o *OrganizationCurrentCostResponse) SetCommunityUsage(v CommunityUsageResponse) {
	o.CommunityUsage = &v
}

func (o OrganizationCurrentCostResponse) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Plan != nil {
		toSerialize["plan"] = o.Plan
	}
	if o.RemainingTrialDay != nil {
		toSerialize["remaining_trial_day"] = o.RemainingTrialDay
	}
	if o.RemainingCredits != nil {
		toSerialize["remaining_credits"] = o.RemainingCredits
	}
	if o.Cost != nil {
		toSerialize["cost"] = o.Cost
	}
	if o.PaidUsage != nil {
		toSerialize["paid_usage"] = o.PaidUsage
	}
	if o.CommunityUsage != nil {
		toSerialize["community_usage"] = o.CommunityUsage
	}
	return json.Marshal(toSerialize)
}

type NullableOrganizationCurrentCostResponse struct {
	value *OrganizationCurrentCostResponse
	isSet bool
}

func (v NullableOrganizationCurrentCostResponse) Get() *OrganizationCurrentCostResponse {
	return v.value
}

func (v *NullableOrganizationCurrentCostResponse) Set(val *OrganizationCurrentCostResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableOrganizationCurrentCostResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableOrganizationCurrentCostResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOrganizationCurrentCostResponse(val *OrganizationCurrentCostResponse) *NullableOrganizationCurrentCostResponse {
	return &NullableOrganizationCurrentCostResponse{value: val, isSet: true}
}

func (v NullableOrganizationCurrentCostResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOrganizationCurrentCostResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


