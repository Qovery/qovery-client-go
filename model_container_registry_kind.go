/*
Qovery API

- Qovery is the fastest way to deploy your full-stack apps on any Cloud provider. - ℹ️ The API is stable and still in development.

API version: 1.0.3
Contact: support+api+documentation@qovery.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package qovery

import (
	"encoding/json"
	"fmt"
)

// ContainerRegistryKind ECR needs the following parameters - region, access_key_id, secret_access_key DOCR needs the following parameters - token  SCALEWAY_CR needs the following parameters - scaleway_access_key, scaleway_secret_key DOCKER_HUB needs the following parameters - username, password  PUBLIC_ECR needs the followinf parameters - access_key_id, secret_access_key
type ContainerRegistryKind string

// List of ContainerRegistryKind
const (
	CONTAINERREGISTRYKIND_ECR         ContainerRegistryKind = "ECR"
	CONTAINERREGISTRYKIND_DOCR        ContainerRegistryKind = "DOCR"
	CONTAINERREGISTRYKIND_SCALEWAY_CR ContainerRegistryKind = "SCALEWAY_CR"
	CONTAINERREGISTRYKIND_DOCKER_HUB  ContainerRegistryKind = "DOCKER_HUB"
	CONTAINERREGISTRYKIND_PUBLIC_ECR  ContainerRegistryKind = "PUBLIC_ECR"
)

// All allowed values of ContainerRegistryKind enum
var AllowedContainerRegistryKindEnumValues = []ContainerRegistryKind{
	"ECR",
	"DOCR",
	"SCALEWAY_CR",
	"DOCKER_HUB",
	"PUBLIC_ECR",
}

func (v *ContainerRegistryKind) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ContainerRegistryKind(value)
	for _, existing := range AllowedContainerRegistryKindEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ContainerRegistryKind", value)
}

// NewContainerRegistryKindFromValue returns a pointer to a valid ContainerRegistryKind
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewContainerRegistryKindFromValue(v string) (*ContainerRegistryKind, error) {
	ev := ContainerRegistryKind(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ContainerRegistryKind: valid values are %v", v, AllowedContainerRegistryKindEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ContainerRegistryKind) IsValid() bool {
	for _, existing := range AllowedContainerRegistryKindEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to ContainerRegistryKind value
func (v ContainerRegistryKind) Ptr() *ContainerRegistryKind {
	return &v
}

type NullableContainerRegistryKind struct {
	value *ContainerRegistryKind
	isSet bool
}

func (v NullableContainerRegistryKind) Get() *ContainerRegistryKind {
	return v.value
}

func (v *NullableContainerRegistryKind) Set(val *ContainerRegistryKind) {
	v.value = val
	v.isSet = true
}

func (v NullableContainerRegistryKind) IsSet() bool {
	return v.isSet
}

func (v *NullableContainerRegistryKind) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableContainerRegistryKind(val *ContainerRegistryKind) *NullableContainerRegistryKind {
	return &NullableContainerRegistryKind{value: val, isSet: true}
}

func (v NullableContainerRegistryKind) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableContainerRegistryKind) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
