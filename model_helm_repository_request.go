/*
Qovery API

- Qovery is the fastest way to deploy your full-stack apps on any Cloud provider. - ℹ️ The API is stable and still in development.

API version: 1.0.3
Contact: support+api+documentation@qovery.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package qovery

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the HelmRepositoryRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &HelmRepositoryRequest{}

// HelmRepositoryRequest struct for HelmRepositoryRequest
type HelmRepositoryRequest struct {
	Name        string                 `json:"name"`
	Kind        HelmRepositoryKindEnum `json:"kind"`
	Description *string                `json:"description,omitempty"`
	// URL of the helm chart repository: * For `OCI`: it must start by oci:// * For `HTTPS`: it must be start by https://
	Url *string `json:"url,omitempty"`
	// Bypass tls certificate verification when connecting to repository
	SkipTlsVerification bool                        `json:"skip_tls_verification"`
	Config              HelmRepositoryRequestConfig `json:"config"`
}

type _HelmRepositoryRequest HelmRepositoryRequest

// NewHelmRepositoryRequest instantiates a new HelmRepositoryRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewHelmRepositoryRequest(name string, kind HelmRepositoryKindEnum, skipTlsVerification bool, config HelmRepositoryRequestConfig) *HelmRepositoryRequest {
	this := HelmRepositoryRequest{}
	this.Name = name
	this.Kind = kind
	this.SkipTlsVerification = skipTlsVerification
	this.Config = config
	return &this
}

// NewHelmRepositoryRequestWithDefaults instantiates a new HelmRepositoryRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewHelmRepositoryRequestWithDefaults() *HelmRepositoryRequest {
	this := HelmRepositoryRequest{}
	return &this
}

// GetName returns the Name field value
func (o *HelmRepositoryRequest) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *HelmRepositoryRequest) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *HelmRepositoryRequest) SetName(v string) {
	o.Name = v
}

// GetKind returns the Kind field value
func (o *HelmRepositoryRequest) GetKind() HelmRepositoryKindEnum {
	if o == nil {
		var ret HelmRepositoryKindEnum
		return ret
	}

	return o.Kind
}

// GetKindOk returns a tuple with the Kind field value
// and a boolean to check if the value has been set.
func (o *HelmRepositoryRequest) GetKindOk() (*HelmRepositoryKindEnum, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Kind, true
}

// SetKind sets field value
func (o *HelmRepositoryRequest) SetKind(v HelmRepositoryKindEnum) {
	o.Kind = v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *HelmRepositoryRequest) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HelmRepositoryRequest) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *HelmRepositoryRequest) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *HelmRepositoryRequest) SetDescription(v string) {
	o.Description = &v
}

// GetUrl returns the Url field value if set, zero value otherwise.
func (o *HelmRepositoryRequest) GetUrl() string {
	if o == nil || IsNil(o.Url) {
		var ret string
		return ret
	}
	return *o.Url
}

// GetUrlOk returns a tuple with the Url field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HelmRepositoryRequest) GetUrlOk() (*string, bool) {
	if o == nil || IsNil(o.Url) {
		return nil, false
	}
	return o.Url, true
}

// HasUrl returns a boolean if a field has been set.
func (o *HelmRepositoryRequest) HasUrl() bool {
	if o != nil && !IsNil(o.Url) {
		return true
	}

	return false
}

// SetUrl gets a reference to the given string and assigns it to the Url field.
func (o *HelmRepositoryRequest) SetUrl(v string) {
	o.Url = &v
}

// GetSkipTlsVerification returns the SkipTlsVerification field value
func (o *HelmRepositoryRequest) GetSkipTlsVerification() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.SkipTlsVerification
}

// GetSkipTlsVerificationOk returns a tuple with the SkipTlsVerification field value
// and a boolean to check if the value has been set.
func (o *HelmRepositoryRequest) GetSkipTlsVerificationOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SkipTlsVerification, true
}

// SetSkipTlsVerification sets field value
func (o *HelmRepositoryRequest) SetSkipTlsVerification(v bool) {
	o.SkipTlsVerification = v
}

// GetConfig returns the Config field value
func (o *HelmRepositoryRequest) GetConfig() HelmRepositoryRequestConfig {
	if o == nil {
		var ret HelmRepositoryRequestConfig
		return ret
	}

	return o.Config
}

// GetConfigOk returns a tuple with the Config field value
// and a boolean to check if the value has been set.
func (o *HelmRepositoryRequest) GetConfigOk() (*HelmRepositoryRequestConfig, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Config, true
}

// SetConfig sets field value
func (o *HelmRepositoryRequest) SetConfig(v HelmRepositoryRequestConfig) {
	o.Config = v
}

func (o HelmRepositoryRequest) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o HelmRepositoryRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["name"] = o.Name
	toSerialize["kind"] = o.Kind
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.Url) {
		toSerialize["url"] = o.Url
	}
	toSerialize["skip_tls_verification"] = o.SkipTlsVerification
	toSerialize["config"] = o.Config
	return toSerialize, nil
}

func (o *HelmRepositoryRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"name",
		"kind",
		"skip_tls_verification",
		"config",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varHelmRepositoryRequest := _HelmRepositoryRequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varHelmRepositoryRequest)

	if err != nil {
		return err
	}

	*o = HelmRepositoryRequest(varHelmRepositoryRequest)

	return err
}

type NullableHelmRepositoryRequest struct {
	value *HelmRepositoryRequest
	isSet bool
}

func (v NullableHelmRepositoryRequest) Get() *HelmRepositoryRequest {
	return v.value
}

func (v *NullableHelmRepositoryRequest) Set(val *HelmRepositoryRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableHelmRepositoryRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableHelmRepositoryRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableHelmRepositoryRequest(val *HelmRepositoryRequest) *NullableHelmRepositoryRequest {
	return &NullableHelmRepositoryRequest{value: val, isSet: true}
}

func (v NullableHelmRepositoryRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableHelmRepositoryRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
