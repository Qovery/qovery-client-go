/*
Qovery API

- Qovery is the fastest way to deploy your full-stack apps on any Cloud provider. - ℹ️ The API is stable and still in development.

API version: 1.0.3
Contact: support+api+documentation@qovery.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package qovery

import (
	"encoding/json"
	"fmt"
)

// MetricsParametersConfiguration - struct for MetricsParametersConfiguration
type MetricsParametersConfiguration struct {
	MetricsConfigurationManagedByQovery *MetricsConfigurationManagedByQovery
}

// MetricsConfigurationManagedByQoveryAsMetricsParametersConfiguration is a convenience function that returns MetricsConfigurationManagedByQovery wrapped in MetricsParametersConfiguration
func MetricsConfigurationManagedByQoveryAsMetricsParametersConfiguration(v *MetricsConfigurationManagedByQovery) MetricsParametersConfiguration {
	return MetricsParametersConfiguration{
		MetricsConfigurationManagedByQovery: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *MetricsParametersConfiguration) UnmarshalJSON(data []byte) error {
	var err error
	// use discriminator value to speed up the lookup
	var jsonDict map[string]interface{}
	err = newStrictDecoder(data).Decode(&jsonDict)
	if err != nil {
		return fmt.Errorf("failed to unmarshal JSON into map for the discriminator lookup")
	}

	// check if the discriminator value is 'MANAGED_BY_QOVERY'
	if jsonDict["kind"] == "MANAGED_BY_QOVERY" {
		// try to unmarshal JSON data into MetricsConfigurationManagedByQovery
		err = json.Unmarshal(data, &dst.MetricsConfigurationManagedByQovery)
		if err == nil {
			return nil // data stored in dst.MetricsConfigurationManagedByQovery, return on the first match
		} else {
			dst.MetricsConfigurationManagedByQovery = nil
			return fmt.Errorf("failed to unmarshal MetricsParametersConfiguration as MetricsConfigurationManagedByQovery: %s", err.Error())
		}
	}

	// check if the discriminator value is 'MetricsConfigurationManagedByQovery'
	if jsonDict["kind"] == "MetricsConfigurationManagedByQovery" {
		// try to unmarshal JSON data into MetricsConfigurationManagedByQovery
		err = json.Unmarshal(data, &dst.MetricsConfigurationManagedByQovery)
		if err == nil {
			return nil // data stored in dst.MetricsConfigurationManagedByQovery, return on the first match
		} else {
			dst.MetricsConfigurationManagedByQovery = nil
			return fmt.Errorf("failed to unmarshal MetricsParametersConfiguration as MetricsConfigurationManagedByQovery: %s", err.Error())
		}
	}

	return nil
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src MetricsParametersConfiguration) MarshalJSON() ([]byte, error) {
	if src.MetricsConfigurationManagedByQovery != nil {
		return json.Marshal(&src.MetricsConfigurationManagedByQovery)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *MetricsParametersConfiguration) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.MetricsConfigurationManagedByQovery != nil {
		return obj.MetricsConfigurationManagedByQovery
	}

	// all schemas are nil
	return nil
}

type NullableMetricsParametersConfiguration struct {
	value *MetricsParametersConfiguration
	isSet bool
}

func (v NullableMetricsParametersConfiguration) Get() *MetricsParametersConfiguration {
	return v.value
}

func (v *NullableMetricsParametersConfiguration) Set(val *MetricsParametersConfiguration) {
	v.value = val
	v.isSet = true
}

func (v NullableMetricsParametersConfiguration) IsSet() bool {
	return v.isSet
}

func (v *NullableMetricsParametersConfiguration) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMetricsParametersConfiguration(val *MetricsParametersConfiguration) *NullableMetricsParametersConfiguration {
	return &NullableMetricsParametersConfiguration{value: val, isSet: true}
}

func (v NullableMetricsParametersConfiguration) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMetricsParametersConfiguration) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
