/*
Qovery API

- Qovery is the fastest way to deploy your full-stack apps on any Cloud provider. - ℹ️ The API is stable and still in development.

API version: 1.0.4
Contact: support+api+documentation@qovery.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package qovery

import (
	"encoding/json"
)

// checks if the Budget type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Budget{}

// Budget struct for Budget
type Budget struct {
	TotalInCents         *int32   `json:"total_in_cents,omitempty"`
	Total                *float32 `json:"total,omitempty"`
	CurrencyCode         *string  `json:"currency_code,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _Budget Budget

// NewBudget instantiates a new Budget object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBudget() *Budget {
	this := Budget{}
	return &this
}

// NewBudgetWithDefaults instantiates a new Budget object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBudgetWithDefaults() *Budget {
	this := Budget{}
	return &this
}

// GetTotalInCents returns the TotalInCents field value if set, zero value otherwise.
func (o *Budget) GetTotalInCents() int32 {
	if o == nil || IsNil(o.TotalInCents) {
		var ret int32
		return ret
	}
	return *o.TotalInCents
}

// GetTotalInCentsOk returns a tuple with the TotalInCents field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Budget) GetTotalInCentsOk() (*int32, bool) {
	if o == nil || IsNil(o.TotalInCents) {
		return nil, false
	}
	return o.TotalInCents, true
}

// HasTotalInCents returns a boolean if a field has been set.
func (o *Budget) HasTotalInCents() bool {
	if o != nil && !IsNil(o.TotalInCents) {
		return true
	}

	return false
}

// SetTotalInCents gets a reference to the given int32 and assigns it to the TotalInCents field.
func (o *Budget) SetTotalInCents(v int32) {
	o.TotalInCents = &v
}

// GetTotal returns the Total field value if set, zero value otherwise.
func (o *Budget) GetTotal() float32 {
	if o == nil || IsNil(o.Total) {
		var ret float32
		return ret
	}
	return *o.Total
}

// GetTotalOk returns a tuple with the Total field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Budget) GetTotalOk() (*float32, bool) {
	if o == nil || IsNil(o.Total) {
		return nil, false
	}
	return o.Total, true
}

// HasTotal returns a boolean if a field has been set.
func (o *Budget) HasTotal() bool {
	if o != nil && !IsNil(o.Total) {
		return true
	}

	return false
}

// SetTotal gets a reference to the given float32 and assigns it to the Total field.
func (o *Budget) SetTotal(v float32) {
	o.Total = &v
}

// GetCurrencyCode returns the CurrencyCode field value if set, zero value otherwise.
func (o *Budget) GetCurrencyCode() string {
	if o == nil || IsNil(o.CurrencyCode) {
		var ret string
		return ret
	}
	return *o.CurrencyCode
}

// GetCurrencyCodeOk returns a tuple with the CurrencyCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Budget) GetCurrencyCodeOk() (*string, bool) {
	if o == nil || IsNil(o.CurrencyCode) {
		return nil, false
	}
	return o.CurrencyCode, true
}

// HasCurrencyCode returns a boolean if a field has been set.
func (o *Budget) HasCurrencyCode() bool {
	if o != nil && !IsNil(o.CurrencyCode) {
		return true
	}

	return false
}

// SetCurrencyCode gets a reference to the given string and assigns it to the CurrencyCode field.
func (o *Budget) SetCurrencyCode(v string) {
	o.CurrencyCode = &v
}

func (o Budget) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Budget) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.TotalInCents) {
		toSerialize["total_in_cents"] = o.TotalInCents
	}
	if !IsNil(o.Total) {
		toSerialize["total"] = o.Total
	}
	if !IsNil(o.CurrencyCode) {
		toSerialize["currency_code"] = o.CurrencyCode
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *Budget) UnmarshalJSON(data []byte) (err error) {
	varBudget := _Budget{}

	err = json.Unmarshal(data, &varBudget)

	if err != nil {
		return err
	}

	*o = Budget(varBudget)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "total_in_cents")
		delete(additionalProperties, "total")
		delete(additionalProperties, "currency_code")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableBudget struct {
	value *Budget
	isSet bool
}

func (v NullableBudget) Get() *Budget {
	return v.value
}

func (v *NullableBudget) Set(val *Budget) {
	v.value = val
	v.isSet = true
}

func (v NullableBudget) IsSet() bool {
	return v.isSet
}

func (v *NullableBudget) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBudget(val *Budget) *NullableBudget {
	return &NullableBudget{value: val, isSet: true}
}

func (v NullableBudget) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBudget) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
