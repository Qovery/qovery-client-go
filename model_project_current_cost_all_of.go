/*
Qovery API

- Qovery is the fastest way to deploy your full-stack apps on any Cloud provider. - ℹ️ The API is stable and still in development.

API version: 1.0.3
Contact: support+api+documentation@qovery.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package qovery

import (
	"encoding/json"
)

// ProjectCurrentCostAllOf struct for ProjectCurrentCostAllOf
type ProjectCurrentCostAllOf struct {
	Environments []GenericObjectCurrentCost `json:"environments,omitempty"`
}

// NewProjectCurrentCostAllOf instantiates a new ProjectCurrentCostAllOf object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewProjectCurrentCostAllOf() *ProjectCurrentCostAllOf {
	this := ProjectCurrentCostAllOf{}
	return &this
}

// NewProjectCurrentCostAllOfWithDefaults instantiates a new ProjectCurrentCostAllOf object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewProjectCurrentCostAllOfWithDefaults() *ProjectCurrentCostAllOf {
	this := ProjectCurrentCostAllOf{}
	return &this
}

// GetEnvironments returns the Environments field value if set, zero value otherwise.
func (o *ProjectCurrentCostAllOf) GetEnvironments() []GenericObjectCurrentCost {
	if o == nil || o.Environments == nil {
		var ret []GenericObjectCurrentCost
		return ret
	}
	return o.Environments
}

// GetEnvironmentsOk returns a tuple with the Environments field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProjectCurrentCostAllOf) GetEnvironmentsOk() ([]GenericObjectCurrentCost, bool) {
	if o == nil || o.Environments == nil {
		return nil, false
	}
	return o.Environments, true
}

// HasEnvironments returns a boolean if a field has been set.
func (o *ProjectCurrentCostAllOf) HasEnvironments() bool {
	if o != nil && o.Environments != nil {
		return true
	}

	return false
}

// SetEnvironments gets a reference to the given []GenericObjectCurrentCost and assigns it to the Environments field.
func (o *ProjectCurrentCostAllOf) SetEnvironments(v []GenericObjectCurrentCost) {
	o.Environments = v
}

func (o ProjectCurrentCostAllOf) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Environments != nil {
		toSerialize["environments"] = o.Environments
	}
	return json.Marshal(toSerialize)
}

type NullableProjectCurrentCostAllOf struct {
	value *ProjectCurrentCostAllOf
	isSet bool
}

func (v NullableProjectCurrentCostAllOf) Get() *ProjectCurrentCostAllOf {
	return v.value
}

func (v *NullableProjectCurrentCostAllOf) Set(val *ProjectCurrentCostAllOf) {
	v.value = val
	v.isSet = true
}

func (v NullableProjectCurrentCostAllOf) IsSet() bool {
	return v.isSet
}

func (v *NullableProjectCurrentCostAllOf) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableProjectCurrentCostAllOf(val *ProjectCurrentCostAllOf) *NullableProjectCurrentCostAllOf {
	return &NullableProjectCurrentCostAllOf{value: val, isSet: true}
}

func (v NullableProjectCurrentCostAllOf) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableProjectCurrentCostAllOf) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
