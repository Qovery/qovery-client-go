/*
Qovery API

- Qovery is the fastest way to deploy your full-stack apps on any Cloud provider. - ℹ️ The API is stable and still in development.

API version: 1.0.3
Contact: support+api+documentation@qovery.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package qovery

import (
	"encoding/json"
	"fmt"
)

// BuildModeEnum `DOCKER` requires `dockerfile_path` `BUILDPACKS` does not require any `dockerfile_path`
type BuildModeEnum string

// List of BuildModeEnum
const (
	BUILDMODEENUM_BUILDPACKS BuildModeEnum = "BUILDPACKS"
	BUILDMODEENUM_DOCKER     BuildModeEnum = "DOCKER"
)

// All allowed values of BuildModeEnum enum
var AllowedBuildModeEnumEnumValues = []BuildModeEnum{
	"BUILDPACKS",
	"DOCKER",
}

func (v *BuildModeEnum) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := BuildModeEnum(value)
	for _, existing := range AllowedBuildModeEnumEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid BuildModeEnum", value)
}

// NewBuildModeEnumFromValue returns a pointer to a valid BuildModeEnum
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewBuildModeEnumFromValue(v string) (*BuildModeEnum, error) {
	ev := BuildModeEnum(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for BuildModeEnum: valid values are %v", v, AllowedBuildModeEnumEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v BuildModeEnum) IsValid() bool {
	for _, existing := range AllowedBuildModeEnumEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to BuildModeEnum value
func (v BuildModeEnum) Ptr() *BuildModeEnum {
	return &v
}

type NullableBuildModeEnum struct {
	value *BuildModeEnum
	isSet bool
}

func (v NullableBuildModeEnum) Get() *BuildModeEnum {
	return v.value
}

func (v *NullableBuildModeEnum) Set(val *BuildModeEnum) {
	v.value = val
	v.isSet = true
}

func (v NullableBuildModeEnum) IsSet() bool {
	return v.isSet
}

func (v *NullableBuildModeEnum) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBuildModeEnum(val *BuildModeEnum) *NullableBuildModeEnum {
	return &NullableBuildModeEnum{value: val, isSet: true}
}

func (v NullableBuildModeEnum) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBuildModeEnum) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
