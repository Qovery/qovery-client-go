/*
Qovery API

- Qovery is the fastest way to deploy your full-stack apps on any Cloud provider. - ℹ️ The API is stable and still in development.

API version: 1.0.4
Contact: support+api+documentation@qovery.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package qovery

import (
	"encoding/json"
	"fmt"
)

// BaseJobResponseAllOfSource - struct for BaseJobResponseAllOfSource
type BaseJobResponseAllOfSource struct {
	BaseJobResponseAllOfSourceOneOf  *BaseJobResponseAllOfSourceOneOf
	BaseJobResponseAllOfSourceOneOf1 *BaseJobResponseAllOfSourceOneOf1
}

// BaseJobResponseAllOfSourceOneOfAsBaseJobResponseAllOfSource is a convenience function that returns BaseJobResponseAllOfSourceOneOf wrapped in BaseJobResponseAllOfSource
func BaseJobResponseAllOfSourceOneOfAsBaseJobResponseAllOfSource(v *BaseJobResponseAllOfSourceOneOf) BaseJobResponseAllOfSource {
	return BaseJobResponseAllOfSource{
		BaseJobResponseAllOfSourceOneOf: v,
	}
}

// BaseJobResponseAllOfSourceOneOf1AsBaseJobResponseAllOfSource is a convenience function that returns BaseJobResponseAllOfSourceOneOf1 wrapped in BaseJobResponseAllOfSource
func BaseJobResponseAllOfSourceOneOf1AsBaseJobResponseAllOfSource(v *BaseJobResponseAllOfSourceOneOf1) BaseJobResponseAllOfSource {
	return BaseJobResponseAllOfSource{
		BaseJobResponseAllOfSourceOneOf1: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *BaseJobResponseAllOfSource) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into BaseJobResponseAllOfSourceOneOf
	err = json.Unmarshal(data, &dst.BaseJobResponseAllOfSourceOneOf)
	if err == nil {
		jsonBaseJobResponseAllOfSourceOneOf, _ := json.Marshal(dst.BaseJobResponseAllOfSourceOneOf)
		if string(jsonBaseJobResponseAllOfSourceOneOf) == "{}" { // empty struct
			dst.BaseJobResponseAllOfSourceOneOf = nil
		} else {
			match++
		}
	} else {
		dst.BaseJobResponseAllOfSourceOneOf = nil
	}

	// try to unmarshal data into BaseJobResponseAllOfSourceOneOf1
	err = json.Unmarshal(data, &dst.BaseJobResponseAllOfSourceOneOf1)
	if err == nil {
		jsonBaseJobResponseAllOfSourceOneOf1, _ := json.Marshal(dst.BaseJobResponseAllOfSourceOneOf1)
		if string(jsonBaseJobResponseAllOfSourceOneOf1) == "{}" { // empty struct
			dst.BaseJobResponseAllOfSourceOneOf1 = nil
		} else {
			match++
		}
	} else {
		dst.BaseJobResponseAllOfSourceOneOf1 = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.BaseJobResponseAllOfSourceOneOf = nil
		dst.BaseJobResponseAllOfSourceOneOf1 = nil

		return fmt.Errorf("data matches more than one schema in oneOf(BaseJobResponseAllOfSource)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(BaseJobResponseAllOfSource)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src BaseJobResponseAllOfSource) MarshalJSON() ([]byte, error) {
	if src.BaseJobResponseAllOfSourceOneOf != nil {
		return json.Marshal(&src.BaseJobResponseAllOfSourceOneOf)
	}

	if src.BaseJobResponseAllOfSourceOneOf1 != nil {
		return json.Marshal(&src.BaseJobResponseAllOfSourceOneOf1)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *BaseJobResponseAllOfSource) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.BaseJobResponseAllOfSourceOneOf != nil {
		return obj.BaseJobResponseAllOfSourceOneOf
	}

	if obj.BaseJobResponseAllOfSourceOneOf1 != nil {
		return obj.BaseJobResponseAllOfSourceOneOf1
	}

	// all schemas are nil
	return nil
}

type NullableBaseJobResponseAllOfSource struct {
	value *BaseJobResponseAllOfSource
	isSet bool
}

func (v NullableBaseJobResponseAllOfSource) Get() *BaseJobResponseAllOfSource {
	return v.value
}

func (v *NullableBaseJobResponseAllOfSource) Set(val *BaseJobResponseAllOfSource) {
	v.value = val
	v.isSet = true
}

func (v NullableBaseJobResponseAllOfSource) IsSet() bool {
	return v.isSet
}

func (v *NullableBaseJobResponseAllOfSource) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBaseJobResponseAllOfSource(val *BaseJobResponseAllOfSource) *NullableBaseJobResponseAllOfSource {
	return &NullableBaseJobResponseAllOfSource{value: val, isSet: true}
}

func (v NullableBaseJobResponseAllOfSource) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBaseJobResponseAllOfSource) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
