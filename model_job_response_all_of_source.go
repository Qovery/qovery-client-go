/*
Qovery API

- Qovery is the fastest way to deploy your full-stack apps on any Cloud provider. - ℹ️ The API is stable and still in development.

API version: 1.0.3
Contact: support+api+documentation@qovery.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package qovery

import (
	"encoding/json"
	"fmt"
)

// JobResponseAllOfSource - struct for JobResponseAllOfSource
type JobResponseAllOfSource struct {
	JobResponseAllOfSourceOneOf  *JobResponseAllOfSourceOneOf
	JobResponseAllOfSourceOneOf1 *JobResponseAllOfSourceOneOf1
}

// JobResponseAllOfSourceOneOfAsJobResponseAllOfSource is a convenience function that returns JobResponseAllOfSourceOneOf wrapped in JobResponseAllOfSource
func JobResponseAllOfSourceOneOfAsJobResponseAllOfSource(v *JobResponseAllOfSourceOneOf) JobResponseAllOfSource {
	return JobResponseAllOfSource{
		JobResponseAllOfSourceOneOf: v,
	}
}

// JobResponseAllOfSourceOneOf1AsJobResponseAllOfSource is a convenience function that returns JobResponseAllOfSourceOneOf1 wrapped in JobResponseAllOfSource
func JobResponseAllOfSourceOneOf1AsJobResponseAllOfSource(v *JobResponseAllOfSourceOneOf1) JobResponseAllOfSource {
	return JobResponseAllOfSource{
		JobResponseAllOfSourceOneOf1: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *JobResponseAllOfSource) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into JobResponseAllOfSourceOneOf
	err = newStrictDecoder(data).Decode(&dst.JobResponseAllOfSourceOneOf)
	if err == nil {
		jsonJobResponseAllOfSourceOneOf, _ := json.Marshal(dst.JobResponseAllOfSourceOneOf)
		if string(jsonJobResponseAllOfSourceOneOf) == "{}" { // empty struct
			dst.JobResponseAllOfSourceOneOf = nil
		} else {
			match++
		}
	} else {
		dst.JobResponseAllOfSourceOneOf = nil
	}

	// try to unmarshal data into JobResponseAllOfSourceOneOf1
	err = newStrictDecoder(data).Decode(&dst.JobResponseAllOfSourceOneOf1)
	if err == nil {
		jsonJobResponseAllOfSourceOneOf1, _ := json.Marshal(dst.JobResponseAllOfSourceOneOf1)
		if string(jsonJobResponseAllOfSourceOneOf1) == "{}" { // empty struct
			dst.JobResponseAllOfSourceOneOf1 = nil
		} else {
			match++
		}
	} else {
		dst.JobResponseAllOfSourceOneOf1 = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.JobResponseAllOfSourceOneOf = nil
		dst.JobResponseAllOfSourceOneOf1 = nil

		return fmt.Errorf("data matches more than one schema in oneOf(JobResponseAllOfSource)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(JobResponseAllOfSource)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src JobResponseAllOfSource) MarshalJSON() ([]byte, error) {
	if src.JobResponseAllOfSourceOneOf != nil {
		return json.Marshal(&src.JobResponseAllOfSourceOneOf)
	}

	if src.JobResponseAllOfSourceOneOf1 != nil {
		return json.Marshal(&src.JobResponseAllOfSourceOneOf1)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *JobResponseAllOfSource) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.JobResponseAllOfSourceOneOf != nil {
		return obj.JobResponseAllOfSourceOneOf
	}

	if obj.JobResponseAllOfSourceOneOf1 != nil {
		return obj.JobResponseAllOfSourceOneOf1
	}

	// all schemas are nil
	return nil
}

type NullableJobResponseAllOfSource struct {
	value *JobResponseAllOfSource
	isSet bool
}

func (v NullableJobResponseAllOfSource) Get() *JobResponseAllOfSource {
	return v.value
}

func (v *NullableJobResponseAllOfSource) Set(val *JobResponseAllOfSource) {
	v.value = val
	v.isSet = true
}

func (v NullableJobResponseAllOfSource) IsSet() bool {
	return v.isSet
}

func (v *NullableJobResponseAllOfSource) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableJobResponseAllOfSource(val *JobResponseAllOfSource) *NullableJobResponseAllOfSource {
	return &NullableJobResponseAllOfSource{value: val, isSet: true}
}

func (v NullableJobResponseAllOfSource) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableJobResponseAllOfSource) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
