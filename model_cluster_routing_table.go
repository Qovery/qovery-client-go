/*
Qovery API

- Qovery is the fastest way to deploy your full-stack apps on any Cloud provider. - ℹ️ The API is stable and still in development.

API version: 1.0.3
Contact: support+api+documentation@qovery.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package qovery

import (
	"encoding/json"
)

// checks if the ClusterRoutingTable type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ClusterRoutingTable{}

// ClusterRoutingTable struct for ClusterRoutingTable
type ClusterRoutingTable struct {
	Results              []ClusterRoutingTableResultsInner `json:"results,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _ClusterRoutingTable ClusterRoutingTable

// NewClusterRoutingTable instantiates a new ClusterRoutingTable object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewClusterRoutingTable() *ClusterRoutingTable {
	this := ClusterRoutingTable{}
	return &this
}

// NewClusterRoutingTableWithDefaults instantiates a new ClusterRoutingTable object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewClusterRoutingTableWithDefaults() *ClusterRoutingTable {
	this := ClusterRoutingTable{}
	return &this
}

// GetResults returns the Results field value if set, zero value otherwise.
func (o *ClusterRoutingTable) GetResults() []ClusterRoutingTableResultsInner {
	if o == nil || IsNil(o.Results) {
		var ret []ClusterRoutingTableResultsInner
		return ret
	}
	return o.Results
}

// GetResultsOk returns a tuple with the Results field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ClusterRoutingTable) GetResultsOk() ([]ClusterRoutingTableResultsInner, bool) {
	if o == nil || IsNil(o.Results) {
		return nil, false
	}
	return o.Results, true
}

// HasResults returns a boolean if a field has been set.
func (o *ClusterRoutingTable) HasResults() bool {
	if o != nil && !IsNil(o.Results) {
		return true
	}

	return false
}

// SetResults gets a reference to the given []ClusterRoutingTableResultsInner and assigns it to the Results field.
func (o *ClusterRoutingTable) SetResults(v []ClusterRoutingTableResultsInner) {
	o.Results = v
}

func (o ClusterRoutingTable) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ClusterRoutingTable) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Results) {
		toSerialize["results"] = o.Results
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *ClusterRoutingTable) UnmarshalJSON(data []byte) (err error) {
	varClusterRoutingTable := _ClusterRoutingTable{}

	err = json.Unmarshal(data, &varClusterRoutingTable)

	if err != nil {
		return err
	}

	*o = ClusterRoutingTable(varClusterRoutingTable)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "results")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableClusterRoutingTable struct {
	value *ClusterRoutingTable
	isSet bool
}

func (v NullableClusterRoutingTable) Get() *ClusterRoutingTable {
	return v.value
}

func (v *NullableClusterRoutingTable) Set(val *ClusterRoutingTable) {
	v.value = val
	v.isSet = true
}

func (v NullableClusterRoutingTable) IsSet() bool {
	return v.isSet
}

func (v *NullableClusterRoutingTable) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableClusterRoutingTable(val *ClusterRoutingTable) *NullableClusterRoutingTable {
	return &NullableClusterRoutingTable{value: val, isSet: true}
}

func (v NullableClusterRoutingTable) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableClusterRoutingTable) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
