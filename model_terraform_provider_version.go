/*
Qovery API

- Qovery is the fastest way to deploy your full-stack apps on any Cloud provider. - ℹ️ The API is stable and still in development.

API version: 1.0.4
Contact: support+api+documentation@qovery.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package qovery

import (
	"encoding/json"
	"fmt"
)

// checks if the TerraformProviderVersion type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TerraformProviderVersion{}

// TerraformProviderVersion struct for TerraformProviderVersion
type TerraformProviderVersion struct {
	ReadFromTerraformBlock bool    `json:"read_from_terraform_block"`
	ExplicitVersion        *string `json:"explicit_version,omitempty"`
	AdditionalProperties   map[string]interface{}
}

type _TerraformProviderVersion TerraformProviderVersion

// NewTerraformProviderVersion instantiates a new TerraformProviderVersion object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTerraformProviderVersion(readFromTerraformBlock bool) *TerraformProviderVersion {
	this := TerraformProviderVersion{}
	this.ReadFromTerraformBlock = readFromTerraformBlock
	return &this
}

// NewTerraformProviderVersionWithDefaults instantiates a new TerraformProviderVersion object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTerraformProviderVersionWithDefaults() *TerraformProviderVersion {
	this := TerraformProviderVersion{}
	return &this
}

// GetReadFromTerraformBlock returns the ReadFromTerraformBlock field value
func (o *TerraformProviderVersion) GetReadFromTerraformBlock() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.ReadFromTerraformBlock
}

// GetReadFromTerraformBlockOk returns a tuple with the ReadFromTerraformBlock field value
// and a boolean to check if the value has been set.
func (o *TerraformProviderVersion) GetReadFromTerraformBlockOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ReadFromTerraformBlock, true
}

// SetReadFromTerraformBlock sets field value
func (o *TerraformProviderVersion) SetReadFromTerraformBlock(v bool) {
	o.ReadFromTerraformBlock = v
}

// GetExplicitVersion returns the ExplicitVersion field value if set, zero value otherwise.
func (o *TerraformProviderVersion) GetExplicitVersion() string {
	if o == nil || IsNil(o.ExplicitVersion) {
		var ret string
		return ret
	}
	return *o.ExplicitVersion
}

// GetExplicitVersionOk returns a tuple with the ExplicitVersion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TerraformProviderVersion) GetExplicitVersionOk() (*string, bool) {
	if o == nil || IsNil(o.ExplicitVersion) {
		return nil, false
	}
	return o.ExplicitVersion, true
}

// HasExplicitVersion returns a boolean if a field has been set.
func (o *TerraformProviderVersion) HasExplicitVersion() bool {
	if o != nil && !IsNil(o.ExplicitVersion) {
		return true
	}

	return false
}

// SetExplicitVersion gets a reference to the given string and assigns it to the ExplicitVersion field.
func (o *TerraformProviderVersion) SetExplicitVersion(v string) {
	o.ExplicitVersion = &v
}

func (o TerraformProviderVersion) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TerraformProviderVersion) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["read_from_terraform_block"] = o.ReadFromTerraformBlock
	if !IsNil(o.ExplicitVersion) {
		toSerialize["explicit_version"] = o.ExplicitVersion
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *TerraformProviderVersion) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"read_from_terraform_block",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varTerraformProviderVersion := _TerraformProviderVersion{}

	err = json.Unmarshal(data, &varTerraformProviderVersion)

	if err != nil {
		return err
	}

	*o = TerraformProviderVersion(varTerraformProviderVersion)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "read_from_terraform_block")
		delete(additionalProperties, "explicit_version")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableTerraformProviderVersion struct {
	value *TerraformProviderVersion
	isSet bool
}

func (v NullableTerraformProviderVersion) Get() *TerraformProviderVersion {
	return v.value
}

func (v *NullableTerraformProviderVersion) Set(val *TerraformProviderVersion) {
	v.value = val
	v.isSet = true
}

func (v NullableTerraformProviderVersion) IsSet() bool {
	return v.isSet
}

func (v *NullableTerraformProviderVersion) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTerraformProviderVersion(val *TerraformProviderVersion) *NullableTerraformProviderVersion {
	return &NullableTerraformProviderVersion{value: val, isSet: true}
}

func (v NullableTerraformProviderVersion) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTerraformProviderVersion) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
