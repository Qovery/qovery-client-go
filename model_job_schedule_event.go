/*
Qovery API

- Qovery is the fastest way to deploy your full-stack apps on any Cloud provider. - ℹ️ The API is stable and still in development.

API version: 1.0.3
Contact: support+api+documentation@qovery.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package qovery

import (
	"encoding/json"
	"fmt"
)

// JobScheduleEvent On which event the job is going to run. ON_START means when a deployment is requested for the environment ON_STOP means when a stop of the environment is requested CRON means at a scheduled interval
type JobScheduleEvent string

// List of JobScheduleEvent
const (
	JOBSCHEDULEEVENT_ON_START  JobScheduleEvent = "ON_START"
	JOBSCHEDULEEVENT_ON_STOP   JobScheduleEvent = "ON_STOP"
	JOBSCHEDULEEVENT_ON_DELETE JobScheduleEvent = "ON_DELETE"
	JOBSCHEDULEEVENT_CRON      JobScheduleEvent = "CRON"
)

// All allowed values of JobScheduleEvent enum
var AllowedJobScheduleEventEnumValues = []JobScheduleEvent{
	"ON_START",
	"ON_STOP",
	"ON_DELETE",
	"CRON",
}

func (v *JobScheduleEvent) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := JobScheduleEvent(value)
	for _, existing := range AllowedJobScheduleEventEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid JobScheduleEvent", value)
}

// NewJobScheduleEventFromValue returns a pointer to a valid JobScheduleEvent
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewJobScheduleEventFromValue(v string) (*JobScheduleEvent, error) {
	ev := JobScheduleEvent(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for JobScheduleEvent: valid values are %v", v, AllowedJobScheduleEventEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v JobScheduleEvent) IsValid() bool {
	for _, existing := range AllowedJobScheduleEventEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to JobScheduleEvent value
func (v JobScheduleEvent) Ptr() *JobScheduleEvent {
	return &v
}

type NullableJobScheduleEvent struct {
	value *JobScheduleEvent
	isSet bool
}

func (v NullableJobScheduleEvent) Get() *JobScheduleEvent {
	return v.value
}

func (v *NullableJobScheduleEvent) Set(val *JobScheduleEvent) {
	v.value = val
	v.isSet = true
}

func (v NullableJobScheduleEvent) IsSet() bool {
	return v.isSet
}

func (v *NullableJobScheduleEvent) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableJobScheduleEvent(val *JobScheduleEvent) *NullableJobScheduleEvent {
	return &NullableJobScheduleEvent{value: val, isSet: true}
}

func (v NullableJobScheduleEvent) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableJobScheduleEvent) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
