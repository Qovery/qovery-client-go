/*
Qovery API

- Qovery is the fastest way to deploy your full-stack apps on any Cloud provider. - ℹ️ The API is stable and still in development.

API version: 1.0.3
Contact: support+api+documentation@qovery.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package qovery

import (
	"encoding/json"
)

// ProbeTypeTcp struct for ProbeTypeTcp
type ProbeTypeTcp struct {
	Host NullableString `json:"host,omitempty"`
}

// NewProbeTypeTcp instantiates a new ProbeTypeTcp object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewProbeTypeTcp() *ProbeTypeTcp {
	this := ProbeTypeTcp{}
	return &this
}

// NewProbeTypeTcpWithDefaults instantiates a new ProbeTypeTcp object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewProbeTypeTcpWithDefaults() *ProbeTypeTcp {
	this := ProbeTypeTcp{}
	return &this
}

// GetHost returns the Host field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ProbeTypeTcp) GetHost() string {
	if o == nil || o.Host.Get() == nil {
		var ret string
		return ret
	}
	return *o.Host.Get()
}

// GetHostOk returns a tuple with the Host field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ProbeTypeTcp) GetHostOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Host.Get(), o.Host.IsSet()
}

// HasHost returns a boolean if a field has been set.
func (o *ProbeTypeTcp) HasHost() bool {
	if o != nil && o.Host.IsSet() {
		return true
	}

	return false
}

// SetHost gets a reference to the given NullableString and assigns it to the Host field.
func (o *ProbeTypeTcp) SetHost(v string) {
	o.Host.Set(&v)
}

// SetHostNil sets the value for Host to be an explicit nil
func (o *ProbeTypeTcp) SetHostNil() {
	o.Host.Set(nil)
}

// UnsetHost ensures that no value is present for Host, not even an explicit nil
func (o *ProbeTypeTcp) UnsetHost() {
	o.Host.Unset()
}

func (o ProbeTypeTcp) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Host.IsSet() {
		toSerialize["host"] = o.Host.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableProbeTypeTcp struct {
	value *ProbeTypeTcp
	isSet bool
}

func (v NullableProbeTypeTcp) Get() *ProbeTypeTcp {
	return v.value
}

func (v *NullableProbeTypeTcp) Set(val *ProbeTypeTcp) {
	v.value = val
	v.isSet = true
}

func (v NullableProbeTypeTcp) IsSet() bool {
	return v.isSet
}

func (v *NullableProbeTypeTcp) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableProbeTypeTcp(val *ProbeTypeTcp) *NullableProbeTypeTcp {
	return &NullableProbeTypeTcp{value: val, isSet: true}
}

func (v NullableProbeTypeTcp) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableProbeTypeTcp) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
