/*
Qovery API

- Qovery is the fastest way to deploy your full-stack apps on any Cloud provider. - ℹ️ The API is stable and still in development.

API version: 1.0.3
Contact: support+api+documentation@qovery.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package qovery

import (
	"encoding/json"
	"fmt"
)

// GlobalDeploymentStatus the model 'GlobalDeploymentStatus'
type GlobalDeploymentStatus string

// List of GlobalDeploymentStatus
const (
	READY            GlobalDeploymentStatus = "READY"
	QUEUED           GlobalDeploymentStatus = "QUEUED"
	STOP_QUEUED      GlobalDeploymentStatus = "STOP_QUEUED"
	DELETE_QUEUED    GlobalDeploymentStatus = "DELETE_QUEUED"
	BUILDING         GlobalDeploymentStatus = "BUILDING"
	BUILD_ERROR      GlobalDeploymentStatus = "BUILD_ERROR"
	BUILT            GlobalDeploymentStatus = "BUILT"
	DEPLOYING        GlobalDeploymentStatus = "DEPLOYING"
	DEPLOYMENT_ERROR GlobalDeploymentStatus = "DEPLOYMENT_ERROR"
	DEPLOYED         GlobalDeploymentStatus = "DEPLOYED"
	STOPPING         GlobalDeploymentStatus = "STOPPING"
	STOP_ERROR       GlobalDeploymentStatus = "STOP_ERROR"
	STOPPED          GlobalDeploymentStatus = "STOPPED"
	DELETING         GlobalDeploymentStatus = "DELETING"
	DELETE_ERROR     GlobalDeploymentStatus = "DELETE_ERROR"
	DELETED          GlobalDeploymentStatus = "DELETED"
	RUNNING          GlobalDeploymentStatus = "RUNNING"
	RUNNING_ERROR    GlobalDeploymentStatus = "RUNNING_ERROR"
)

// All allowed values of GlobalDeploymentStatus enum
var AllowedGlobalDeploymentStatusEnumValues = []GlobalDeploymentStatus{
	"READY",
	"QUEUED",
	"STOP_QUEUED",
	"DELETE_QUEUED",
	"BUILDING",
	"BUILD_ERROR",
	"BUILT",
	"DEPLOYING",
	"DEPLOYMENT_ERROR",
	"DEPLOYED",
	"STOPPING",
	"STOP_ERROR",
	"STOPPED",
	"DELETING",
	"DELETE_ERROR",
	"DELETED",
	"RUNNING",
	"RUNNING_ERROR",
}

func (v *GlobalDeploymentStatus) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := GlobalDeploymentStatus(value)
	for _, existing := range AllowedGlobalDeploymentStatusEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid GlobalDeploymentStatus", value)
}

// NewGlobalDeploymentStatusFromValue returns a pointer to a valid GlobalDeploymentStatus
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewGlobalDeploymentStatusFromValue(v string) (*GlobalDeploymentStatus, error) {
	ev := GlobalDeploymentStatus(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for GlobalDeploymentStatus: valid values are %v", v, AllowedGlobalDeploymentStatusEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v GlobalDeploymentStatus) IsValid() bool {
	for _, existing := range AllowedGlobalDeploymentStatusEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to GlobalDeploymentStatus value
func (v GlobalDeploymentStatus) Ptr() *GlobalDeploymentStatus {
	return &v
}

type NullableGlobalDeploymentStatus struct {
	value *GlobalDeploymentStatus
	isSet bool
}

func (v NullableGlobalDeploymentStatus) Get() *GlobalDeploymentStatus {
	return v.value
}

func (v *NullableGlobalDeploymentStatus) Set(val *GlobalDeploymentStatus) {
	v.value = val
	v.isSet = true
}

func (v NullableGlobalDeploymentStatus) IsSet() bool {
	return v.isSet
}

func (v *NullableGlobalDeploymentStatus) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGlobalDeploymentStatus(val *GlobalDeploymentStatus) *NullableGlobalDeploymentStatus {
	return &NullableGlobalDeploymentStatus{value: val, isSet: true}
}

func (v NullableGlobalDeploymentStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGlobalDeploymentStatus) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
