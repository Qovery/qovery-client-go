/*
Qovery API

- Qovery is the fastest way to deploy your full-stack apps on any Cloud provider. - ℹ️ The API is stable and still in development.

API version: 1.0.3
Contact: support+api+documentation@qovery.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package qovery

import (
	"encoding/json"
	"fmt"
)

// OrganizationWebhookEventEnum Events to subscribe to and send to the `target_url`. - `DEPLOYMENT_STARTED` send an event when a deployment is started and going to be executed - `DEPLOYMENT_CANCELLED` send an event when a deployment is cancelled - `DEPLOYMENT_FAILURE` send an event when a deployment failed - `DEPLOYMENT_SUCCESSFUL` send an event when a deployment is successful
type OrganizationWebhookEventEnum string

// List of OrganizationWebhookEventEnum
const (
	ORGANIZATIONWEBHOOKEVENTENUM_STARTED    OrganizationWebhookEventEnum = "DEPLOYMENT_STARTED"
	ORGANIZATIONWEBHOOKEVENTENUM_CANCELLED  OrganizationWebhookEventEnum = "DEPLOYMENT_CANCELLED"
	ORGANIZATIONWEBHOOKEVENTENUM_FAILURE    OrganizationWebhookEventEnum = "DEPLOYMENT_FAILURE"
	ORGANIZATIONWEBHOOKEVENTENUM_SUCCESSFUL OrganizationWebhookEventEnum = "DEPLOYMENT_SUCCESSFUL"
)

// All allowed values of OrganizationWebhookEventEnum enum
var AllowedOrganizationWebhookEventEnumEnumValues = []OrganizationWebhookEventEnum{
	"DEPLOYMENT_STARTED",
	"DEPLOYMENT_CANCELLED",
	"DEPLOYMENT_FAILURE",
	"DEPLOYMENT_SUCCESSFUL",
}

func (v *OrganizationWebhookEventEnum) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := OrganizationWebhookEventEnum(value)
	for _, existing := range AllowedOrganizationWebhookEventEnumEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid OrganizationWebhookEventEnum", value)
}

// NewOrganizationWebhookEventEnumFromValue returns a pointer to a valid OrganizationWebhookEventEnum
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewOrganizationWebhookEventEnumFromValue(v string) (*OrganizationWebhookEventEnum, error) {
	ev := OrganizationWebhookEventEnum(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for OrganizationWebhookEventEnum: valid values are %v", v, AllowedOrganizationWebhookEventEnumEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v OrganizationWebhookEventEnum) IsValid() bool {
	for _, existing := range AllowedOrganizationWebhookEventEnumEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to OrganizationWebhookEventEnum value
func (v OrganizationWebhookEventEnum) Ptr() *OrganizationWebhookEventEnum {
	return &v
}

type NullableOrganizationWebhookEventEnum struct {
	value *OrganizationWebhookEventEnum
	isSet bool
}

func (v NullableOrganizationWebhookEventEnum) Get() *OrganizationWebhookEventEnum {
	return v.value
}

func (v *NullableOrganizationWebhookEventEnum) Set(val *OrganizationWebhookEventEnum) {
	v.value = val
	v.isSet = true
}

func (v NullableOrganizationWebhookEventEnum) IsSet() bool {
	return v.isSet
}

func (v *NullableOrganizationWebhookEventEnum) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOrganizationWebhookEventEnum(val *OrganizationWebhookEventEnum) *NullableOrganizationWebhookEventEnum {
	return &NullableOrganizationWebhookEventEnum{value: val, isSet: true}
}

func (v NullableOrganizationWebhookEventEnum) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOrganizationWebhookEventEnum) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
