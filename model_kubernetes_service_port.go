/*
Qovery API

- Qovery is the fastest way to deploy your full-stack apps on any Cloud provider. - ℹ️ The API is stable and still in development.

API version: 1.0.3
Contact: support+api+documentation@qovery.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package qovery

import (
	"encoding/json"
	"fmt"
)

// checks if the KubernetesServicePort type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &KubernetesServicePort{}

// KubernetesServicePort struct for KubernetesServicePort
type KubernetesServicePort struct {
	Name                 *string `json:"name,omitempty"`
	Port                 int32   `json:"port"`
	AdditionalProperties map[string]interface{}
}

type _KubernetesServicePort KubernetesServicePort

// NewKubernetesServicePort instantiates a new KubernetesServicePort object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewKubernetesServicePort(port int32) *KubernetesServicePort {
	this := KubernetesServicePort{}
	this.Port = port
	return &this
}

// NewKubernetesServicePortWithDefaults instantiates a new KubernetesServicePort object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewKubernetesServicePortWithDefaults() *KubernetesServicePort {
	this := KubernetesServicePort{}
	return &this
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *KubernetesServicePort) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KubernetesServicePort) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *KubernetesServicePort) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *KubernetesServicePort) SetName(v string) {
	o.Name = &v
}

// GetPort returns the Port field value
func (o *KubernetesServicePort) GetPort() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Port
}

// GetPortOk returns a tuple with the Port field value
// and a boolean to check if the value has been set.
func (o *KubernetesServicePort) GetPortOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Port, true
}

// SetPort sets field value
func (o *KubernetesServicePort) SetPort(v int32) {
	o.Port = v
}

func (o KubernetesServicePort) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o KubernetesServicePort) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	toSerialize["port"] = o.Port

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *KubernetesServicePort) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"port",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varKubernetesServicePort := _KubernetesServicePort{}

	err = json.Unmarshal(data, &varKubernetesServicePort)

	if err != nil {
		return err
	}

	*o = KubernetesServicePort(varKubernetesServicePort)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "name")
		delete(additionalProperties, "port")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableKubernetesServicePort struct {
	value *KubernetesServicePort
	isSet bool
}

func (v NullableKubernetesServicePort) Get() *KubernetesServicePort {
	return v.value
}

func (v *NullableKubernetesServicePort) Set(val *KubernetesServicePort) {
	v.value = val
	v.isSet = true
}

func (v NullableKubernetesServicePort) IsSet() bool {
	return v.isSet
}

func (v *NullableKubernetesServicePort) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableKubernetesServicePort(val *KubernetesServicePort) *NullableKubernetesServicePort {
	return &NullableKubernetesServicePort{value: val, isSet: true}
}

func (v NullableKubernetesServicePort) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableKubernetesServicePort) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
