/*
Qovery API

- Qovery is the fastest way to deploy your full-stack apps on any Cloud provider. - ℹ️ The API is stable and still in development.

API version: 1.0.4
Contact: support+api+documentation@qovery.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package qovery

import (
	"encoding/json"
	"fmt"
)

// checks if the DeploymentHistoryEnvironmentV2Identifier type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DeploymentHistoryEnvironmentV2Identifier{}

// DeploymentHistoryEnvironmentV2Identifier struct for DeploymentHistoryEnvironmentV2Identifier
type DeploymentHistoryEnvironmentV2Identifier struct {
	ExecutionId          string `json:"execution_id"`
	EnvironmentId        string `json:"environment_id"`
	AdditionalProperties map[string]interface{}
}

type _DeploymentHistoryEnvironmentV2Identifier DeploymentHistoryEnvironmentV2Identifier

// NewDeploymentHistoryEnvironmentV2Identifier instantiates a new DeploymentHistoryEnvironmentV2Identifier object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDeploymentHistoryEnvironmentV2Identifier(executionId string, environmentId string) *DeploymentHistoryEnvironmentV2Identifier {
	this := DeploymentHistoryEnvironmentV2Identifier{}
	this.ExecutionId = executionId
	this.EnvironmentId = environmentId
	return &this
}

// NewDeploymentHistoryEnvironmentV2IdentifierWithDefaults instantiates a new DeploymentHistoryEnvironmentV2Identifier object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDeploymentHistoryEnvironmentV2IdentifierWithDefaults() *DeploymentHistoryEnvironmentV2Identifier {
	this := DeploymentHistoryEnvironmentV2Identifier{}
	return &this
}

// GetExecutionId returns the ExecutionId field value
func (o *DeploymentHistoryEnvironmentV2Identifier) GetExecutionId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ExecutionId
}

// GetExecutionIdOk returns a tuple with the ExecutionId field value
// and a boolean to check if the value has been set.
func (o *DeploymentHistoryEnvironmentV2Identifier) GetExecutionIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ExecutionId, true
}

// SetExecutionId sets field value
func (o *DeploymentHistoryEnvironmentV2Identifier) SetExecutionId(v string) {
	o.ExecutionId = v
}

// GetEnvironmentId returns the EnvironmentId field value
func (o *DeploymentHistoryEnvironmentV2Identifier) GetEnvironmentId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.EnvironmentId
}

// GetEnvironmentIdOk returns a tuple with the EnvironmentId field value
// and a boolean to check if the value has been set.
func (o *DeploymentHistoryEnvironmentV2Identifier) GetEnvironmentIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.EnvironmentId, true
}

// SetEnvironmentId sets field value
func (o *DeploymentHistoryEnvironmentV2Identifier) SetEnvironmentId(v string) {
	o.EnvironmentId = v
}

func (o DeploymentHistoryEnvironmentV2Identifier) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DeploymentHistoryEnvironmentV2Identifier) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["execution_id"] = o.ExecutionId
	toSerialize["environment_id"] = o.EnvironmentId

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *DeploymentHistoryEnvironmentV2Identifier) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"execution_id",
		"environment_id",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varDeploymentHistoryEnvironmentV2Identifier := _DeploymentHistoryEnvironmentV2Identifier{}

	err = json.Unmarshal(data, &varDeploymentHistoryEnvironmentV2Identifier)

	if err != nil {
		return err
	}

	*o = DeploymentHistoryEnvironmentV2Identifier(varDeploymentHistoryEnvironmentV2Identifier)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "execution_id")
		delete(additionalProperties, "environment_id")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableDeploymentHistoryEnvironmentV2Identifier struct {
	value *DeploymentHistoryEnvironmentV2Identifier
	isSet bool
}

func (v NullableDeploymentHistoryEnvironmentV2Identifier) Get() *DeploymentHistoryEnvironmentV2Identifier {
	return v.value
}

func (v *NullableDeploymentHistoryEnvironmentV2Identifier) Set(val *DeploymentHistoryEnvironmentV2Identifier) {
	v.value = val
	v.isSet = true
}

func (v NullableDeploymentHistoryEnvironmentV2Identifier) IsSet() bool {
	return v.isSet
}

func (v *NullableDeploymentHistoryEnvironmentV2Identifier) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDeploymentHistoryEnvironmentV2Identifier(val *DeploymentHistoryEnvironmentV2Identifier) *NullableDeploymentHistoryEnvironmentV2Identifier {
	return &NullableDeploymentHistoryEnvironmentV2Identifier{value: val, isSet: true}
}

func (v NullableDeploymentHistoryEnvironmentV2Identifier) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDeploymentHistoryEnvironmentV2Identifier) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
