/*
Qovery API

- Qovery is the fastest way to deploy your full-stack apps on any Cloud provider. - ℹ️ The API is stable and still in development.

API version: 1.0.4
Contact: support+api+documentation@qovery.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package qovery

import (
	"encoding/json"
	"fmt"
)

// checks if the GenericClusterCredentials type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &GenericClusterCredentials{}

// GenericClusterCredentials struct for GenericClusterCredentials
type GenericClusterCredentials struct {
	Id                   string `json:"id"`
	Name                 string `json:"name"`
	ObjectType           string `json:"object_type"`
	AdditionalProperties map[string]interface{}
}

type _GenericClusterCredentials GenericClusterCredentials

// NewGenericClusterCredentials instantiates a new GenericClusterCredentials object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGenericClusterCredentials(id string, name string, objectType string) *GenericClusterCredentials {
	this := GenericClusterCredentials{}
	this.Id = id
	this.Name = name
	this.ObjectType = objectType
	return &this
}

// NewGenericClusterCredentialsWithDefaults instantiates a new GenericClusterCredentials object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGenericClusterCredentialsWithDefaults() *GenericClusterCredentials {
	this := GenericClusterCredentials{}
	return &this
}

// GetId returns the Id field value
func (o *GenericClusterCredentials) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *GenericClusterCredentials) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *GenericClusterCredentials) SetId(v string) {
	o.Id = v
}

// GetName returns the Name field value
func (o *GenericClusterCredentials) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *GenericClusterCredentials) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *GenericClusterCredentials) SetName(v string) {
	o.Name = v
}

// GetObjectType returns the ObjectType field value
func (o *GenericClusterCredentials) GetObjectType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ObjectType
}

// GetObjectTypeOk returns a tuple with the ObjectType field value
// and a boolean to check if the value has been set.
func (o *GenericClusterCredentials) GetObjectTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ObjectType, true
}

// SetObjectType sets field value
func (o *GenericClusterCredentials) SetObjectType(v string) {
	o.ObjectType = v
}

func (o GenericClusterCredentials) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o GenericClusterCredentials) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["name"] = o.Name
	toSerialize["object_type"] = o.ObjectType

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *GenericClusterCredentials) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"name",
		"object_type",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varGenericClusterCredentials := _GenericClusterCredentials{}

	err = json.Unmarshal(data, &varGenericClusterCredentials)

	if err != nil {
		return err
	}

	*o = GenericClusterCredentials(varGenericClusterCredentials)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "id")
		delete(additionalProperties, "name")
		delete(additionalProperties, "object_type")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableGenericClusterCredentials struct {
	value *GenericClusterCredentials
	isSet bool
}

func (v NullableGenericClusterCredentials) Get() *GenericClusterCredentials {
	return v.value
}

func (v *NullableGenericClusterCredentials) Set(val *GenericClusterCredentials) {
	v.value = val
	v.isSet = true
}

func (v NullableGenericClusterCredentials) IsSet() bool {
	return v.isSet
}

func (v *NullableGenericClusterCredentials) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGenericClusterCredentials(val *GenericClusterCredentials) *NullableGenericClusterCredentials {
	return &NullableGenericClusterCredentials{value: val, isSet: true}
}

func (v NullableGenericClusterCredentials) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGenericClusterCredentials) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
