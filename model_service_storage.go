/*
Qovery API

- Qovery is the fastest way to deploy your full-stack apps on any Cloud provider. - ℹ️ The API is stable and still in development.

API version: 1.0.3
Contact: support+api+documentation@qovery.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package qovery

import (
	"encoding/json"
)

// ServiceStorage struct for ServiceStorage
type ServiceStorage struct {
	Storage []ServiceStorageStorageInner `json:"storage,omitempty"`
}

// NewServiceStorage instantiates a new ServiceStorage object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewServiceStorage() *ServiceStorage {
	this := ServiceStorage{}
	return &this
}

// NewServiceStorageWithDefaults instantiates a new ServiceStorage object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewServiceStorageWithDefaults() *ServiceStorage {
	this := ServiceStorage{}
	return &this
}

// GetStorage returns the Storage field value if set, zero value otherwise.
func (o *ServiceStorage) GetStorage() []ServiceStorageStorageInner {
	if o == nil || o.Storage == nil {
		var ret []ServiceStorageStorageInner
		return ret
	}
	return o.Storage
}

// GetStorageOk returns a tuple with the Storage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServiceStorage) GetStorageOk() ([]ServiceStorageStorageInner, bool) {
	if o == nil || o.Storage == nil {
		return nil, false
	}
	return o.Storage, true
}

// HasStorage returns a boolean if a field has been set.
func (o *ServiceStorage) HasStorage() bool {
	if o != nil && o.Storage != nil {
		return true
	}

	return false
}

// SetStorage gets a reference to the given []ServiceStorageStorageInner and assigns it to the Storage field.
func (o *ServiceStorage) SetStorage(v []ServiceStorageStorageInner) {
	o.Storage = v
}

func (o ServiceStorage) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Storage != nil {
		toSerialize["storage"] = o.Storage
	}
	return json.Marshal(toSerialize)
}

type NullableServiceStorage struct {
	value *ServiceStorage
	isSet bool
}

func (v NullableServiceStorage) Get() *ServiceStorage {
	return v.value
}

func (v *NullableServiceStorage) Set(val *ServiceStorage) {
	v.value = val
	v.isSet = true
}

func (v NullableServiceStorage) IsSet() bool {
	return v.isSet
}

func (v *NullableServiceStorage) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableServiceStorage(val *ServiceStorage) *NullableServiceStorage {
	return &NullableServiceStorage{value: val, isSet: true}
}

func (v NullableServiceStorage) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableServiceStorage) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
