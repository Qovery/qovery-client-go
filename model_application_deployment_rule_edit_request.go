/*
Qovery API

- Qovery is the fastest way to deploy your full-stack apps on any Cloud provider. - ℹ️ The API is stable and still in development.

API version: 1.0.3
Contact: support+api+documentation@qovery.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package qovery

import (
	"encoding/json"
)

// ApplicationDeploymentRuleEditRequest struct for ApplicationDeploymentRuleEditRequest
type ApplicationDeploymentRuleEditRequest struct {
	DeploymentRestrictions []ApplicationDeploymentRestriction `json:"deployment_restrictions,omitempty"`
}

// NewApplicationDeploymentRuleEditRequest instantiates a new ApplicationDeploymentRuleEditRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewApplicationDeploymentRuleEditRequest() *ApplicationDeploymentRuleEditRequest {
	this := ApplicationDeploymentRuleEditRequest{}
	return &this
}

// NewApplicationDeploymentRuleEditRequestWithDefaults instantiates a new ApplicationDeploymentRuleEditRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewApplicationDeploymentRuleEditRequestWithDefaults() *ApplicationDeploymentRuleEditRequest {
	this := ApplicationDeploymentRuleEditRequest{}
	return &this
}

// GetDeploymentRestrictions returns the DeploymentRestrictions field value if set, zero value otherwise.
func (o *ApplicationDeploymentRuleEditRequest) GetDeploymentRestrictions() []ApplicationDeploymentRestriction {
	if o == nil || o.DeploymentRestrictions == nil {
		var ret []ApplicationDeploymentRestriction
		return ret
	}
	return o.DeploymentRestrictions
}

// GetDeploymentRestrictionsOk returns a tuple with the DeploymentRestrictions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApplicationDeploymentRuleEditRequest) GetDeploymentRestrictionsOk() ([]ApplicationDeploymentRestriction, bool) {
	if o == nil || o.DeploymentRestrictions == nil {
		return nil, false
	}
	return o.DeploymentRestrictions, true
}

// HasDeploymentRestrictions returns a boolean if a field has been set.
func (o *ApplicationDeploymentRuleEditRequest) HasDeploymentRestrictions() bool {
	if o != nil && o.DeploymentRestrictions != nil {
		return true
	}

	return false
}

// SetDeploymentRestrictions gets a reference to the given []ApplicationDeploymentRestriction and assigns it to the DeploymentRestrictions field.
func (o *ApplicationDeploymentRuleEditRequest) SetDeploymentRestrictions(v []ApplicationDeploymentRestriction) {
	o.DeploymentRestrictions = v
}

func (o ApplicationDeploymentRuleEditRequest) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.DeploymentRestrictions != nil {
		toSerialize["deployment_restrictions"] = o.DeploymentRestrictions
	}
	return json.Marshal(toSerialize)
}

type NullableApplicationDeploymentRuleEditRequest struct {
	value *ApplicationDeploymentRuleEditRequest
	isSet bool
}

func (v NullableApplicationDeploymentRuleEditRequest) Get() *ApplicationDeploymentRuleEditRequest {
	return v.value
}

func (v *NullableApplicationDeploymentRuleEditRequest) Set(val *ApplicationDeploymentRuleEditRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableApplicationDeploymentRuleEditRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableApplicationDeploymentRuleEditRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableApplicationDeploymentRuleEditRequest(val *ApplicationDeploymentRuleEditRequest) *NullableApplicationDeploymentRuleEditRequest {
	return &NullableApplicationDeploymentRuleEditRequest{value: val, isSet: true}
}

func (v NullableApplicationDeploymentRuleEditRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableApplicationDeploymentRuleEditRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
