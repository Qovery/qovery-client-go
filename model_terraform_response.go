/*
Qovery API

- Qovery is the fastest way to deploy your full-stack apps on any Cloud provider. - ℹ️ The API is stable and still in development.

API version: 1.0.3
Contact: support+api+documentation@qovery.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package qovery

import (
	"encoding/json"
)

// checks if the TerraformResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TerraformResponse{}

// TerraformResponse struct for TerraformResponse
type TerraformResponse struct {
	Id                   *string `json:"id,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _TerraformResponse TerraformResponse

// NewTerraformResponse instantiates a new TerraformResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTerraformResponse() *TerraformResponse {
	this := TerraformResponse{}
	return &this
}

// NewTerraformResponseWithDefaults instantiates a new TerraformResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTerraformResponseWithDefaults() *TerraformResponse {
	this := TerraformResponse{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *TerraformResponse) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TerraformResponse) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *TerraformResponse) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *TerraformResponse) SetId(v string) {
	o.Id = &v
}

func (o TerraformResponse) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TerraformResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *TerraformResponse) UnmarshalJSON(data []byte) (err error) {
	varTerraformResponse := _TerraformResponse{}

	err = json.Unmarshal(data, &varTerraformResponse)

	if err != nil {
		return err
	}

	*o = TerraformResponse(varTerraformResponse)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "id")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableTerraformResponse struct {
	value *TerraformResponse
	isSet bool
}

func (v NullableTerraformResponse) Get() *TerraformResponse {
	return v.value
}

func (v *NullableTerraformResponse) Set(val *TerraformResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableTerraformResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableTerraformResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTerraformResponse(val *TerraformResponse) *NullableTerraformResponse {
	return &NullableTerraformResponse{value: val, isSet: true}
}

func (v NullableTerraformResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTerraformResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
