/*
Qovery API

- Qovery is the fastest way to deploy your full-stack apps on any Cloud provider. - ℹ️ The API is stable and still in development.

API version: 1.0.3
Contact: support+api+documentation@qovery.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package qovery

import (
	"bytes"
	"encoding/json"
	"fmt"
	"time"
)

// checks if the InviteMember type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &InviteMember{}

// InviteMember struct for InviteMember
type InviteMember struct {
	Id               string               `json:"id"`
	CreatedAt        time.Time            `json:"created_at"`
	UpdatedAt        *time.Time           `json:"updated_at,omitempty"`
	Email            string               `json:"email"`
	Role             InviteMemberRoleEnum `json:"role"`
	InvitationLink   string               `json:"invitation_link"`
	InvitationStatus InviteStatusEnum     `json:"invitation_status"`
	OrganizationName *string              `json:"organization_name,omitempty"`
	Inviter          string               `json:"inviter"`
	LogoUrl          *string              `json:"logo_url,omitempty"`
	RoleId           *string              `json:"role_id,omitempty"`
	RoleName         *string              `json:"role_name,omitempty"`
}

type _InviteMember InviteMember

// NewInviteMember instantiates a new InviteMember object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewInviteMember(id string, createdAt time.Time, email string, role InviteMemberRoleEnum, invitationLink string, invitationStatus InviteStatusEnum, inviter string) *InviteMember {
	this := InviteMember{}
	this.Id = id
	this.CreatedAt = createdAt
	this.Email = email
	this.Role = role
	this.InvitationLink = invitationLink
	this.InvitationStatus = invitationStatus
	this.Inviter = inviter
	return &this
}

// NewInviteMemberWithDefaults instantiates a new InviteMember object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewInviteMemberWithDefaults() *InviteMember {
	this := InviteMember{}
	return &this
}

// GetId returns the Id field value
func (o *InviteMember) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *InviteMember) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *InviteMember) SetId(v string) {
	o.Id = v
}

// GetCreatedAt returns the CreatedAt field value
func (o *InviteMember) GetCreatedAt() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value
// and a boolean to check if the value has been set.
func (o *InviteMember) GetCreatedAtOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CreatedAt, true
}

// SetCreatedAt sets field value
func (o *InviteMember) SetCreatedAt(v time.Time) {
	o.CreatedAt = v
}

// GetUpdatedAt returns the UpdatedAt field value if set, zero value otherwise.
func (o *InviteMember) GetUpdatedAt() time.Time {
	if o == nil || IsNil(o.UpdatedAt) {
		var ret time.Time
		return ret
	}
	return *o.UpdatedAt
}

// GetUpdatedAtOk returns a tuple with the UpdatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InviteMember) GetUpdatedAtOk() (*time.Time, bool) {
	if o == nil || IsNil(o.UpdatedAt) {
		return nil, false
	}
	return o.UpdatedAt, true
}

// HasUpdatedAt returns a boolean if a field has been set.
func (o *InviteMember) HasUpdatedAt() bool {
	if o != nil && !IsNil(o.UpdatedAt) {
		return true
	}

	return false
}

// SetUpdatedAt gets a reference to the given time.Time and assigns it to the UpdatedAt field.
func (o *InviteMember) SetUpdatedAt(v time.Time) {
	o.UpdatedAt = &v
}

// GetEmail returns the Email field value
func (o *InviteMember) GetEmail() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Email
}

// GetEmailOk returns a tuple with the Email field value
// and a boolean to check if the value has been set.
func (o *InviteMember) GetEmailOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Email, true
}

// SetEmail sets field value
func (o *InviteMember) SetEmail(v string) {
	o.Email = v
}

// GetRole returns the Role field value
func (o *InviteMember) GetRole() InviteMemberRoleEnum {
	if o == nil {
		var ret InviteMemberRoleEnum
		return ret
	}

	return o.Role
}

// GetRoleOk returns a tuple with the Role field value
// and a boolean to check if the value has been set.
func (o *InviteMember) GetRoleOk() (*InviteMemberRoleEnum, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Role, true
}

// SetRole sets field value
func (o *InviteMember) SetRole(v InviteMemberRoleEnum) {
	o.Role = v
}

// GetInvitationLink returns the InvitationLink field value
func (o *InviteMember) GetInvitationLink() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.InvitationLink
}

// GetInvitationLinkOk returns a tuple with the InvitationLink field value
// and a boolean to check if the value has been set.
func (o *InviteMember) GetInvitationLinkOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.InvitationLink, true
}

// SetInvitationLink sets field value
func (o *InviteMember) SetInvitationLink(v string) {
	o.InvitationLink = v
}

// GetInvitationStatus returns the InvitationStatus field value
func (o *InviteMember) GetInvitationStatus() InviteStatusEnum {
	if o == nil {
		var ret InviteStatusEnum
		return ret
	}

	return o.InvitationStatus
}

// GetInvitationStatusOk returns a tuple with the InvitationStatus field value
// and a boolean to check if the value has been set.
func (o *InviteMember) GetInvitationStatusOk() (*InviteStatusEnum, bool) {
	if o == nil {
		return nil, false
	}
	return &o.InvitationStatus, true
}

// SetInvitationStatus sets field value
func (o *InviteMember) SetInvitationStatus(v InviteStatusEnum) {
	o.InvitationStatus = v
}

// GetOrganizationName returns the OrganizationName field value if set, zero value otherwise.
func (o *InviteMember) GetOrganizationName() string {
	if o == nil || IsNil(o.OrganizationName) {
		var ret string
		return ret
	}
	return *o.OrganizationName
}

// GetOrganizationNameOk returns a tuple with the OrganizationName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InviteMember) GetOrganizationNameOk() (*string, bool) {
	if o == nil || IsNil(o.OrganizationName) {
		return nil, false
	}
	return o.OrganizationName, true
}

// HasOrganizationName returns a boolean if a field has been set.
func (o *InviteMember) HasOrganizationName() bool {
	if o != nil && !IsNil(o.OrganizationName) {
		return true
	}

	return false
}

// SetOrganizationName gets a reference to the given string and assigns it to the OrganizationName field.
func (o *InviteMember) SetOrganizationName(v string) {
	o.OrganizationName = &v
}

// GetInviter returns the Inviter field value
func (o *InviteMember) GetInviter() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Inviter
}

// GetInviterOk returns a tuple with the Inviter field value
// and a boolean to check if the value has been set.
func (o *InviteMember) GetInviterOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Inviter, true
}

// SetInviter sets field value
func (o *InviteMember) SetInviter(v string) {
	o.Inviter = v
}

// GetLogoUrl returns the LogoUrl field value if set, zero value otherwise.
func (o *InviteMember) GetLogoUrl() string {
	if o == nil || IsNil(o.LogoUrl) {
		var ret string
		return ret
	}
	return *o.LogoUrl
}

// GetLogoUrlOk returns a tuple with the LogoUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InviteMember) GetLogoUrlOk() (*string, bool) {
	if o == nil || IsNil(o.LogoUrl) {
		return nil, false
	}
	return o.LogoUrl, true
}

// HasLogoUrl returns a boolean if a field has been set.
func (o *InviteMember) HasLogoUrl() bool {
	if o != nil && !IsNil(o.LogoUrl) {
		return true
	}

	return false
}

// SetLogoUrl gets a reference to the given string and assigns it to the LogoUrl field.
func (o *InviteMember) SetLogoUrl(v string) {
	o.LogoUrl = &v
}

// GetRoleId returns the RoleId field value if set, zero value otherwise.
func (o *InviteMember) GetRoleId() string {
	if o == nil || IsNil(o.RoleId) {
		var ret string
		return ret
	}
	return *o.RoleId
}

// GetRoleIdOk returns a tuple with the RoleId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InviteMember) GetRoleIdOk() (*string, bool) {
	if o == nil || IsNil(o.RoleId) {
		return nil, false
	}
	return o.RoleId, true
}

// HasRoleId returns a boolean if a field has been set.
func (o *InviteMember) HasRoleId() bool {
	if o != nil && !IsNil(o.RoleId) {
		return true
	}

	return false
}

// SetRoleId gets a reference to the given string and assigns it to the RoleId field.
func (o *InviteMember) SetRoleId(v string) {
	o.RoleId = &v
}

// GetRoleName returns the RoleName field value if set, zero value otherwise.
func (o *InviteMember) GetRoleName() string {
	if o == nil || IsNil(o.RoleName) {
		var ret string
		return ret
	}
	return *o.RoleName
}

// GetRoleNameOk returns a tuple with the RoleName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InviteMember) GetRoleNameOk() (*string, bool) {
	if o == nil || IsNil(o.RoleName) {
		return nil, false
	}
	return o.RoleName, true
}

// HasRoleName returns a boolean if a field has been set.
func (o *InviteMember) HasRoleName() bool {
	if o != nil && !IsNil(o.RoleName) {
		return true
	}

	return false
}

// SetRoleName gets a reference to the given string and assigns it to the RoleName field.
func (o *InviteMember) SetRoleName(v string) {
	o.RoleName = &v
}

func (o InviteMember) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o InviteMember) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["created_at"] = o.CreatedAt
	if !IsNil(o.UpdatedAt) {
		toSerialize["updated_at"] = o.UpdatedAt
	}
	toSerialize["email"] = o.Email
	toSerialize["role"] = o.Role
	toSerialize["invitation_link"] = o.InvitationLink
	toSerialize["invitation_status"] = o.InvitationStatus
	if !IsNil(o.OrganizationName) {
		toSerialize["organization_name"] = o.OrganizationName
	}
	toSerialize["inviter"] = o.Inviter
	if !IsNil(o.LogoUrl) {
		toSerialize["logo_url"] = o.LogoUrl
	}
	if !IsNil(o.RoleId) {
		toSerialize["role_id"] = o.RoleId
	}
	if !IsNil(o.RoleName) {
		toSerialize["role_name"] = o.RoleName
	}
	return toSerialize, nil
}

func (o *InviteMember) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"created_at",
		"email",
		"role",
		"invitation_link",
		"invitation_status",
		"inviter",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varInviteMember := _InviteMember{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varInviteMember)

	if err != nil {
		return err
	}

	*o = InviteMember(varInviteMember)

	return err
}

type NullableInviteMember struct {
	value *InviteMember
	isSet bool
}

func (v NullableInviteMember) Get() *InviteMember {
	return v.value
}

func (v *NullableInviteMember) Set(val *InviteMember) {
	v.value = val
	v.isSet = true
}

func (v NullableInviteMember) IsSet() bool {
	return v.isSet
}

func (v *NullableInviteMember) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInviteMember(val *InviteMember) *NullableInviteMember {
	return &NullableInviteMember{value: val, isSet: true}
}

func (v NullableInviteMember) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInviteMember) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
