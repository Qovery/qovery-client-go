/*
Qovery API

- Qovery is the fastest way to deploy your full-stack apps on any Cloud provider. - ℹ️ The API is stable and still in development.

API version: 1.0.3
Contact: support+api+documentation@qovery.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package qovery

import (
	"encoding/json"
	"fmt"
)

// BuildPackLanguageEnum Development language of the application
type BuildPackLanguageEnum string

// List of BuildPackLanguageEnum
const (
	CLOJURE BuildPackLanguageEnum = "CLOJURE"
	GO      BuildPackLanguageEnum = "GO"
	GRADLE  BuildPackLanguageEnum = "GRADLE"
	GRAILS  BuildPackLanguageEnum = "GRAILS"
	JAVA    BuildPackLanguageEnum = "JAVA"
	JVM     BuildPackLanguageEnum = "JVM"
	NODE_JS BuildPackLanguageEnum = "NODE_JS"
	PHP     BuildPackLanguageEnum = "PHP"
	PLAY    BuildPackLanguageEnum = "PLAY"
	PYTHON  BuildPackLanguageEnum = "PYTHON"
	SCALA   BuildPackLanguageEnum = "SCALA"
)

// All allowed values of BuildPackLanguageEnum enum
var AllowedBuildPackLanguageEnumEnumValues = []BuildPackLanguageEnum{
	"CLOJURE",
	"GO",
	"GRADLE",
	"GRAILS",
	"JAVA",
	"JVM",
	"NODE_JS",
	"PHP",
	"PLAY",
	"PYTHON",
	"SCALA",
}

func (v *BuildPackLanguageEnum) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := BuildPackLanguageEnum(value)
	for _, existing := range AllowedBuildPackLanguageEnumEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid BuildPackLanguageEnum", value)
}

// NewBuildPackLanguageEnumFromValue returns a pointer to a valid BuildPackLanguageEnum
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewBuildPackLanguageEnumFromValue(v string) (*BuildPackLanguageEnum, error) {
	ev := BuildPackLanguageEnum(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for BuildPackLanguageEnum: valid values are %v", v, AllowedBuildPackLanguageEnumEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v BuildPackLanguageEnum) IsValid() bool {
	for _, existing := range AllowedBuildPackLanguageEnumEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to BuildPackLanguageEnum value
func (v BuildPackLanguageEnum) Ptr() *BuildPackLanguageEnum {
	return &v
}

type NullableBuildPackLanguageEnum struct {
	value *BuildPackLanguageEnum
	isSet bool
}

func (v NullableBuildPackLanguageEnum) Get() *BuildPackLanguageEnum {
	return v.value
}

func (v *NullableBuildPackLanguageEnum) Set(val *BuildPackLanguageEnum) {
	v.value = val
	v.isSet = true
}

func (v NullableBuildPackLanguageEnum) IsSet() bool {
	return v.isSet
}

func (v *NullableBuildPackLanguageEnum) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBuildPackLanguageEnum(val *BuildPackLanguageEnum) *NullableBuildPackLanguageEnum {
	return &NullableBuildPackLanguageEnum{value: val, isSet: true}
}

func (v NullableBuildPackLanguageEnum) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBuildPackLanguageEnum) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
