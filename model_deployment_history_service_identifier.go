/*
Qovery API

- Qovery is the fastest way to deploy your full-stack apps on any Cloud provider. - ℹ️ The API is stable and still in development.

API version: 1.0.4
Contact: support+api+documentation@qovery.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package qovery

import (
	"encoding/json"
	"fmt"
)

// checks if the DeploymentHistoryServiceIdentifier type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DeploymentHistoryServiceIdentifier{}

// DeploymentHistoryServiceIdentifier struct for DeploymentHistoryServiceIdentifier
type DeploymentHistoryServiceIdentifier struct {
	Name                 string          `json:"name"`
	ServiceId            string          `json:"service_id"`
	ServiceType          ServiceTypeEnum `json:"service_type"`
	ExecutionId          *string         `json:"execution_id,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _DeploymentHistoryServiceIdentifier DeploymentHistoryServiceIdentifier

// NewDeploymentHistoryServiceIdentifier instantiates a new DeploymentHistoryServiceIdentifier object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDeploymentHistoryServiceIdentifier(name string, serviceId string, serviceType ServiceTypeEnum) *DeploymentHistoryServiceIdentifier {
	this := DeploymentHistoryServiceIdentifier{}
	this.Name = name
	this.ServiceId = serviceId
	this.ServiceType = serviceType
	return &this
}

// NewDeploymentHistoryServiceIdentifierWithDefaults instantiates a new DeploymentHistoryServiceIdentifier object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDeploymentHistoryServiceIdentifierWithDefaults() *DeploymentHistoryServiceIdentifier {
	this := DeploymentHistoryServiceIdentifier{}
	return &this
}

// GetName returns the Name field value
func (o *DeploymentHistoryServiceIdentifier) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *DeploymentHistoryServiceIdentifier) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *DeploymentHistoryServiceIdentifier) SetName(v string) {
	o.Name = v
}

// GetServiceId returns the ServiceId field value
func (o *DeploymentHistoryServiceIdentifier) GetServiceId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ServiceId
}

// GetServiceIdOk returns a tuple with the ServiceId field value
// and a boolean to check if the value has been set.
func (o *DeploymentHistoryServiceIdentifier) GetServiceIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ServiceId, true
}

// SetServiceId sets field value
func (o *DeploymentHistoryServiceIdentifier) SetServiceId(v string) {
	o.ServiceId = v
}

// GetServiceType returns the ServiceType field value
func (o *DeploymentHistoryServiceIdentifier) GetServiceType() ServiceTypeEnum {
	if o == nil {
		var ret ServiceTypeEnum
		return ret
	}

	return o.ServiceType
}

// GetServiceTypeOk returns a tuple with the ServiceType field value
// and a boolean to check if the value has been set.
func (o *DeploymentHistoryServiceIdentifier) GetServiceTypeOk() (*ServiceTypeEnum, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ServiceType, true
}

// SetServiceType sets field value
func (o *DeploymentHistoryServiceIdentifier) SetServiceType(v ServiceTypeEnum) {
	o.ServiceType = v
}

// GetExecutionId returns the ExecutionId field value if set, zero value otherwise.
func (o *DeploymentHistoryServiceIdentifier) GetExecutionId() string {
	if o == nil || IsNil(o.ExecutionId) {
		var ret string
		return ret
	}
	return *o.ExecutionId
}

// GetExecutionIdOk returns a tuple with the ExecutionId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeploymentHistoryServiceIdentifier) GetExecutionIdOk() (*string, bool) {
	if o == nil || IsNil(o.ExecutionId) {
		return nil, false
	}
	return o.ExecutionId, true
}

// HasExecutionId returns a boolean if a field has been set.
func (o *DeploymentHistoryServiceIdentifier) HasExecutionId() bool {
	if o != nil && !IsNil(o.ExecutionId) {
		return true
	}

	return false
}

// SetExecutionId gets a reference to the given string and assigns it to the ExecutionId field.
func (o *DeploymentHistoryServiceIdentifier) SetExecutionId(v string) {
	o.ExecutionId = &v
}

func (o DeploymentHistoryServiceIdentifier) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DeploymentHistoryServiceIdentifier) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["name"] = o.Name
	toSerialize["service_id"] = o.ServiceId
	toSerialize["service_type"] = o.ServiceType
	if !IsNil(o.ExecutionId) {
		toSerialize["execution_id"] = o.ExecutionId
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *DeploymentHistoryServiceIdentifier) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"name",
		"service_id",
		"service_type",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varDeploymentHistoryServiceIdentifier := _DeploymentHistoryServiceIdentifier{}

	err = json.Unmarshal(data, &varDeploymentHistoryServiceIdentifier)

	if err != nil {
		return err
	}

	*o = DeploymentHistoryServiceIdentifier(varDeploymentHistoryServiceIdentifier)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "name")
		delete(additionalProperties, "service_id")
		delete(additionalProperties, "service_type")
		delete(additionalProperties, "execution_id")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableDeploymentHistoryServiceIdentifier struct {
	value *DeploymentHistoryServiceIdentifier
	isSet bool
}

func (v NullableDeploymentHistoryServiceIdentifier) Get() *DeploymentHistoryServiceIdentifier {
	return v.value
}

func (v *NullableDeploymentHistoryServiceIdentifier) Set(val *DeploymentHistoryServiceIdentifier) {
	v.value = val
	v.isSet = true
}

func (v NullableDeploymentHistoryServiceIdentifier) IsSet() bool {
	return v.isSet
}

func (v *NullableDeploymentHistoryServiceIdentifier) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDeploymentHistoryServiceIdentifier(val *DeploymentHistoryServiceIdentifier) *NullableDeploymentHistoryServiceIdentifier {
	return &NullableDeploymentHistoryServiceIdentifier{value: val, isSet: true}
}

func (v NullableDeploymentHistoryServiceIdentifier) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDeploymentHistoryServiceIdentifier) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
