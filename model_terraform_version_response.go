/*
Qovery API

- Qovery is the fastest way to deploy your full-stack apps on any Cloud provider. - ℹ️ The API is stable and still in development.

API version: 1.0.4
Contact: support+api+documentation@qovery.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package qovery

import (
	"encoding/json"
	"fmt"
)

// checks if the TerraformVersionResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TerraformVersionResponse{}

// TerraformVersionResponse struct for TerraformVersionResponse
type TerraformVersionResponse struct {
	// Terraform engine
	Engine string `json:"engine"`
	// Terraform version string
	Version              string `json:"version"`
	AdditionalProperties map[string]interface{}
}

type _TerraformVersionResponse TerraformVersionResponse

// NewTerraformVersionResponse instantiates a new TerraformVersionResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTerraformVersionResponse(engine string, version string) *TerraformVersionResponse {
	this := TerraformVersionResponse{}
	this.Engine = engine
	this.Version = version
	return &this
}

// NewTerraformVersionResponseWithDefaults instantiates a new TerraformVersionResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTerraformVersionResponseWithDefaults() *TerraformVersionResponse {
	this := TerraformVersionResponse{}
	return &this
}

// GetEngine returns the Engine field value
func (o *TerraformVersionResponse) GetEngine() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Engine
}

// GetEngineOk returns a tuple with the Engine field value
// and a boolean to check if the value has been set.
func (o *TerraformVersionResponse) GetEngineOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Engine, true
}

// SetEngine sets field value
func (o *TerraformVersionResponse) SetEngine(v string) {
	o.Engine = v
}

// GetVersion returns the Version field value
func (o *TerraformVersionResponse) GetVersion() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Version
}

// GetVersionOk returns a tuple with the Version field value
// and a boolean to check if the value has been set.
func (o *TerraformVersionResponse) GetVersionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Version, true
}

// SetVersion sets field value
func (o *TerraformVersionResponse) SetVersion(v string) {
	o.Version = v
}

func (o TerraformVersionResponse) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TerraformVersionResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["engine"] = o.Engine
	toSerialize["version"] = o.Version

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *TerraformVersionResponse) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"engine",
		"version",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varTerraformVersionResponse := _TerraformVersionResponse{}

	err = json.Unmarshal(data, &varTerraformVersionResponse)

	if err != nil {
		return err
	}

	*o = TerraformVersionResponse(varTerraformVersionResponse)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "engine")
		delete(additionalProperties, "version")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableTerraformVersionResponse struct {
	value *TerraformVersionResponse
	isSet bool
}

func (v NullableTerraformVersionResponse) Get() *TerraformVersionResponse {
	return v.value
}

func (v *NullableTerraformVersionResponse) Set(val *TerraformVersionResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableTerraformVersionResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableTerraformVersionResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTerraformVersionResponse(val *TerraformVersionResponse) *NullableTerraformVersionResponse {
	return &NullableTerraformVersionResponse{value: val, isSet: true}
}

func (v NullableTerraformVersionResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTerraformVersionResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
