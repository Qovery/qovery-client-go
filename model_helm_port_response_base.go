/*
Qovery API

- Qovery is the fastest way to deploy your full-stack apps on any Cloud provider. - ℹ️ The API is stable and still in development.

API version: 1.0.3
Contact: support+api+documentation@qovery.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package qovery

import (
	"encoding/json"
	"fmt"
)

// checks if the HelmPortResponseBase type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &HelmPortResponseBase{}

// HelmPortResponseBase struct for HelmPortResponseBase
type HelmPortResponseBase struct {
	Id       string  `json:"id"`
	PortType string  `json:"port_type"`
	Name     *string `json:"name,omitempty"`
	// The listening port of your service.
	InternalPort int32 `json:"internal_port"`
	// The exposed port for your service. This is optional. If not set a default port will be used.
	ExternalPort *int32               `json:"external_port,omitempty"`
	Namespace    *string              `json:"namespace,omitempty"`
	Protocol     HelmPortProtocolEnum `json:"protocol"`
	// is the default port to use for domain
	IsDefault            *bool `json:"is_default,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _HelmPortResponseBase HelmPortResponseBase

// NewHelmPortResponseBase instantiates a new HelmPortResponseBase object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewHelmPortResponseBase(id string, portType string, internalPort int32, protocol HelmPortProtocolEnum) *HelmPortResponseBase {
	this := HelmPortResponseBase{}
	this.Id = id
	this.PortType = portType
	this.InternalPort = internalPort
	this.Protocol = protocol
	return &this
}

// NewHelmPortResponseBaseWithDefaults instantiates a new HelmPortResponseBase object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewHelmPortResponseBaseWithDefaults() *HelmPortResponseBase {
	this := HelmPortResponseBase{}
	var protocol HelmPortProtocolEnum = HELMPORTPROTOCOLENUM_HTTP
	this.Protocol = protocol
	return &this
}

// GetId returns the Id field value
func (o *HelmPortResponseBase) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *HelmPortResponseBase) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *HelmPortResponseBase) SetId(v string) {
	o.Id = v
}

// GetPortType returns the PortType field value
func (o *HelmPortResponseBase) GetPortType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.PortType
}

// GetPortTypeOk returns a tuple with the PortType field value
// and a boolean to check if the value has been set.
func (o *HelmPortResponseBase) GetPortTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.PortType, true
}

// SetPortType sets field value
func (o *HelmPortResponseBase) SetPortType(v string) {
	o.PortType = v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *HelmPortResponseBase) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HelmPortResponseBase) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *HelmPortResponseBase) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *HelmPortResponseBase) SetName(v string) {
	o.Name = &v
}

// GetInternalPort returns the InternalPort field value
func (o *HelmPortResponseBase) GetInternalPort() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.InternalPort
}

// GetInternalPortOk returns a tuple with the InternalPort field value
// and a boolean to check if the value has been set.
func (o *HelmPortResponseBase) GetInternalPortOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.InternalPort, true
}

// SetInternalPort sets field value
func (o *HelmPortResponseBase) SetInternalPort(v int32) {
	o.InternalPort = v
}

// GetExternalPort returns the ExternalPort field value if set, zero value otherwise.
func (o *HelmPortResponseBase) GetExternalPort() int32 {
	if o == nil || IsNil(o.ExternalPort) {
		var ret int32
		return ret
	}
	return *o.ExternalPort
}

// GetExternalPortOk returns a tuple with the ExternalPort field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HelmPortResponseBase) GetExternalPortOk() (*int32, bool) {
	if o == nil || IsNil(o.ExternalPort) {
		return nil, false
	}
	return o.ExternalPort, true
}

// HasExternalPort returns a boolean if a field has been set.
func (o *HelmPortResponseBase) HasExternalPort() bool {
	if o != nil && !IsNil(o.ExternalPort) {
		return true
	}

	return false
}

// SetExternalPort gets a reference to the given int32 and assigns it to the ExternalPort field.
func (o *HelmPortResponseBase) SetExternalPort(v int32) {
	o.ExternalPort = &v
}

// GetNamespace returns the Namespace field value if set, zero value otherwise.
func (o *HelmPortResponseBase) GetNamespace() string {
	if o == nil || IsNil(o.Namespace) {
		var ret string
		return ret
	}
	return *o.Namespace
}

// GetNamespaceOk returns a tuple with the Namespace field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HelmPortResponseBase) GetNamespaceOk() (*string, bool) {
	if o == nil || IsNil(o.Namespace) {
		return nil, false
	}
	return o.Namespace, true
}

// HasNamespace returns a boolean if a field has been set.
func (o *HelmPortResponseBase) HasNamespace() bool {
	if o != nil && !IsNil(o.Namespace) {
		return true
	}

	return false
}

// SetNamespace gets a reference to the given string and assigns it to the Namespace field.
func (o *HelmPortResponseBase) SetNamespace(v string) {
	o.Namespace = &v
}

// GetProtocol returns the Protocol field value
func (o *HelmPortResponseBase) GetProtocol() HelmPortProtocolEnum {
	if o == nil {
		var ret HelmPortProtocolEnum
		return ret
	}

	return o.Protocol
}

// GetProtocolOk returns a tuple with the Protocol field value
// and a boolean to check if the value has been set.
func (o *HelmPortResponseBase) GetProtocolOk() (*HelmPortProtocolEnum, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Protocol, true
}

// SetProtocol sets field value
func (o *HelmPortResponseBase) SetProtocol(v HelmPortProtocolEnum) {
	o.Protocol = v
}

// GetIsDefault returns the IsDefault field value if set, zero value otherwise.
func (o *HelmPortResponseBase) GetIsDefault() bool {
	if o == nil || IsNil(o.IsDefault) {
		var ret bool
		return ret
	}
	return *o.IsDefault
}

// GetIsDefaultOk returns a tuple with the IsDefault field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HelmPortResponseBase) GetIsDefaultOk() (*bool, bool) {
	if o == nil || IsNil(o.IsDefault) {
		return nil, false
	}
	return o.IsDefault, true
}

// HasIsDefault returns a boolean if a field has been set.
func (o *HelmPortResponseBase) HasIsDefault() bool {
	if o != nil && !IsNil(o.IsDefault) {
		return true
	}

	return false
}

// SetIsDefault gets a reference to the given bool and assigns it to the IsDefault field.
func (o *HelmPortResponseBase) SetIsDefault(v bool) {
	o.IsDefault = &v
}

func (o HelmPortResponseBase) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o HelmPortResponseBase) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["port_type"] = o.PortType
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	toSerialize["internal_port"] = o.InternalPort
	if !IsNil(o.ExternalPort) {
		toSerialize["external_port"] = o.ExternalPort
	}
	if !IsNil(o.Namespace) {
		toSerialize["namespace"] = o.Namespace
	}
	toSerialize["protocol"] = o.Protocol
	if !IsNil(o.IsDefault) {
		toSerialize["is_default"] = o.IsDefault
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *HelmPortResponseBase) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"port_type",
		"internal_port",
		"protocol",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varHelmPortResponseBase := _HelmPortResponseBase{}

	err = json.Unmarshal(data, &varHelmPortResponseBase)

	if err != nil {
		return err
	}

	*o = HelmPortResponseBase(varHelmPortResponseBase)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "id")
		delete(additionalProperties, "port_type")
		delete(additionalProperties, "name")
		delete(additionalProperties, "internal_port")
		delete(additionalProperties, "external_port")
		delete(additionalProperties, "namespace")
		delete(additionalProperties, "protocol")
		delete(additionalProperties, "is_default")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableHelmPortResponseBase struct {
	value *HelmPortResponseBase
	isSet bool
}

func (v NullableHelmPortResponseBase) Get() *HelmPortResponseBase {
	return v.value
}

func (v *NullableHelmPortResponseBase) Set(val *HelmPortResponseBase) {
	v.value = val
	v.isSet = true
}

func (v NullableHelmPortResponseBase) IsSet() bool {
	return v.isSet
}

func (v *NullableHelmPortResponseBase) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableHelmPortResponseBase(val *HelmPortResponseBase) *NullableHelmPortResponseBase {
	return &NullableHelmPortResponseBase{value: val, isSet: true}
}

func (v NullableHelmPortResponseBase) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableHelmPortResponseBase) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
