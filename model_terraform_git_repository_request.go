/*
Qovery API

- Qovery is the fastest way to deploy your full-stack apps on any Cloud provider. - ℹ️ The API is stable and still in development.

API version: 1.0.3
Contact: support+api+documentation@qovery.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package qovery

import (
	"encoding/json"
	"fmt"
)

// checks if the TerraformGitRepositoryRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TerraformGitRepositoryRequest{}

// TerraformGitRepositoryRequest struct for TerraformGitRepositoryRequest
type TerraformGitRepositoryRequest struct {
	Url                  string  `json:"url"`
	Branch               *string `json:"branch,omitempty"`
	RootPath             *string `json:"root_path,omitempty"`
	GitTokenId           *string `json:"git_token_id,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _TerraformGitRepositoryRequest TerraformGitRepositoryRequest

// NewTerraformGitRepositoryRequest instantiates a new TerraformGitRepositoryRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTerraformGitRepositoryRequest(url string) *TerraformGitRepositoryRequest {
	this := TerraformGitRepositoryRequest{}
	this.Url = url
	return &this
}

// NewTerraformGitRepositoryRequestWithDefaults instantiates a new TerraformGitRepositoryRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTerraformGitRepositoryRequestWithDefaults() *TerraformGitRepositoryRequest {
	this := TerraformGitRepositoryRequest{}
	return &this
}

// GetUrl returns the Url field value
func (o *TerraformGitRepositoryRequest) GetUrl() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Url
}

// GetUrlOk returns a tuple with the Url field value
// and a boolean to check if the value has been set.
func (o *TerraformGitRepositoryRequest) GetUrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Url, true
}

// SetUrl sets field value
func (o *TerraformGitRepositoryRequest) SetUrl(v string) {
	o.Url = v
}

// GetBranch returns the Branch field value if set, zero value otherwise.
func (o *TerraformGitRepositoryRequest) GetBranch() string {
	if o == nil || IsNil(o.Branch) {
		var ret string
		return ret
	}
	return *o.Branch
}

// GetBranchOk returns a tuple with the Branch field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TerraformGitRepositoryRequest) GetBranchOk() (*string, bool) {
	if o == nil || IsNil(o.Branch) {
		return nil, false
	}
	return o.Branch, true
}

// HasBranch returns a boolean if a field has been set.
func (o *TerraformGitRepositoryRequest) HasBranch() bool {
	if o != nil && !IsNil(o.Branch) {
		return true
	}

	return false
}

// SetBranch gets a reference to the given string and assigns it to the Branch field.
func (o *TerraformGitRepositoryRequest) SetBranch(v string) {
	o.Branch = &v
}

// GetRootPath returns the RootPath field value if set, zero value otherwise.
func (o *TerraformGitRepositoryRequest) GetRootPath() string {
	if o == nil || IsNil(o.RootPath) {
		var ret string
		return ret
	}
	return *o.RootPath
}

// GetRootPathOk returns a tuple with the RootPath field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TerraformGitRepositoryRequest) GetRootPathOk() (*string, bool) {
	if o == nil || IsNil(o.RootPath) {
		return nil, false
	}
	return o.RootPath, true
}

// HasRootPath returns a boolean if a field has been set.
func (o *TerraformGitRepositoryRequest) HasRootPath() bool {
	if o != nil && !IsNil(o.RootPath) {
		return true
	}

	return false
}

// SetRootPath gets a reference to the given string and assigns it to the RootPath field.
func (o *TerraformGitRepositoryRequest) SetRootPath(v string) {
	o.RootPath = &v
}

// GetGitTokenId returns the GitTokenId field value if set, zero value otherwise.
func (o *TerraformGitRepositoryRequest) GetGitTokenId() string {
	if o == nil || IsNil(o.GitTokenId) {
		var ret string
		return ret
	}
	return *o.GitTokenId
}

// GetGitTokenIdOk returns a tuple with the GitTokenId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TerraformGitRepositoryRequest) GetGitTokenIdOk() (*string, bool) {
	if o == nil || IsNil(o.GitTokenId) {
		return nil, false
	}
	return o.GitTokenId, true
}

// HasGitTokenId returns a boolean if a field has been set.
func (o *TerraformGitRepositoryRequest) HasGitTokenId() bool {
	if o != nil && !IsNil(o.GitTokenId) {
		return true
	}

	return false
}

// SetGitTokenId gets a reference to the given string and assigns it to the GitTokenId field.
func (o *TerraformGitRepositoryRequest) SetGitTokenId(v string) {
	o.GitTokenId = &v
}

func (o TerraformGitRepositoryRequest) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TerraformGitRepositoryRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["url"] = o.Url
	if !IsNil(o.Branch) {
		toSerialize["branch"] = o.Branch
	}
	if !IsNil(o.RootPath) {
		toSerialize["root_path"] = o.RootPath
	}
	if !IsNil(o.GitTokenId) {
		toSerialize["git_token_id"] = o.GitTokenId
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *TerraformGitRepositoryRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"url",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varTerraformGitRepositoryRequest := _TerraformGitRepositoryRequest{}

	err = json.Unmarshal(data, &varTerraformGitRepositoryRequest)

	if err != nil {
		return err
	}

	*o = TerraformGitRepositoryRequest(varTerraformGitRepositoryRequest)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "url")
		delete(additionalProperties, "branch")
		delete(additionalProperties, "root_path")
		delete(additionalProperties, "git_token_id")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableTerraformGitRepositoryRequest struct {
	value *TerraformGitRepositoryRequest
	isSet bool
}

func (v NullableTerraformGitRepositoryRequest) Get() *TerraformGitRepositoryRequest {
	return v.value
}

func (v *NullableTerraformGitRepositoryRequest) Set(val *TerraformGitRepositoryRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableTerraformGitRepositoryRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableTerraformGitRepositoryRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTerraformGitRepositoryRequest(val *TerraformGitRepositoryRequest) *NullableTerraformGitRepositoryRequest {
	return &NullableTerraformGitRepositoryRequest{value: val, isSet: true}
}

func (v NullableTerraformGitRepositoryRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTerraformGitRepositoryRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
