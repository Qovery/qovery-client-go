/*
Qovery API

- Qovery is the fastest way to deploy your full-stack apps on any Cloud provider. - ℹ️ The API is stable and still in development.

API version: 1.0.3
Contact: support+api+documentation@qovery.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package qovery

import (
	"encoding/json"
)

// JobAdvancedSettings struct for JobAdvancedSettings
type JobAdvancedSettings struct {
	JobDeleteTtlSecondsAfterFinished NullableInt32 `json:"job.delete_ttl_seconds_after_finished,omitempty"`
	CronjobConcurrencyPolicy         *string       `json:"cronjob.concurrency_policy,omitempty"`
	CronjobFailedJobsHistoryLimit    *int32        `json:"cronjob.failed_jobs_history_limit,omitempty"`
	CronjobSuccessJobsHistoryLimit   *int32        `json:"cronjob.success_jobs_history_limit,omitempty"`
	// `NONE` disable readiness probe `TCP` enable TCP readiness probe `HTTP` enable HTTP readiness probe
	ReadinessProbeType *string `json:"readiness_probe.type,omitempty"`
	// HTTP GET path to check status (must returns 2xx E.g \"/healtz\") - only usable with TYPE = HTTP
	ReadinessProbeHttpGetPath *string `json:"readiness_probe.http_get.path,omitempty"`
	// Delay before liveness probe is initiated
	ReadinessProbeInitialDelaySeconds *int32 `json:"readiness_probe.initial_delay_seconds,omitempty"`
	// How often to perform the probe
	ReadinessProbePeriodSeconds *int32 `json:"readiness_probe.period_seconds,omitempty"`
	// When the probe times out
	ReadinessProbeTimeoutSeconds *int32 `json:"readiness_probe.timeout_seconds,omitempty"`
	// Minimum consecutive successes for the probe to be considered successful after having failed.
	ReadinessProbeSuccessThreshold *int32 `json:"readiness_probe.success_threshold,omitempty"`
	// Minimum consecutive failures for the probe to be considered failed after having succeeded.
	ReadinessProbeFailureThreshold *int32 `json:"readiness_probe.failure_threshold,omitempty"`
	// `NONE` disable liveness probe `TCP` enable TCP liveness probe `HTTP` enable HTTP liveness probe
	LivenessProbeType *string `json:"liveness_probe.type,omitempty"`
	// HTTP GET path to check status (must returns 2xx E.g \"/healtz\") - only usable with TYPE = HTTP
	LivenessProbeHttpGetPath *string `json:"liveness_probe.http_get.path,omitempty"`
	// Delay before liveness probe is initiated
	LivenessProbeInitialDelaySeconds *int32 `json:"liveness_probe.initial_delay_seconds,omitempty"`
	// How often to perform the probe
	LivenessProbePeriodSeconds *int32 `json:"liveness_probe.period_seconds,omitempty"`
	// When the probe times out
	LivenessProbeTimeoutSeconds *int32 `json:"liveness_probe.timeout_seconds,omitempty"`
	// Minimum consecutive successes for the probe to be considered successful after having failed.
	LivenessProbeSuccessThreshold *int32 `json:"liveness_probe.success_threshold,omitempty"`
	// Minimum consecutive failures for the probe to be considered failed after having succeeded.
	LivenessProbeFailureThreshold *int32 `json:"liveness_probe.failure_threshold,omitempty"`
}

// NewJobAdvancedSettings instantiates a new JobAdvancedSettings object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewJobAdvancedSettings() *JobAdvancedSettings {
	this := JobAdvancedSettings{}
	var cronjobConcurrencyPolicy string = "Forbid"
	this.CronjobConcurrencyPolicy = &cronjobConcurrencyPolicy
	var cronjobFailedJobsHistoryLimit int32 = 1
	this.CronjobFailedJobsHistoryLimit = &cronjobFailedJobsHistoryLimit
	var cronjobSuccessJobsHistoryLimit int32 = 1
	this.CronjobSuccessJobsHistoryLimit = &cronjobSuccessJobsHistoryLimit
	var readinessProbeType string = "NONE"
	this.ReadinessProbeType = &readinessProbeType
	var readinessProbeHttpGetPath string = ""
	this.ReadinessProbeHttpGetPath = &readinessProbeHttpGetPath
	var readinessProbeInitialDelaySeconds int32 = 0
	this.ReadinessProbeInitialDelaySeconds = &readinessProbeInitialDelaySeconds
	var readinessProbePeriodSeconds int32 = 0
	this.ReadinessProbePeriodSeconds = &readinessProbePeriodSeconds
	var readinessProbeTimeoutSeconds int32 = 0
	this.ReadinessProbeTimeoutSeconds = &readinessProbeTimeoutSeconds
	var readinessProbeSuccessThreshold int32 = 0
	this.ReadinessProbeSuccessThreshold = &readinessProbeSuccessThreshold
	var readinessProbeFailureThreshold int32 = 0
	this.ReadinessProbeFailureThreshold = &readinessProbeFailureThreshold
	var livenessProbeType string = "NONE"
	this.LivenessProbeType = &livenessProbeType
	var livenessProbeHttpGetPath string = ""
	this.LivenessProbeHttpGetPath = &livenessProbeHttpGetPath
	var livenessProbeInitialDelaySeconds int32 = 0
	this.LivenessProbeInitialDelaySeconds = &livenessProbeInitialDelaySeconds
	var livenessProbePeriodSeconds int32 = 0
	this.LivenessProbePeriodSeconds = &livenessProbePeriodSeconds
	var livenessProbeTimeoutSeconds int32 = 0
	this.LivenessProbeTimeoutSeconds = &livenessProbeTimeoutSeconds
	var livenessProbeSuccessThreshold int32 = 0
	this.LivenessProbeSuccessThreshold = &livenessProbeSuccessThreshold
	var livenessProbeFailureThreshold int32 = 0
	this.LivenessProbeFailureThreshold = &livenessProbeFailureThreshold
	return &this
}

// NewJobAdvancedSettingsWithDefaults instantiates a new JobAdvancedSettings object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewJobAdvancedSettingsWithDefaults() *JobAdvancedSettings {
	this := JobAdvancedSettings{}
	var cronjobConcurrencyPolicy string = "Forbid"
	this.CronjobConcurrencyPolicy = &cronjobConcurrencyPolicy
	var cronjobFailedJobsHistoryLimit int32 = 1
	this.CronjobFailedJobsHistoryLimit = &cronjobFailedJobsHistoryLimit
	var cronjobSuccessJobsHistoryLimit int32 = 1
	this.CronjobSuccessJobsHistoryLimit = &cronjobSuccessJobsHistoryLimit
	var readinessProbeType string = "NONE"
	this.ReadinessProbeType = &readinessProbeType
	var readinessProbeHttpGetPath string = ""
	this.ReadinessProbeHttpGetPath = &readinessProbeHttpGetPath
	var readinessProbeInitialDelaySeconds int32 = 0
	this.ReadinessProbeInitialDelaySeconds = &readinessProbeInitialDelaySeconds
	var readinessProbePeriodSeconds int32 = 0
	this.ReadinessProbePeriodSeconds = &readinessProbePeriodSeconds
	var readinessProbeTimeoutSeconds int32 = 0
	this.ReadinessProbeTimeoutSeconds = &readinessProbeTimeoutSeconds
	var readinessProbeSuccessThreshold int32 = 0
	this.ReadinessProbeSuccessThreshold = &readinessProbeSuccessThreshold
	var readinessProbeFailureThreshold int32 = 0
	this.ReadinessProbeFailureThreshold = &readinessProbeFailureThreshold
	var livenessProbeType string = "NONE"
	this.LivenessProbeType = &livenessProbeType
	var livenessProbeHttpGetPath string = ""
	this.LivenessProbeHttpGetPath = &livenessProbeHttpGetPath
	var livenessProbeInitialDelaySeconds int32 = 0
	this.LivenessProbeInitialDelaySeconds = &livenessProbeInitialDelaySeconds
	var livenessProbePeriodSeconds int32 = 0
	this.LivenessProbePeriodSeconds = &livenessProbePeriodSeconds
	var livenessProbeTimeoutSeconds int32 = 0
	this.LivenessProbeTimeoutSeconds = &livenessProbeTimeoutSeconds
	var livenessProbeSuccessThreshold int32 = 0
	this.LivenessProbeSuccessThreshold = &livenessProbeSuccessThreshold
	var livenessProbeFailureThreshold int32 = 0
	this.LivenessProbeFailureThreshold = &livenessProbeFailureThreshold
	return &this
}

// GetJobDeleteTtlSecondsAfterFinished returns the JobDeleteTtlSecondsAfterFinished field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *JobAdvancedSettings) GetJobDeleteTtlSecondsAfterFinished() int32 {
	if o == nil || o.JobDeleteTtlSecondsAfterFinished.Get() == nil {
		var ret int32
		return ret
	}
	return *o.JobDeleteTtlSecondsAfterFinished.Get()
}

// GetJobDeleteTtlSecondsAfterFinishedOk returns a tuple with the JobDeleteTtlSecondsAfterFinished field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *JobAdvancedSettings) GetJobDeleteTtlSecondsAfterFinishedOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.JobDeleteTtlSecondsAfterFinished.Get(), o.JobDeleteTtlSecondsAfterFinished.IsSet()
}

// HasJobDeleteTtlSecondsAfterFinished returns a boolean if a field has been set.
func (o *JobAdvancedSettings) HasJobDeleteTtlSecondsAfterFinished() bool {
	if o != nil && o.JobDeleteTtlSecondsAfterFinished.IsSet() {
		return true
	}

	return false
}

// SetJobDeleteTtlSecondsAfterFinished gets a reference to the given NullableInt32 and assigns it to the JobDeleteTtlSecondsAfterFinished field.
func (o *JobAdvancedSettings) SetJobDeleteTtlSecondsAfterFinished(v int32) {
	o.JobDeleteTtlSecondsAfterFinished.Set(&v)
}

// SetJobDeleteTtlSecondsAfterFinishedNil sets the value for JobDeleteTtlSecondsAfterFinished to be an explicit nil
func (o *JobAdvancedSettings) SetJobDeleteTtlSecondsAfterFinishedNil() {
	o.JobDeleteTtlSecondsAfterFinished.Set(nil)
}

// UnsetJobDeleteTtlSecondsAfterFinished ensures that no value is present for JobDeleteTtlSecondsAfterFinished, not even an explicit nil
func (o *JobAdvancedSettings) UnsetJobDeleteTtlSecondsAfterFinished() {
	o.JobDeleteTtlSecondsAfterFinished.Unset()
}

// GetCronjobConcurrencyPolicy returns the CronjobConcurrencyPolicy field value if set, zero value otherwise.
func (o *JobAdvancedSettings) GetCronjobConcurrencyPolicy() string {
	if o == nil || o.CronjobConcurrencyPolicy == nil {
		var ret string
		return ret
	}
	return *o.CronjobConcurrencyPolicy
}

// GetCronjobConcurrencyPolicyOk returns a tuple with the CronjobConcurrencyPolicy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JobAdvancedSettings) GetCronjobConcurrencyPolicyOk() (*string, bool) {
	if o == nil || o.CronjobConcurrencyPolicy == nil {
		return nil, false
	}
	return o.CronjobConcurrencyPolicy, true
}

// HasCronjobConcurrencyPolicy returns a boolean if a field has been set.
func (o *JobAdvancedSettings) HasCronjobConcurrencyPolicy() bool {
	if o != nil && o.CronjobConcurrencyPolicy != nil {
		return true
	}

	return false
}

// SetCronjobConcurrencyPolicy gets a reference to the given string and assigns it to the CronjobConcurrencyPolicy field.
func (o *JobAdvancedSettings) SetCronjobConcurrencyPolicy(v string) {
	o.CronjobConcurrencyPolicy = &v
}

// GetCronjobFailedJobsHistoryLimit returns the CronjobFailedJobsHistoryLimit field value if set, zero value otherwise.
func (o *JobAdvancedSettings) GetCronjobFailedJobsHistoryLimit() int32 {
	if o == nil || o.CronjobFailedJobsHistoryLimit == nil {
		var ret int32
		return ret
	}
	return *o.CronjobFailedJobsHistoryLimit
}

// GetCronjobFailedJobsHistoryLimitOk returns a tuple with the CronjobFailedJobsHistoryLimit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JobAdvancedSettings) GetCronjobFailedJobsHistoryLimitOk() (*int32, bool) {
	if o == nil || o.CronjobFailedJobsHistoryLimit == nil {
		return nil, false
	}
	return o.CronjobFailedJobsHistoryLimit, true
}

// HasCronjobFailedJobsHistoryLimit returns a boolean if a field has been set.
func (o *JobAdvancedSettings) HasCronjobFailedJobsHistoryLimit() bool {
	if o != nil && o.CronjobFailedJobsHistoryLimit != nil {
		return true
	}

	return false
}

// SetCronjobFailedJobsHistoryLimit gets a reference to the given int32 and assigns it to the CronjobFailedJobsHistoryLimit field.
func (o *JobAdvancedSettings) SetCronjobFailedJobsHistoryLimit(v int32) {
	o.CronjobFailedJobsHistoryLimit = &v
}

// GetCronjobSuccessJobsHistoryLimit returns the CronjobSuccessJobsHistoryLimit field value if set, zero value otherwise.
func (o *JobAdvancedSettings) GetCronjobSuccessJobsHistoryLimit() int32 {
	if o == nil || o.CronjobSuccessJobsHistoryLimit == nil {
		var ret int32
		return ret
	}
	return *o.CronjobSuccessJobsHistoryLimit
}

// GetCronjobSuccessJobsHistoryLimitOk returns a tuple with the CronjobSuccessJobsHistoryLimit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JobAdvancedSettings) GetCronjobSuccessJobsHistoryLimitOk() (*int32, bool) {
	if o == nil || o.CronjobSuccessJobsHistoryLimit == nil {
		return nil, false
	}
	return o.CronjobSuccessJobsHistoryLimit, true
}

// HasCronjobSuccessJobsHistoryLimit returns a boolean if a field has been set.
func (o *JobAdvancedSettings) HasCronjobSuccessJobsHistoryLimit() bool {
	if o != nil && o.CronjobSuccessJobsHistoryLimit != nil {
		return true
	}

	return false
}

// SetCronjobSuccessJobsHistoryLimit gets a reference to the given int32 and assigns it to the CronjobSuccessJobsHistoryLimit field.
func (o *JobAdvancedSettings) SetCronjobSuccessJobsHistoryLimit(v int32) {
	o.CronjobSuccessJobsHistoryLimit = &v
}

// GetReadinessProbeType returns the ReadinessProbeType field value if set, zero value otherwise.
func (o *JobAdvancedSettings) GetReadinessProbeType() string {
	if o == nil || o.ReadinessProbeType == nil {
		var ret string
		return ret
	}
	return *o.ReadinessProbeType
}

// GetReadinessProbeTypeOk returns a tuple with the ReadinessProbeType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JobAdvancedSettings) GetReadinessProbeTypeOk() (*string, bool) {
	if o == nil || o.ReadinessProbeType == nil {
		return nil, false
	}
	return o.ReadinessProbeType, true
}

// HasReadinessProbeType returns a boolean if a field has been set.
func (o *JobAdvancedSettings) HasReadinessProbeType() bool {
	if o != nil && o.ReadinessProbeType != nil {
		return true
	}

	return false
}

// SetReadinessProbeType gets a reference to the given string and assigns it to the ReadinessProbeType field.
func (o *JobAdvancedSettings) SetReadinessProbeType(v string) {
	o.ReadinessProbeType = &v
}

// GetReadinessProbeHttpGetPath returns the ReadinessProbeHttpGetPath field value if set, zero value otherwise.
func (o *JobAdvancedSettings) GetReadinessProbeHttpGetPath() string {
	if o == nil || o.ReadinessProbeHttpGetPath == nil {
		var ret string
		return ret
	}
	return *o.ReadinessProbeHttpGetPath
}

// GetReadinessProbeHttpGetPathOk returns a tuple with the ReadinessProbeHttpGetPath field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JobAdvancedSettings) GetReadinessProbeHttpGetPathOk() (*string, bool) {
	if o == nil || o.ReadinessProbeHttpGetPath == nil {
		return nil, false
	}
	return o.ReadinessProbeHttpGetPath, true
}

// HasReadinessProbeHttpGetPath returns a boolean if a field has been set.
func (o *JobAdvancedSettings) HasReadinessProbeHttpGetPath() bool {
	if o != nil && o.ReadinessProbeHttpGetPath != nil {
		return true
	}

	return false
}

// SetReadinessProbeHttpGetPath gets a reference to the given string and assigns it to the ReadinessProbeHttpGetPath field.
func (o *JobAdvancedSettings) SetReadinessProbeHttpGetPath(v string) {
	o.ReadinessProbeHttpGetPath = &v
}

// GetReadinessProbeInitialDelaySeconds returns the ReadinessProbeInitialDelaySeconds field value if set, zero value otherwise.
func (o *JobAdvancedSettings) GetReadinessProbeInitialDelaySeconds() int32 {
	if o == nil || o.ReadinessProbeInitialDelaySeconds == nil {
		var ret int32
		return ret
	}
	return *o.ReadinessProbeInitialDelaySeconds
}

// GetReadinessProbeInitialDelaySecondsOk returns a tuple with the ReadinessProbeInitialDelaySeconds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JobAdvancedSettings) GetReadinessProbeInitialDelaySecondsOk() (*int32, bool) {
	if o == nil || o.ReadinessProbeInitialDelaySeconds == nil {
		return nil, false
	}
	return o.ReadinessProbeInitialDelaySeconds, true
}

// HasReadinessProbeInitialDelaySeconds returns a boolean if a field has been set.
func (o *JobAdvancedSettings) HasReadinessProbeInitialDelaySeconds() bool {
	if o != nil && o.ReadinessProbeInitialDelaySeconds != nil {
		return true
	}

	return false
}

// SetReadinessProbeInitialDelaySeconds gets a reference to the given int32 and assigns it to the ReadinessProbeInitialDelaySeconds field.
func (o *JobAdvancedSettings) SetReadinessProbeInitialDelaySeconds(v int32) {
	o.ReadinessProbeInitialDelaySeconds = &v
}

// GetReadinessProbePeriodSeconds returns the ReadinessProbePeriodSeconds field value if set, zero value otherwise.
func (o *JobAdvancedSettings) GetReadinessProbePeriodSeconds() int32 {
	if o == nil || o.ReadinessProbePeriodSeconds == nil {
		var ret int32
		return ret
	}
	return *o.ReadinessProbePeriodSeconds
}

// GetReadinessProbePeriodSecondsOk returns a tuple with the ReadinessProbePeriodSeconds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JobAdvancedSettings) GetReadinessProbePeriodSecondsOk() (*int32, bool) {
	if o == nil || o.ReadinessProbePeriodSeconds == nil {
		return nil, false
	}
	return o.ReadinessProbePeriodSeconds, true
}

// HasReadinessProbePeriodSeconds returns a boolean if a field has been set.
func (o *JobAdvancedSettings) HasReadinessProbePeriodSeconds() bool {
	if o != nil && o.ReadinessProbePeriodSeconds != nil {
		return true
	}

	return false
}

// SetReadinessProbePeriodSeconds gets a reference to the given int32 and assigns it to the ReadinessProbePeriodSeconds field.
func (o *JobAdvancedSettings) SetReadinessProbePeriodSeconds(v int32) {
	o.ReadinessProbePeriodSeconds = &v
}

// GetReadinessProbeTimeoutSeconds returns the ReadinessProbeTimeoutSeconds field value if set, zero value otherwise.
func (o *JobAdvancedSettings) GetReadinessProbeTimeoutSeconds() int32 {
	if o == nil || o.ReadinessProbeTimeoutSeconds == nil {
		var ret int32
		return ret
	}
	return *o.ReadinessProbeTimeoutSeconds
}

// GetReadinessProbeTimeoutSecondsOk returns a tuple with the ReadinessProbeTimeoutSeconds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JobAdvancedSettings) GetReadinessProbeTimeoutSecondsOk() (*int32, bool) {
	if o == nil || o.ReadinessProbeTimeoutSeconds == nil {
		return nil, false
	}
	return o.ReadinessProbeTimeoutSeconds, true
}

// HasReadinessProbeTimeoutSeconds returns a boolean if a field has been set.
func (o *JobAdvancedSettings) HasReadinessProbeTimeoutSeconds() bool {
	if o != nil && o.ReadinessProbeTimeoutSeconds != nil {
		return true
	}

	return false
}

// SetReadinessProbeTimeoutSeconds gets a reference to the given int32 and assigns it to the ReadinessProbeTimeoutSeconds field.
func (o *JobAdvancedSettings) SetReadinessProbeTimeoutSeconds(v int32) {
	o.ReadinessProbeTimeoutSeconds = &v
}

// GetReadinessProbeSuccessThreshold returns the ReadinessProbeSuccessThreshold field value if set, zero value otherwise.
func (o *JobAdvancedSettings) GetReadinessProbeSuccessThreshold() int32 {
	if o == nil || o.ReadinessProbeSuccessThreshold == nil {
		var ret int32
		return ret
	}
	return *o.ReadinessProbeSuccessThreshold
}

// GetReadinessProbeSuccessThresholdOk returns a tuple with the ReadinessProbeSuccessThreshold field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JobAdvancedSettings) GetReadinessProbeSuccessThresholdOk() (*int32, bool) {
	if o == nil || o.ReadinessProbeSuccessThreshold == nil {
		return nil, false
	}
	return o.ReadinessProbeSuccessThreshold, true
}

// HasReadinessProbeSuccessThreshold returns a boolean if a field has been set.
func (o *JobAdvancedSettings) HasReadinessProbeSuccessThreshold() bool {
	if o != nil && o.ReadinessProbeSuccessThreshold != nil {
		return true
	}

	return false
}

// SetReadinessProbeSuccessThreshold gets a reference to the given int32 and assigns it to the ReadinessProbeSuccessThreshold field.
func (o *JobAdvancedSettings) SetReadinessProbeSuccessThreshold(v int32) {
	o.ReadinessProbeSuccessThreshold = &v
}

// GetReadinessProbeFailureThreshold returns the ReadinessProbeFailureThreshold field value if set, zero value otherwise.
func (o *JobAdvancedSettings) GetReadinessProbeFailureThreshold() int32 {
	if o == nil || o.ReadinessProbeFailureThreshold == nil {
		var ret int32
		return ret
	}
	return *o.ReadinessProbeFailureThreshold
}

// GetReadinessProbeFailureThresholdOk returns a tuple with the ReadinessProbeFailureThreshold field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JobAdvancedSettings) GetReadinessProbeFailureThresholdOk() (*int32, bool) {
	if o == nil || o.ReadinessProbeFailureThreshold == nil {
		return nil, false
	}
	return o.ReadinessProbeFailureThreshold, true
}

// HasReadinessProbeFailureThreshold returns a boolean if a field has been set.
func (o *JobAdvancedSettings) HasReadinessProbeFailureThreshold() bool {
	if o != nil && o.ReadinessProbeFailureThreshold != nil {
		return true
	}

	return false
}

// SetReadinessProbeFailureThreshold gets a reference to the given int32 and assigns it to the ReadinessProbeFailureThreshold field.
func (o *JobAdvancedSettings) SetReadinessProbeFailureThreshold(v int32) {
	o.ReadinessProbeFailureThreshold = &v
}

// GetLivenessProbeType returns the LivenessProbeType field value if set, zero value otherwise.
func (o *JobAdvancedSettings) GetLivenessProbeType() string {
	if o == nil || o.LivenessProbeType == nil {
		var ret string
		return ret
	}
	return *o.LivenessProbeType
}

// GetLivenessProbeTypeOk returns a tuple with the LivenessProbeType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JobAdvancedSettings) GetLivenessProbeTypeOk() (*string, bool) {
	if o == nil || o.LivenessProbeType == nil {
		return nil, false
	}
	return o.LivenessProbeType, true
}

// HasLivenessProbeType returns a boolean if a field has been set.
func (o *JobAdvancedSettings) HasLivenessProbeType() bool {
	if o != nil && o.LivenessProbeType != nil {
		return true
	}

	return false
}

// SetLivenessProbeType gets a reference to the given string and assigns it to the LivenessProbeType field.
func (o *JobAdvancedSettings) SetLivenessProbeType(v string) {
	o.LivenessProbeType = &v
}

// GetLivenessProbeHttpGetPath returns the LivenessProbeHttpGetPath field value if set, zero value otherwise.
func (o *JobAdvancedSettings) GetLivenessProbeHttpGetPath() string {
	if o == nil || o.LivenessProbeHttpGetPath == nil {
		var ret string
		return ret
	}
	return *o.LivenessProbeHttpGetPath
}

// GetLivenessProbeHttpGetPathOk returns a tuple with the LivenessProbeHttpGetPath field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JobAdvancedSettings) GetLivenessProbeHttpGetPathOk() (*string, bool) {
	if o == nil || o.LivenessProbeHttpGetPath == nil {
		return nil, false
	}
	return o.LivenessProbeHttpGetPath, true
}

// HasLivenessProbeHttpGetPath returns a boolean if a field has been set.
func (o *JobAdvancedSettings) HasLivenessProbeHttpGetPath() bool {
	if o != nil && o.LivenessProbeHttpGetPath != nil {
		return true
	}

	return false
}

// SetLivenessProbeHttpGetPath gets a reference to the given string and assigns it to the LivenessProbeHttpGetPath field.
func (o *JobAdvancedSettings) SetLivenessProbeHttpGetPath(v string) {
	o.LivenessProbeHttpGetPath = &v
}

// GetLivenessProbeInitialDelaySeconds returns the LivenessProbeInitialDelaySeconds field value if set, zero value otherwise.
func (o *JobAdvancedSettings) GetLivenessProbeInitialDelaySeconds() int32 {
	if o == nil || o.LivenessProbeInitialDelaySeconds == nil {
		var ret int32
		return ret
	}
	return *o.LivenessProbeInitialDelaySeconds
}

// GetLivenessProbeInitialDelaySecondsOk returns a tuple with the LivenessProbeInitialDelaySeconds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JobAdvancedSettings) GetLivenessProbeInitialDelaySecondsOk() (*int32, bool) {
	if o == nil || o.LivenessProbeInitialDelaySeconds == nil {
		return nil, false
	}
	return o.LivenessProbeInitialDelaySeconds, true
}

// HasLivenessProbeInitialDelaySeconds returns a boolean if a field has been set.
func (o *JobAdvancedSettings) HasLivenessProbeInitialDelaySeconds() bool {
	if o != nil && o.LivenessProbeInitialDelaySeconds != nil {
		return true
	}

	return false
}

// SetLivenessProbeInitialDelaySeconds gets a reference to the given int32 and assigns it to the LivenessProbeInitialDelaySeconds field.
func (o *JobAdvancedSettings) SetLivenessProbeInitialDelaySeconds(v int32) {
	o.LivenessProbeInitialDelaySeconds = &v
}

// GetLivenessProbePeriodSeconds returns the LivenessProbePeriodSeconds field value if set, zero value otherwise.
func (o *JobAdvancedSettings) GetLivenessProbePeriodSeconds() int32 {
	if o == nil || o.LivenessProbePeriodSeconds == nil {
		var ret int32
		return ret
	}
	return *o.LivenessProbePeriodSeconds
}

// GetLivenessProbePeriodSecondsOk returns a tuple with the LivenessProbePeriodSeconds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JobAdvancedSettings) GetLivenessProbePeriodSecondsOk() (*int32, bool) {
	if o == nil || o.LivenessProbePeriodSeconds == nil {
		return nil, false
	}
	return o.LivenessProbePeriodSeconds, true
}

// HasLivenessProbePeriodSeconds returns a boolean if a field has been set.
func (o *JobAdvancedSettings) HasLivenessProbePeriodSeconds() bool {
	if o != nil && o.LivenessProbePeriodSeconds != nil {
		return true
	}

	return false
}

// SetLivenessProbePeriodSeconds gets a reference to the given int32 and assigns it to the LivenessProbePeriodSeconds field.
func (o *JobAdvancedSettings) SetLivenessProbePeriodSeconds(v int32) {
	o.LivenessProbePeriodSeconds = &v
}

// GetLivenessProbeTimeoutSeconds returns the LivenessProbeTimeoutSeconds field value if set, zero value otherwise.
func (o *JobAdvancedSettings) GetLivenessProbeTimeoutSeconds() int32 {
	if o == nil || o.LivenessProbeTimeoutSeconds == nil {
		var ret int32
		return ret
	}
	return *o.LivenessProbeTimeoutSeconds
}

// GetLivenessProbeTimeoutSecondsOk returns a tuple with the LivenessProbeTimeoutSeconds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JobAdvancedSettings) GetLivenessProbeTimeoutSecondsOk() (*int32, bool) {
	if o == nil || o.LivenessProbeTimeoutSeconds == nil {
		return nil, false
	}
	return o.LivenessProbeTimeoutSeconds, true
}

// HasLivenessProbeTimeoutSeconds returns a boolean if a field has been set.
func (o *JobAdvancedSettings) HasLivenessProbeTimeoutSeconds() bool {
	if o != nil && o.LivenessProbeTimeoutSeconds != nil {
		return true
	}

	return false
}

// SetLivenessProbeTimeoutSeconds gets a reference to the given int32 and assigns it to the LivenessProbeTimeoutSeconds field.
func (o *JobAdvancedSettings) SetLivenessProbeTimeoutSeconds(v int32) {
	o.LivenessProbeTimeoutSeconds = &v
}

// GetLivenessProbeSuccessThreshold returns the LivenessProbeSuccessThreshold field value if set, zero value otherwise.
func (o *JobAdvancedSettings) GetLivenessProbeSuccessThreshold() int32 {
	if o == nil || o.LivenessProbeSuccessThreshold == nil {
		var ret int32
		return ret
	}
	return *o.LivenessProbeSuccessThreshold
}

// GetLivenessProbeSuccessThresholdOk returns a tuple with the LivenessProbeSuccessThreshold field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JobAdvancedSettings) GetLivenessProbeSuccessThresholdOk() (*int32, bool) {
	if o == nil || o.LivenessProbeSuccessThreshold == nil {
		return nil, false
	}
	return o.LivenessProbeSuccessThreshold, true
}

// HasLivenessProbeSuccessThreshold returns a boolean if a field has been set.
func (o *JobAdvancedSettings) HasLivenessProbeSuccessThreshold() bool {
	if o != nil && o.LivenessProbeSuccessThreshold != nil {
		return true
	}

	return false
}

// SetLivenessProbeSuccessThreshold gets a reference to the given int32 and assigns it to the LivenessProbeSuccessThreshold field.
func (o *JobAdvancedSettings) SetLivenessProbeSuccessThreshold(v int32) {
	o.LivenessProbeSuccessThreshold = &v
}

// GetLivenessProbeFailureThreshold returns the LivenessProbeFailureThreshold field value if set, zero value otherwise.
func (o *JobAdvancedSettings) GetLivenessProbeFailureThreshold() int32 {
	if o == nil || o.LivenessProbeFailureThreshold == nil {
		var ret int32
		return ret
	}
	return *o.LivenessProbeFailureThreshold
}

// GetLivenessProbeFailureThresholdOk returns a tuple with the LivenessProbeFailureThreshold field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JobAdvancedSettings) GetLivenessProbeFailureThresholdOk() (*int32, bool) {
	if o == nil || o.LivenessProbeFailureThreshold == nil {
		return nil, false
	}
	return o.LivenessProbeFailureThreshold, true
}

// HasLivenessProbeFailureThreshold returns a boolean if a field has been set.
func (o *JobAdvancedSettings) HasLivenessProbeFailureThreshold() bool {
	if o != nil && o.LivenessProbeFailureThreshold != nil {
		return true
	}

	return false
}

// SetLivenessProbeFailureThreshold gets a reference to the given int32 and assigns it to the LivenessProbeFailureThreshold field.
func (o *JobAdvancedSettings) SetLivenessProbeFailureThreshold(v int32) {
	o.LivenessProbeFailureThreshold = &v
}

func (o JobAdvancedSettings) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.JobDeleteTtlSecondsAfterFinished.IsSet() {
		toSerialize["job.delete_ttl_seconds_after_finished"] = o.JobDeleteTtlSecondsAfterFinished.Get()
	}
	if o.CronjobConcurrencyPolicy != nil {
		toSerialize["cronjob.concurrency_policy"] = o.CronjobConcurrencyPolicy
	}
	if o.CronjobFailedJobsHistoryLimit != nil {
		toSerialize["cronjob.failed_jobs_history_limit"] = o.CronjobFailedJobsHistoryLimit
	}
	if o.CronjobSuccessJobsHistoryLimit != nil {
		toSerialize["cronjob.success_jobs_history_limit"] = o.CronjobSuccessJobsHistoryLimit
	}
	if o.ReadinessProbeType != nil {
		toSerialize["readiness_probe.type"] = o.ReadinessProbeType
	}
	if o.ReadinessProbeHttpGetPath != nil {
		toSerialize["readiness_probe.http_get.path"] = o.ReadinessProbeHttpGetPath
	}
	if o.ReadinessProbeInitialDelaySeconds != nil {
		toSerialize["readiness_probe.initial_delay_seconds"] = o.ReadinessProbeInitialDelaySeconds
	}
	if o.ReadinessProbePeriodSeconds != nil {
		toSerialize["readiness_probe.period_seconds"] = o.ReadinessProbePeriodSeconds
	}
	if o.ReadinessProbeTimeoutSeconds != nil {
		toSerialize["readiness_probe.timeout_seconds"] = o.ReadinessProbeTimeoutSeconds
	}
	if o.ReadinessProbeSuccessThreshold != nil {
		toSerialize["readiness_probe.success_threshold"] = o.ReadinessProbeSuccessThreshold
	}
	if o.ReadinessProbeFailureThreshold != nil {
		toSerialize["readiness_probe.failure_threshold"] = o.ReadinessProbeFailureThreshold
	}
	if o.LivenessProbeType != nil {
		toSerialize["liveness_probe.type"] = o.LivenessProbeType
	}
	if o.LivenessProbeHttpGetPath != nil {
		toSerialize["liveness_probe.http_get.path"] = o.LivenessProbeHttpGetPath
	}
	if o.LivenessProbeInitialDelaySeconds != nil {
		toSerialize["liveness_probe.initial_delay_seconds"] = o.LivenessProbeInitialDelaySeconds
	}
	if o.LivenessProbePeriodSeconds != nil {
		toSerialize["liveness_probe.period_seconds"] = o.LivenessProbePeriodSeconds
	}
	if o.LivenessProbeTimeoutSeconds != nil {
		toSerialize["liveness_probe.timeout_seconds"] = o.LivenessProbeTimeoutSeconds
	}
	if o.LivenessProbeSuccessThreshold != nil {
		toSerialize["liveness_probe.success_threshold"] = o.LivenessProbeSuccessThreshold
	}
	if o.LivenessProbeFailureThreshold != nil {
		toSerialize["liveness_probe.failure_threshold"] = o.LivenessProbeFailureThreshold
	}
	return json.Marshal(toSerialize)
}

type NullableJobAdvancedSettings struct {
	value *JobAdvancedSettings
	isSet bool
}

func (v NullableJobAdvancedSettings) Get() *JobAdvancedSettings {
	return v.value
}

func (v *NullableJobAdvancedSettings) Set(val *JobAdvancedSettings) {
	v.value = val
	v.isSet = true
}

func (v NullableJobAdvancedSettings) IsSet() bool {
	return v.isSet
}

func (v *NullableJobAdvancedSettings) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableJobAdvancedSettings(val *JobAdvancedSettings) *NullableJobAdvancedSettings {
	return &NullableJobAdvancedSettings{value: val, isSet: true}
}

func (v NullableJobAdvancedSettings) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableJobAdvancedSettings) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
