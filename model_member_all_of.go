/*
Qovery API

- Qovery is the fastest way to deploy your full-stack apps on any Cloud provider. - ℹ️ The API is stable and still in development.

API version: 1.0.3
Contact: support+api+documentation@qovery.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package qovery

import (
	"encoding/json"
	"time"
)

// MemberAllOf struct for MemberAllOf
type MemberAllOf struct {
	Name              *string `json:"name,omitempty"`
	Nickname          *string `json:"nickname,omitempty"`
	Email             string  `json:"email"`
	ProfilePictureUrl *string `json:"profile_picture_url,omitempty"`
	// last time the user was connected
	LastActivityAt *time.Time            `json:"last_activity_at,omitempty"`
	Role           *InviteMemberRoleEnum `json:"role,omitempty"`
	// the role linked to the user
	RoleName *string `json:"role_name,omitempty"`
}

// NewMemberAllOf instantiates a new MemberAllOf object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMemberAllOf(email string) *MemberAllOf {
	this := MemberAllOf{}
	this.Email = email
	return &this
}

// NewMemberAllOfWithDefaults instantiates a new MemberAllOf object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMemberAllOfWithDefaults() *MemberAllOf {
	this := MemberAllOf{}
	return &this
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *MemberAllOf) GetName() string {
	if o == nil || o.Name == nil {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MemberAllOf) GetNameOk() (*string, bool) {
	if o == nil || o.Name == nil {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *MemberAllOf) HasName() bool {
	if o != nil && o.Name != nil {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *MemberAllOf) SetName(v string) {
	o.Name = &v
}

// GetNickname returns the Nickname field value if set, zero value otherwise.
func (o *MemberAllOf) GetNickname() string {
	if o == nil || o.Nickname == nil {
		var ret string
		return ret
	}
	return *o.Nickname
}

// GetNicknameOk returns a tuple with the Nickname field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MemberAllOf) GetNicknameOk() (*string, bool) {
	if o == nil || o.Nickname == nil {
		return nil, false
	}
	return o.Nickname, true
}

// HasNickname returns a boolean if a field has been set.
func (o *MemberAllOf) HasNickname() bool {
	if o != nil && o.Nickname != nil {
		return true
	}

	return false
}

// SetNickname gets a reference to the given string and assigns it to the Nickname field.
func (o *MemberAllOf) SetNickname(v string) {
	o.Nickname = &v
}

// GetEmail returns the Email field value
func (o *MemberAllOf) GetEmail() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Email
}

// GetEmailOk returns a tuple with the Email field value
// and a boolean to check if the value has been set.
func (o *MemberAllOf) GetEmailOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Email, true
}

// SetEmail sets field value
func (o *MemberAllOf) SetEmail(v string) {
	o.Email = v
}

// GetProfilePictureUrl returns the ProfilePictureUrl field value if set, zero value otherwise.
func (o *MemberAllOf) GetProfilePictureUrl() string {
	if o == nil || o.ProfilePictureUrl == nil {
		var ret string
		return ret
	}
	return *o.ProfilePictureUrl
}

// GetProfilePictureUrlOk returns a tuple with the ProfilePictureUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MemberAllOf) GetProfilePictureUrlOk() (*string, bool) {
	if o == nil || o.ProfilePictureUrl == nil {
		return nil, false
	}
	return o.ProfilePictureUrl, true
}

// HasProfilePictureUrl returns a boolean if a field has been set.
func (o *MemberAllOf) HasProfilePictureUrl() bool {
	if o != nil && o.ProfilePictureUrl != nil {
		return true
	}

	return false
}

// SetProfilePictureUrl gets a reference to the given string and assigns it to the ProfilePictureUrl field.
func (o *MemberAllOf) SetProfilePictureUrl(v string) {
	o.ProfilePictureUrl = &v
}

// GetLastActivityAt returns the LastActivityAt field value if set, zero value otherwise.
func (o *MemberAllOf) GetLastActivityAt() time.Time {
	if o == nil || o.LastActivityAt == nil {
		var ret time.Time
		return ret
	}
	return *o.LastActivityAt
}

// GetLastActivityAtOk returns a tuple with the LastActivityAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MemberAllOf) GetLastActivityAtOk() (*time.Time, bool) {
	if o == nil || o.LastActivityAt == nil {
		return nil, false
	}
	return o.LastActivityAt, true
}

// HasLastActivityAt returns a boolean if a field has been set.
func (o *MemberAllOf) HasLastActivityAt() bool {
	if o != nil && o.LastActivityAt != nil {
		return true
	}

	return false
}

// SetLastActivityAt gets a reference to the given time.Time and assigns it to the LastActivityAt field.
func (o *MemberAllOf) SetLastActivityAt(v time.Time) {
	o.LastActivityAt = &v
}

// GetRole returns the Role field value if set, zero value otherwise.
func (o *MemberAllOf) GetRole() InviteMemberRoleEnum {
	if o == nil || o.Role == nil {
		var ret InviteMemberRoleEnum
		return ret
	}
	return *o.Role
}

// GetRoleOk returns a tuple with the Role field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MemberAllOf) GetRoleOk() (*InviteMemberRoleEnum, bool) {
	if o == nil || o.Role == nil {
		return nil, false
	}
	return o.Role, true
}

// HasRole returns a boolean if a field has been set.
func (o *MemberAllOf) HasRole() bool {
	if o != nil && o.Role != nil {
		return true
	}

	return false
}

// SetRole gets a reference to the given InviteMemberRoleEnum and assigns it to the Role field.
func (o *MemberAllOf) SetRole(v InviteMemberRoleEnum) {
	o.Role = &v
}

// GetRoleName returns the RoleName field value if set, zero value otherwise.
func (o *MemberAllOf) GetRoleName() string {
	if o == nil || o.RoleName == nil {
		var ret string
		return ret
	}
	return *o.RoleName
}

// GetRoleNameOk returns a tuple with the RoleName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MemberAllOf) GetRoleNameOk() (*string, bool) {
	if o == nil || o.RoleName == nil {
		return nil, false
	}
	return o.RoleName, true
}

// HasRoleName returns a boolean if a field has been set.
func (o *MemberAllOf) HasRoleName() bool {
	if o != nil && o.RoleName != nil {
		return true
	}

	return false
}

// SetRoleName gets a reference to the given string and assigns it to the RoleName field.
func (o *MemberAllOf) SetRoleName(v string) {
	o.RoleName = &v
}

func (o MemberAllOf) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Name != nil {
		toSerialize["name"] = o.Name
	}
	if o.Nickname != nil {
		toSerialize["nickname"] = o.Nickname
	}
	if true {
		toSerialize["email"] = o.Email
	}
	if o.ProfilePictureUrl != nil {
		toSerialize["profile_picture_url"] = o.ProfilePictureUrl
	}
	if o.LastActivityAt != nil {
		toSerialize["last_activity_at"] = o.LastActivityAt
	}
	if o.Role != nil {
		toSerialize["role"] = o.Role
	}
	if o.RoleName != nil {
		toSerialize["role_name"] = o.RoleName
	}
	return json.Marshal(toSerialize)
}

type NullableMemberAllOf struct {
	value *MemberAllOf
	isSet bool
}

func (v NullableMemberAllOf) Get() *MemberAllOf {
	return v.value
}

func (v *NullableMemberAllOf) Set(val *MemberAllOf) {
	v.value = val
	v.isSet = true
}

func (v NullableMemberAllOf) IsSet() bool {
	return v.isSet
}

func (v *NullableMemberAllOf) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMemberAllOf(val *MemberAllOf) *NullableMemberAllOf {
	return &NullableMemberAllOf{value: val, isSet: true}
}

func (v NullableMemberAllOf) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMemberAllOf) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
