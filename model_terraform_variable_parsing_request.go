/*
Qovery API

- Qovery is the fastest way to deploy your full-stack apps on any Cloud provider. - ℹ️ The API is stable and still in development.

API version: 1.0.4
Contact: support+api+documentation@qovery.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package qovery

import (
	"encoding/json"
	"fmt"
)

// checks if the TerraformVariableParsingRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TerraformVariableParsingRequest{}

// TerraformVariableParsingRequest struct for TerraformVariableParsingRequest
type TerraformVariableParsingRequest struct {
	GitRepository        ApplicationGitRepositoryRequest `json:"gitRepository"`
	AdditionalProperties map[string]interface{}
}

type _TerraformVariableParsingRequest TerraformVariableParsingRequest

// NewTerraformVariableParsingRequest instantiates a new TerraformVariableParsingRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTerraformVariableParsingRequest(gitRepository ApplicationGitRepositoryRequest) *TerraformVariableParsingRequest {
	this := TerraformVariableParsingRequest{}
	this.GitRepository = gitRepository
	return &this
}

// NewTerraformVariableParsingRequestWithDefaults instantiates a new TerraformVariableParsingRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTerraformVariableParsingRequestWithDefaults() *TerraformVariableParsingRequest {
	this := TerraformVariableParsingRequest{}
	return &this
}

// GetGitRepository returns the GitRepository field value
func (o *TerraformVariableParsingRequest) GetGitRepository() ApplicationGitRepositoryRequest {
	if o == nil {
		var ret ApplicationGitRepositoryRequest
		return ret
	}

	return o.GitRepository
}

// GetGitRepositoryOk returns a tuple with the GitRepository field value
// and a boolean to check if the value has been set.
func (o *TerraformVariableParsingRequest) GetGitRepositoryOk() (*ApplicationGitRepositoryRequest, bool) {
	if o == nil {
		return nil, false
	}
	return &o.GitRepository, true
}

// SetGitRepository sets field value
func (o *TerraformVariableParsingRequest) SetGitRepository(v ApplicationGitRepositoryRequest) {
	o.GitRepository = v
}

func (o TerraformVariableParsingRequest) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TerraformVariableParsingRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["gitRepository"] = o.GitRepository

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *TerraformVariableParsingRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"gitRepository",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varTerraformVariableParsingRequest := _TerraformVariableParsingRequest{}

	err = json.Unmarshal(data, &varTerraformVariableParsingRequest)

	if err != nil {
		return err
	}

	*o = TerraformVariableParsingRequest(varTerraformVariableParsingRequest)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "gitRepository")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableTerraformVariableParsingRequest struct {
	value *TerraformVariableParsingRequest
	isSet bool
}

func (v NullableTerraformVariableParsingRequest) Get() *TerraformVariableParsingRequest {
	return v.value
}

func (v *NullableTerraformVariableParsingRequest) Set(val *TerraformVariableParsingRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableTerraformVariableParsingRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableTerraformVariableParsingRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTerraformVariableParsingRequest(val *TerraformVariableParsingRequest) *NullableTerraformVariableParsingRequest {
	return &NullableTerraformVariableParsingRequest{value: val, isSet: true}
}

func (v NullableTerraformVariableParsingRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTerraformVariableParsingRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
