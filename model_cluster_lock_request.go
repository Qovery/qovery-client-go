/*
Qovery API

- Qovery is the fastest way to deploy your full-stack apps on any Cloud provider. - ℹ️ The API is stable and still in development.

API version: 1.0.3
Contact: support+api+documentation@qovery.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package qovery

import (
	"encoding/json"
	"fmt"
)

// checks if the ClusterLockRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ClusterLockRequest{}

// ClusterLockRequest struct for ClusterLockRequest
type ClusterLockRequest struct {
	Reason               string   `json:"reason"`
	TtlInDays            *float32 `json:"ttl_in_days,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _ClusterLockRequest ClusterLockRequest

// NewClusterLockRequest instantiates a new ClusterLockRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewClusterLockRequest(reason string) *ClusterLockRequest {
	this := ClusterLockRequest{}
	this.Reason = reason
	return &this
}

// NewClusterLockRequestWithDefaults instantiates a new ClusterLockRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewClusterLockRequestWithDefaults() *ClusterLockRequest {
	this := ClusterLockRequest{}
	return &this
}

// GetReason returns the Reason field value
func (o *ClusterLockRequest) GetReason() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Reason
}

// GetReasonOk returns a tuple with the Reason field value
// and a boolean to check if the value has been set.
func (o *ClusterLockRequest) GetReasonOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Reason, true
}

// SetReason sets field value
func (o *ClusterLockRequest) SetReason(v string) {
	o.Reason = v
}

// GetTtlInDays returns the TtlInDays field value if set, zero value otherwise.
func (o *ClusterLockRequest) GetTtlInDays() float32 {
	if o == nil || IsNil(o.TtlInDays) {
		var ret float32
		return ret
	}
	return *o.TtlInDays
}

// GetTtlInDaysOk returns a tuple with the TtlInDays field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ClusterLockRequest) GetTtlInDaysOk() (*float32, bool) {
	if o == nil || IsNil(o.TtlInDays) {
		return nil, false
	}
	return o.TtlInDays, true
}

// HasTtlInDays returns a boolean if a field has been set.
func (o *ClusterLockRequest) HasTtlInDays() bool {
	if o != nil && !IsNil(o.TtlInDays) {
		return true
	}

	return false
}

// SetTtlInDays gets a reference to the given float32 and assigns it to the TtlInDays field.
func (o *ClusterLockRequest) SetTtlInDays(v float32) {
	o.TtlInDays = &v
}

func (o ClusterLockRequest) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ClusterLockRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["reason"] = o.Reason
	if !IsNil(o.TtlInDays) {
		toSerialize["ttl_in_days"] = o.TtlInDays
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *ClusterLockRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"reason",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varClusterLockRequest := _ClusterLockRequest{}

	err = json.Unmarshal(data, &varClusterLockRequest)

	if err != nil {
		return err
	}

	*o = ClusterLockRequest(varClusterLockRequest)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "reason")
		delete(additionalProperties, "ttl_in_days")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableClusterLockRequest struct {
	value *ClusterLockRequest
	isSet bool
}

func (v NullableClusterLockRequest) Get() *ClusterLockRequest {
	return v.value
}

func (v *NullableClusterLockRequest) Set(val *ClusterLockRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableClusterLockRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableClusterLockRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableClusterLockRequest(val *ClusterLockRequest) *NullableClusterLockRequest {
	return &NullableClusterLockRequest{value: val, isSet: true}
}

func (v NullableClusterLockRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableClusterLockRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
