/*
Qovery API

- Qovery is the fastest way to deploy your full-stack apps on any Cloud provider. - ℹ️ The API is stable and still in development.

API version: 1.0.4
Contact: support+api+documentation@qovery.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package qovery

import (
	"encoding/json"
)

// checks if the HelmVersionResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &HelmVersionResponse{}

// HelmVersionResponse struct for HelmVersionResponse
type HelmVersionResponse struct {
	ChartName            *string  `json:"chart_name,omitempty"`
	Versions             []string `json:"versions,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _HelmVersionResponse HelmVersionResponse

// NewHelmVersionResponse instantiates a new HelmVersionResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewHelmVersionResponse() *HelmVersionResponse {
	this := HelmVersionResponse{}
	return &this
}

// NewHelmVersionResponseWithDefaults instantiates a new HelmVersionResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewHelmVersionResponseWithDefaults() *HelmVersionResponse {
	this := HelmVersionResponse{}
	return &this
}

// GetChartName returns the ChartName field value if set, zero value otherwise.
func (o *HelmVersionResponse) GetChartName() string {
	if o == nil || IsNil(o.ChartName) {
		var ret string
		return ret
	}
	return *o.ChartName
}

// GetChartNameOk returns a tuple with the ChartName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HelmVersionResponse) GetChartNameOk() (*string, bool) {
	if o == nil || IsNil(o.ChartName) {
		return nil, false
	}
	return o.ChartName, true
}

// HasChartName returns a boolean if a field has been set.
func (o *HelmVersionResponse) HasChartName() bool {
	if o != nil && !IsNil(o.ChartName) {
		return true
	}

	return false
}

// SetChartName gets a reference to the given string and assigns it to the ChartName field.
func (o *HelmVersionResponse) SetChartName(v string) {
	o.ChartName = &v
}

// GetVersions returns the Versions field value if set, zero value otherwise.
func (o *HelmVersionResponse) GetVersions() []string {
	if o == nil || IsNil(o.Versions) {
		var ret []string
		return ret
	}
	return o.Versions
}

// GetVersionsOk returns a tuple with the Versions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HelmVersionResponse) GetVersionsOk() ([]string, bool) {
	if o == nil || IsNil(o.Versions) {
		return nil, false
	}
	return o.Versions, true
}

// HasVersions returns a boolean if a field has been set.
func (o *HelmVersionResponse) HasVersions() bool {
	if o != nil && !IsNil(o.Versions) {
		return true
	}

	return false
}

// SetVersions gets a reference to the given []string and assigns it to the Versions field.
func (o *HelmVersionResponse) SetVersions(v []string) {
	o.Versions = v
}

func (o HelmVersionResponse) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o HelmVersionResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ChartName) {
		toSerialize["chart_name"] = o.ChartName
	}
	if !IsNil(o.Versions) {
		toSerialize["versions"] = o.Versions
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *HelmVersionResponse) UnmarshalJSON(data []byte) (err error) {
	varHelmVersionResponse := _HelmVersionResponse{}

	err = json.Unmarshal(data, &varHelmVersionResponse)

	if err != nil {
		return err
	}

	*o = HelmVersionResponse(varHelmVersionResponse)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "chart_name")
		delete(additionalProperties, "versions")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableHelmVersionResponse struct {
	value *HelmVersionResponse
	isSet bool
}

func (v NullableHelmVersionResponse) Get() *HelmVersionResponse {
	return v.value
}

func (v *NullableHelmVersionResponse) Set(val *HelmVersionResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableHelmVersionResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableHelmVersionResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableHelmVersionResponse(val *HelmVersionResponse) *NullableHelmVersionResponse {
	return &NullableHelmVersionResponse{value: val, isSet: true}
}

func (v NullableHelmVersionResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableHelmVersionResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
