/*
Qovery API

- Qovery is the fastest way to deploy your full-stack apps on any Cloud provider. - ℹ️ The API is stable and still in development.

API version: 1.0.3
Contact: support+api+documentation@qovery.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package qovery

import (
	"encoding/json"
)

// checks if the KubernetesServiceSpec type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &KubernetesServiceSpec{}

// KubernetesServiceSpec struct for KubernetesServiceSpec
type KubernetesServiceSpec struct {
	Type                 *string                 `json:"type,omitempty"`
	Ports                []KubernetesServicePort `json:"ports,omitempty"`
	Selectors            []KubernetesSelector    `json:"selectors,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _KubernetesServiceSpec KubernetesServiceSpec

// NewKubernetesServiceSpec instantiates a new KubernetesServiceSpec object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewKubernetesServiceSpec() *KubernetesServiceSpec {
	this := KubernetesServiceSpec{}
	return &this
}

// NewKubernetesServiceSpecWithDefaults instantiates a new KubernetesServiceSpec object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewKubernetesServiceSpecWithDefaults() *KubernetesServiceSpec {
	this := KubernetesServiceSpec{}
	return &this
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *KubernetesServiceSpec) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KubernetesServiceSpec) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *KubernetesServiceSpec) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *KubernetesServiceSpec) SetType(v string) {
	o.Type = &v
}

// GetPorts returns the Ports field value if set, zero value otherwise.
func (o *KubernetesServiceSpec) GetPorts() []KubernetesServicePort {
	if o == nil || IsNil(o.Ports) {
		var ret []KubernetesServicePort
		return ret
	}
	return o.Ports
}

// GetPortsOk returns a tuple with the Ports field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KubernetesServiceSpec) GetPortsOk() ([]KubernetesServicePort, bool) {
	if o == nil || IsNil(o.Ports) {
		return nil, false
	}
	return o.Ports, true
}

// HasPorts returns a boolean if a field has been set.
func (o *KubernetesServiceSpec) HasPorts() bool {
	if o != nil && !IsNil(o.Ports) {
		return true
	}

	return false
}

// SetPorts gets a reference to the given []KubernetesServicePort and assigns it to the Ports field.
func (o *KubernetesServiceSpec) SetPorts(v []KubernetesServicePort) {
	o.Ports = v
}

// GetSelectors returns the Selectors field value if set, zero value otherwise.
func (o *KubernetesServiceSpec) GetSelectors() []KubernetesSelector {
	if o == nil || IsNil(o.Selectors) {
		var ret []KubernetesSelector
		return ret
	}
	return o.Selectors
}

// GetSelectorsOk returns a tuple with the Selectors field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KubernetesServiceSpec) GetSelectorsOk() ([]KubernetesSelector, bool) {
	if o == nil || IsNil(o.Selectors) {
		return nil, false
	}
	return o.Selectors, true
}

// HasSelectors returns a boolean if a field has been set.
func (o *KubernetesServiceSpec) HasSelectors() bool {
	if o != nil && !IsNil(o.Selectors) {
		return true
	}

	return false
}

// SetSelectors gets a reference to the given []KubernetesSelector and assigns it to the Selectors field.
func (o *KubernetesServiceSpec) SetSelectors(v []KubernetesSelector) {
	o.Selectors = v
}

func (o KubernetesServiceSpec) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o KubernetesServiceSpec) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !IsNil(o.Ports) {
		toSerialize["ports"] = o.Ports
	}
	if !IsNil(o.Selectors) {
		toSerialize["selectors"] = o.Selectors
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *KubernetesServiceSpec) UnmarshalJSON(data []byte) (err error) {
	varKubernetesServiceSpec := _KubernetesServiceSpec{}

	err = json.Unmarshal(data, &varKubernetesServiceSpec)

	if err != nil {
		return err
	}

	*o = KubernetesServiceSpec(varKubernetesServiceSpec)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "type")
		delete(additionalProperties, "ports")
		delete(additionalProperties, "selectors")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableKubernetesServiceSpec struct {
	value *KubernetesServiceSpec
	isSet bool
}

func (v NullableKubernetesServiceSpec) Get() *KubernetesServiceSpec {
	return v.value
}

func (v *NullableKubernetesServiceSpec) Set(val *KubernetesServiceSpec) {
	v.value = val
	v.isSet = true
}

func (v NullableKubernetesServiceSpec) IsSet() bool {
	return v.isSet
}

func (v *NullableKubernetesServiceSpec) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableKubernetesServiceSpec(val *KubernetesServiceSpec) *NullableKubernetesServiceSpec {
	return &NullableKubernetesServiceSpec{value: val, isSet: true}
}

func (v NullableKubernetesServiceSpec) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableKubernetesServiceSpec) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
