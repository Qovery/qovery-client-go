/*
Qovery API

- Qovery is the fastest way to deploy your full-stack apps on any Cloud provider. - ℹ️ The API is stable and still in development.

API version: 1.0.4
Contact: support+api+documentation@qovery.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package qovery

import (
	"encoding/json"
	"fmt"
)

// checks if the HelmDefaultValuesRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &HelmDefaultValuesRequest{}

// HelmDefaultValuesRequest struct for HelmDefaultValuesRequest
type HelmDefaultValuesRequest struct {
	Source               HelmDefaultValuesRequestAllOfSource `json:"source"`
	AdditionalProperties map[string]interface{}
}

type _HelmDefaultValuesRequest HelmDefaultValuesRequest

// NewHelmDefaultValuesRequest instantiates a new HelmDefaultValuesRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewHelmDefaultValuesRequest(source HelmDefaultValuesRequestAllOfSource) *HelmDefaultValuesRequest {
	this := HelmDefaultValuesRequest{}
	this.Source = source
	return &this
}

// NewHelmDefaultValuesRequestWithDefaults instantiates a new HelmDefaultValuesRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewHelmDefaultValuesRequestWithDefaults() *HelmDefaultValuesRequest {
	this := HelmDefaultValuesRequest{}
	return &this
}

// GetSource returns the Source field value
func (o *HelmDefaultValuesRequest) GetSource() HelmDefaultValuesRequestAllOfSource {
	if o == nil {
		var ret HelmDefaultValuesRequestAllOfSource
		return ret
	}

	return o.Source
}

// GetSourceOk returns a tuple with the Source field value
// and a boolean to check if the value has been set.
func (o *HelmDefaultValuesRequest) GetSourceOk() (*HelmDefaultValuesRequestAllOfSource, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Source, true
}

// SetSource sets field value
func (o *HelmDefaultValuesRequest) SetSource(v HelmDefaultValuesRequestAllOfSource) {
	o.Source = v
}

func (o HelmDefaultValuesRequest) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o HelmDefaultValuesRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["source"] = o.Source

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *HelmDefaultValuesRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"source",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varHelmDefaultValuesRequest := _HelmDefaultValuesRequest{}

	err = json.Unmarshal(data, &varHelmDefaultValuesRequest)

	if err != nil {
		return err
	}

	*o = HelmDefaultValuesRequest(varHelmDefaultValuesRequest)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "source")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableHelmDefaultValuesRequest struct {
	value *HelmDefaultValuesRequest
	isSet bool
}

func (v NullableHelmDefaultValuesRequest) Get() *HelmDefaultValuesRequest {
	return v.value
}

func (v *NullableHelmDefaultValuesRequest) Set(val *HelmDefaultValuesRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableHelmDefaultValuesRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableHelmDefaultValuesRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableHelmDefaultValuesRequest(val *HelmDefaultValuesRequest) *NullableHelmDefaultValuesRequest {
	return &NullableHelmDefaultValuesRequest{value: val, isSet: true}
}

func (v NullableHelmDefaultValuesRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableHelmDefaultValuesRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
